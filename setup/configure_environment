#!/usr/bin/env python2

"""
Updates drake to use a specific Python interpreter for both Bazel and the
Python bindings.

This generates (or overwrites) `./gen/environment.bazelrc`.
"""

from __future__ import print_function
import argparse
import os
from os.path import abspath, dirname, join, isabs, isfile, isdir
from subprocess import check_output
import sys

TEMPLATE_BAZELRC = """
# AUTOGENERATED: Do not edit by hand.
# Please use `./setup/configure_environment` instead.
build --action_env=PYTHON_BIN_PATH={python_bin}
build --python_path={python_bin}
""".lstrip()


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "--python_bin", type=str, required=True,
        help="Python binary. Must be an absolut path.")
    parser.add_argument(
        "-f", "--force", action="store_true",
        help="Overwrite pre-existing configuration.")
    args = parser.parse_args()

    workspace_dir = dirname(dirname(abspath(__file__)))
    target_relpath = "gen/environment.bazelrc"

    # Python.
    # N.B. Configuration checks are performed by `tools/python/repository.bzl`.
    python_bin = args.python_bin
    if not isabs(python_bin):
        parser.error("Please specify an absolute path to the binary.")
    if not isfile(python_bin):
        parser.error("File does not exist: {}".format(python_bin))

    # Write target configuration file.
    target_abspath = join(workspace_dir, target_relpath)
    if isfile(target_abspath) and not args.force:
        parser.error(
            "'{}' already exists, and will not be overwritten without --force."
            .format(target_relpath))
    if not isdir(dirname(target_abspath)):
        os.makedirs(dirname(target_abspath))
    with open(target_abspath, 'w') as f:
        f.write(TEMPLATE_BAZELRC.format(python_bin=python_bin))
    print("Wrote: {}".format(target_abspath))
    print("  Python binary: {}".format(python_bin))


if __name__ == "__main__":
    main()
