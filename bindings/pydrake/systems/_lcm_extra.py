# See `ExecuteExtraPythonCode` in `pydrake_pybind.h` for usage details and
# rationale.
from pydrake.common.value import AbstractValue, Value
from pydrake.systems.lcm import _cpp_types


class PySerializer(SerializerInterface):
    """Provides a Python implementation of `SerializerInterface` for use
    with `LcmPublisherSystem` and `LcmSubscriberSystem` when the given
    `lcm_type` is a Python object (not a C++ object).
    """
    def __init__(self, lcm_type):
        SerializerInterface.__init__(self)
        self._lcm_type = lcm_type

    def CreateDefaultValue(self):
        return AbstractValue.Make(self._lcm_type())

    def Deserialize(self, buffer, abstract_value):
        message = self._lcm_type.decode(buffer)
        abstract_value.set_value(message)

    def Serialize(self, abstract_value):
        assert isinstance(abstract_value, AbstractValue)
        message = abstract_value.get_value()
        assert isinstance(message, self._lcm_type)
        return message.encode()


@staticmethod
def _make_lcm_subscriber(channel, lcm_type, lcm, use_cpp_serializer=False):
    """Convenience to create an LCM subscriber system with a concrete type.

    Args:
        channel: LCM channel name.
        lcm_type: Python class generated by lcmgen.
        lcm: LCM service instance.
        use_cpp_serializer: Use C++ serializer to interface with LCM converter
            systems that are implemented in C++. LCM types must be registered
            in C++ via `BindCppSerializer`.
    """
    # N.B. This documentation is actually public, as it is assigned to classes
    # below as a static class method.
    if not use_cpp_serializer:
        serializer = PySerializer(lcm_type)
    else:
        serializer = _cpp_types.Serializer_[lcm_type]()
    return LcmSubscriberSystem(channel, serializer, lcm)


@staticmethod
def _make_lcm_publisher(
        channel, lcm_type, lcm, publish_period=0.0, use_cpp_serializer=False):
    """Convenience to create an LCM publisher system with a concrete type.

    Args:
        channel: LCM channel name.
        lcm_type: Python class generated by lcmgen.
        lcm: LCM service instance.
        publish_period: System's publish period (in seconds). Default is 0.
        use_cpp_serializer: Use C++ serializer to interface with LCM converter
            systems that are implemented in C++. LCM types must be registered
            in C++ via `BindCppSerializer`.
    """
    if not use_cpp_serializer:
        serializer = PySerializer(lcm_type)
    else:
        serializer = _cpp_types.Serializer_[lcm_type]()
    return LcmPublisherSystem(channel, serializer, lcm, publish_period)


LcmSubscriberSystem.Make = _make_lcm_subscriber
LcmPublisherSystem.Make = _make_lcm_publisher


def lcm_value_cpp_to_py(value):
    """
    Takes a Value[CppType] for a LCM message (bound via `BindCppSerializer`)
    and converts it to Value[object] for its Python message type.
    """
    # TODO(eric.cousineau): Register translators directly in pydrake, without
    # needing `AbstractValue` and `SerializerInterface`.
    assert isinstance(value, AbstractValue), (
        f"Must be an AbstractValue: {type(value)}")
    assert not isinstance(value, Value[object]), (
        f"Must not be Value[object]. Stored type: {type(value.get_value())}")
    cpp_cls = type(value.get_value())
    py_cls = _cpp_types.cpp_to_py.get(cpp_cls)
    assert py_cls is not None, f"Unregistered C++ LCM type: {cpp_cls}"
    cpp_serializer = _cpp_types.Serializer_[py_cls]()
    data = cpp_serializer.Serialize(value)
    py_serializer = PySerializer(py_cls)
    new_value = py_serializer.CreateDefaultValue()
    py_serializer.Deserialize(data, new_value)
    return new_value


def lcm_value_py_to_cpp(value):
    """
    Takes a Value[object] for a Python LCM message and converts it to
    Value[CppType] for its C++ type (bound via `BindCppSerializer`).
    """
    assert isinstance(value, Value[object]), (
        f"Must be Value[object]: {type(value)}")
    py_cls = type(value.get_value())
    cpp_cls = _cpp_types.py_to_cpp.get(py_cls)
    assert cpp_cls is not None, f"Unregistered Python LCM type: {py_cls}"
    py_serializer = PySerializer(py_cls)
    data = py_serializer.Serialize(value)
    cpp_serializer = _cpp_types.Serializer_[py_cls]()
    new_value = cpp_serializer.CreateDefaultValue()
    cpp_serializer.Deserialize(data, new_value)
    return new_value
