
bazel-bin/examples/kuka_iiwa_arm/kuka_simulation_test:     file format elf64-x86-64
bazel-bin/examples/kuka_iiwa_arm/kuka_simulation_test
architecture: i386:x86-64, flags 0x00000150:
HAS_SYMS, DYNAMIC, D_PAGED
start address 0x0000000000071380

Program Header:
    PHDR off    0x0000000000000040 vaddr 0x0000000000000040 paddr 0x0000000000000040 align 2**3
         filesz 0x0000000000000230 memsz 0x0000000000000230 flags r-x
  INTERP off    0x0000000000000270 vaddr 0x0000000000000270 paddr 0x0000000000000270 align 2**0
         filesz 0x000000000000001c memsz 0x000000000000001c flags r--
    LOAD off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**21
         filesz 0x000000000010fdcc memsz 0x000000000010fdcc flags r-x
    LOAD off    0x0000000000110830 vaddr 0x0000000000310830 paddr 0x0000000000310830 align 2**21
         filesz 0x0000000000005f38 memsz 0x00000000000072d8 flags rw-
 DYNAMIC off    0x00000000001159b0 vaddr 0x00000000003159b0 paddr 0x00000000003159b0 align 2**3
         filesz 0x0000000000000260 memsz 0x0000000000000260 flags rw-
    NOTE off    0x000000000000028c vaddr 0x000000000000028c paddr 0x000000000000028c align 2**2
         filesz 0x0000000000000040 memsz 0x0000000000000040 flags r--
     TLS off    0x0000000000110830 vaddr 0x0000000000310830 paddr 0x0000000000310830 align 2**3
         filesz 0x0000000000000000 memsz 0x0000000000000010 flags r--
EH_FRAME off    0x00000000000f6cd0 vaddr 0x00000000000f6cd0 paddr 0x00000000000f6cd0 align 2**2
         filesz 0x00000000000032ec memsz 0x00000000000032ec flags r--
   STACK off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**4
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-
   RELRO off    0x0000000000110830 vaddr 0x0000000000310830 paddr 0x0000000000310830 align 2**0
         filesz 0x00000000000057d0 memsz 0x00000000000057d0 flags r--

Dynamic Section:
  NEEDED               libdrake.so
  NEEDED               libm.so.6
  NEEDED               libgflags.so.2
  NEEDED               libpthread.so.0
  NEEDED               libstdc++.so.6
  NEEDED               libgcc_s.so.1
  NEEDED               libc.so.6
  NEEDED               ld-linux-x86-64.so.2
  RPATH                $ORIGIN/../../_solib_k8/_U_S_Sexamples_Skuka_Uiiwa_Uarm_Ckuka_Usimulation_Utest___Utools_Sinstall_Slibdrake:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkFiltersSources___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkFiltersGeneral___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkCommonComputationalGeometry___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkIOGeometry___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkIOLegacy___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkIOCore___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkIOImage___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkDICOMParser___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_Cvtkmetaio___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkRenderingOpenGL2___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkRenderingCore___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkCommonColor___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkFiltersCore___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkFiltersGeometry___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkCommonExecutionModel___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkCommonDataModel___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkCommonSystem___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkCommonTransforms___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkCommonMisc___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkCommonMath___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_CvtkCommonCore___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_Cvtksys___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@vtk_S_S_Cvtkglew___Uexternal_Svtk_Slib:$ORIGIN/../../_solib_k8/_U@dreal_S_S_Cdreal___Uexternal_Sdreal_Sopt_Sdreal_S4.18.02.4_Slib:$ORIGIN/../../_solib_k8/_U@dreal_S_S_Cibex___Uexternal_Sdreal_Sopt_Slibibex_S2.6.5_Slib:$ORIGIN/../../_solib_k8/_U@ignition_Urndf_S_S_Cignition_Urndf___Uexternal_Signition_Urndf:$ORIGIN/../../_solib_k8/_U@ignition_Umath_S_S_Cignition_Umath___Uexternal_Signition_Umath:$ORIGIN/../../_solib_k8/_U@lcm_S_S_Clcm___Uexternal_Slcm:$ORIGIN/../../_solib_k8/_U@osqp_S_S_Cosqp___Uexternal_Sosqp:$ORIGIN/../../_solib_k8/_U@scs_S_S_Cscsdir___Uexternal_Sscs:/usr/lib/gcc/x86_64-linux-gnu/5:/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu:/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib:/lib/../lib:/usr/lib/../lib:/usr/lib/gcc/x86_64-linux-gnu/5/../../..
  INIT                 0x000000000006ee78
  FINI                 0x00000000000e77d4
  INIT_ARRAY           0x0000000000310830
  INIT_ARRAYSZ         0x0000000000000020
  FINI_ARRAY           0x0000000000310850
  FINI_ARRAYSZ         0x0000000000000008
  GNU_HASH             0x00000000000002d0
  STRTAB               0x0000000000016030
  SYMTAB               0x0000000000005440
  STRSZ                0x0000000000047cd4
  SYMENT               0x0000000000000018
  DEBUG                0x0000000000000000
  PLTGOT               0x0000000000316000
  PLTRELSZ             0x0000000000000fc0
  PLTREL               0x0000000000000007
  JMPREL               0x000000000006deb8
  RELA                 0x000000000005f4b8
  RELASZ               0x000000000000ea00
  RELAENT              0x0000000000000018
  FLAGS_1              0x0000000008000000
  VERNEED              0x000000000005f358
  VERNEEDNUM           0x0000000000000006
  VERSYM               0x000000000005dd04
  RELACOUNT            0x00000000000007b4

Version References:
  required from ld-linux-x86-64.so.2:
    0x0d696913 0x00 15 GLIBC_2.3
  required from libpthread.so.0:
    0x09691a75 0x00 12 GLIBC_2.2.5
  required from libgcc_s.so.1:
    0x0b792650 0x00 10 GCC_3.0
  required from libm.so.6:
    0x09691a75 0x00 09 GLIBC_2.2.5
  required from libc.so.6:
    0x06969194 0x00 14 GLIBC_2.14
    0x0d696914 0x00 07 GLIBC_2.4
    0x09691a75 0x00 05 GLIBC_2.2.5
  required from libstdc++.so.6:
    0x0297f868 0x00 17 GLIBCXX_3.4.18
    0x0297f869 0x00 16 GLIBCXX_3.4.19
    0x0297f864 0x00 13 GLIBCXX_3.4.14
    0x02297f89 0x00 11 GLIBCXX_3.4.9
    0x0297f861 0x00 08 GLIBCXX_3.4.11
    0x08922974 0x00 06 GLIBCXX_3.4
    0x056bafd3 0x00 04 CXXABI_1.3
    0x0297f871 0x00 03 GLIBCXX_3.4.21
    0x0bafd179 0x00 02 CXXABI_1.3.9

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000000270  0000000000000270  00000270  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.ABI-tag 00000020  000000000000028c  000000000000028c  0000028c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000020  00000000000002ac  00000000000002ac  000002ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .gnu.hash     0000516c  00000000000002d0  00000000000002d0  000002d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dynsym       00010bf0  0000000000005440  0000000000005440  00005440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynstr       00047cd4  0000000000016030  0000000000016030  00016030  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .gnu.version  00001654  000000000005dd04  000000000005dd04  0005dd04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version_r 00000160  000000000005f358  000000000005f358  0005f358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rela.dyn     0000ea00  000000000005f4b8  000000000005f4b8  0005f4b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.plt     00000fc0  000000000006deb8  000000000006deb8  0006deb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .init         0000001a  000000000006ee78  000000000006ee78  0006ee78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .plt          00000a90  000000000006eea0  000000000006eea0  0006eea0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt.got      00000010  000000000006f930  000000000006f930  0006f930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text         00077e92  000000000006f940  000000000006f940  0006f940  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .fini         00000009  00000000000e77d4  00000000000e77d4  000e77d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       0000f4f0  00000000000e77e0  00000000000e77e0  000e77e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame_hdr 000032ec  00000000000f6cd0  00000000000f6cd0  000f6cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .eh_frame     000119ec  00000000000f9fc0  00000000000f9fc0  000f9fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .gcc_except_table 00004420  000000000010b9ac  000000000010b9ac  0010b9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .tbss         00000010  0000000000310830  0000000000310830  00110830  2**3
                  ALLOC, THREAD_LOCAL
 20 .init_array   00000020  0000000000310830  0000000000310830  00110830  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 21 .fini_array   00000008  0000000000310850  0000000000310850  00110850  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 22 .jcr          00000008  0000000000310858  0000000000310858  00110858  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .data.rel.ro  00005150  0000000000310860  0000000000310860  00110860  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 24 .dynamic      00000260  00000000003159b0  00000000003159b0  001159b0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 25 .got          000003e8  0000000000315c10  0000000000315c10  00115c10  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 26 .got.plt      00000558  0000000000316000  0000000000316000  00116000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 27 .data         00000208  0000000000316560  0000000000316560  00116560  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 28 .bss          00001388  0000000000316780  0000000000316780  00116768  2**5
                  ALLOC
 29 .comment      00000034  0000000000000000  0000000000000000  00116768  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
0000000000000270 l    d  .interp	0000000000000000              .interp
000000000000028c l    d  .note.ABI-tag	0000000000000000              .note.ABI-tag
00000000000002ac l    d  .note.gnu.build-id	0000000000000000              .note.gnu.build-id
00000000000002d0 l    d  .gnu.hash	0000000000000000              .gnu.hash
0000000000005440 l    d  .dynsym	0000000000000000              .dynsym
0000000000016030 l    d  .dynstr	0000000000000000              .dynstr
000000000005dd04 l    d  .gnu.version	0000000000000000              .gnu.version
000000000005f358 l    d  .gnu.version_r	0000000000000000              .gnu.version_r
000000000005f4b8 l    d  .rela.dyn	0000000000000000              .rela.dyn
000000000006deb8 l    d  .rela.plt	0000000000000000              .rela.plt
000000000006ee78 l    d  .init	0000000000000000              .init
000000000006eea0 l    d  .plt	0000000000000000              .plt
000000000006f930 l    d  .plt.got	0000000000000000              .plt.got
000000000006f940 l    d  .text	0000000000000000              .text
00000000000e77d4 l    d  .fini	0000000000000000              .fini
00000000000e77e0 l    d  .rodata	0000000000000000              .rodata
00000000000f6cd0 l    d  .eh_frame_hdr	0000000000000000              .eh_frame_hdr
00000000000f9fc0 l    d  .eh_frame	0000000000000000              .eh_frame
000000000010b9ac l    d  .gcc_except_table	0000000000000000              .gcc_except_table
0000000000310830 l    d  .tbss	0000000000000000              .tbss
0000000000310830 l    d  .init_array	0000000000000000              .init_array
0000000000310850 l    d  .fini_array	0000000000000000              .fini_array
0000000000310858 l    d  .jcr	0000000000000000              .jcr
0000000000310860 l    d  .data.rel.ro	0000000000000000              .data.rel.ro
00000000003159b0 l    d  .dynamic	0000000000000000              .dynamic
0000000000315c10 l    d  .got	0000000000000000              .got
0000000000316000 l    d  .got.plt	0000000000000000              .got.plt
0000000000316560 l    d  .data	0000000000000000              .data
0000000000316780 l    d  .bss	0000000000000000              .bss
0000000000000000 l    d  .comment	0000000000000000              .comment
0000000000000000 l    df *ABS*	0000000000000000              kuka_simulation.cc
00000000000714e0 l     F .text	0000000000000091              __int64_t_encode_array
0000000000071580 l     F .text	000000000000008e              __int64_t_decode_array
0000000000072140 l     F .text	0000000000000006              spdlog::details::(anonymous namespace)::name_formatter::~name_formatter()
0000000000072140 l     F .text	0000000000000006              spdlog::details::(anonymous namespace)::name_formatter::~name_formatter()
0000000000073990 l     F .text	0000000000000037              __tcf_3
0000000000316c60 l     O .bss	0000000000000180              spdlog::details::full_months
00000000000739d0 l     F .text	0000000000000037              __tcf_2
0000000000316de0 l     O .bss	0000000000000180              spdlog::details::months
0000000000073a10 l     F .text	0000000000000037              __tcf_1
0000000000316f60 l     O .bss	00000000000000e0              spdlog::details::full_days
0000000000073a50 l     F .text	0000000000000037              __tcf_0
0000000000317040 l     O .bss	00000000000000e0              spdlog::details::days
00000000000745a0 l     F .text	000000000000000f              spdlog::details::(anonymous namespace)::name_formatter::~name_formatter()
00000000000ebf80 l     O .rodata	000000000000001b              drake::systems::DiagramContext<double>::GetMutableSubsystemContext(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)::__func__
00000000000ec6b0 l     O .rodata	0000000000000014              drake::systems::DiagramContext<double>::GetSubsystemContext(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const::__func__
00000000000ec350 l     O .rodata	0000000000000016              drake::systems::System<double>::DoCalcTimeDerivatives(drake::systems::Context<double> const&, drake::systems::ContinuousState<double>*) const::__func__
00000000000eb600 l     O .rodata	0000000000000014              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetSubsystemContext(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const::__func__
00000000000ebef0 l     O .rodata	0000000000000014              drake::systems::DiagramContext<drake::symbolic::Expression>::GetSubsystemContext(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const::__func__
00000000000ebc20 l     O .rodata	0000000000000016              drake::systems::System<drake::symbolic::Expression>::DoCalcTimeDerivatives(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression>*) const::__func__
00000000000eb800 l     O .rodata	000000000000001b              drake::systems::DiagramContext<drake::symbolic::Expression>::GetMutableSubsystemContext(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)::__func__
00000000000ebc38 l     O .rodata	000000000000000d              drake::systems::DiagramContinuousState<drake::symbolic::Expression>::get_substate(int) const::__func__
00000000000eaab0 l     O .rodata	000000000000001b              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetMutableSubsystemContext(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)::__func__
00000000000eaed8 l     O .rodata	000000000000000d              drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_substate(int) const::__func__
00000000000ec368 l     O .rodata	000000000000000d              drake::systems::DiagramContinuousState<double>::get_substate(int) const::__func__
00000000000ebd00 l     O .rodata	0000000000000020              drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::get_mutable_subevent_collection(int)::__func__
00000000000eb8f0 l     O .rodata	0000000000000018              drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::get_subevent_collection(int) const::__func__
00000000000ebba0 l     O .rodata	0000000000000015              drake::systems::DiagramState<drake::symbolic::Expression>::get_mutable_substate(int)::__func__
00000000000eb878 l     O .rodata	000000000000000d              drake::systems::DiagramState<drake::symbolic::Expression>::get_substate(int) const::__func__
00000000000eafc0 l     O .rodata	0000000000000020              drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_mutable_subevent_collection(int)::__func__
00000000000eaba0 l     O .rodata	0000000000000018              drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_subevent_collection(int) const::__func__
00000000000eae40 l     O .rodata	0000000000000015              drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_mutable_substate(int)::__func__
00000000000eab28 l     O .rodata	000000000000000d              drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_substate(int) const::__func__
00000000000eaec0 l     O .rodata	0000000000000016              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcTimeDerivatives(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const::__func__
00000000000ec4c0 l     O .rodata	0000000000000020              drake::systems::DiagramCompositeEventCollection<double>::get_mutable_subevent_collection(int)::__func__
00000000000ec070 l     O .rodata	0000000000000018              drake::systems::DiagramCompositeEventCollection<double>::get_subevent_collection(int) const::__func__
00000000000ec300 l     O .rodata	0000000000000015              drake::systems::DiagramState<double>::get_mutable_substate(int)::__func__
00000000000ebff8 l     O .rodata	000000000000000d              drake::systems::DiagramState<double>::get_substate(int) const::__func__
00000000000ebf60 l     O .rodata	0000000000000012              drake::systems::Diagram<double>::GetSubsystemStuff<drake::systems::Context<double>, drake::systems::DiagramContext<double> >(drake::systems::System<double> const&, drake::systems::Context<double>*, std::function<drake::systems::Context<double>* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::Context<double>*)>, std::function<drake::systems::Context<double>& (drake::systems::DiagramContext<double>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000ebfa0 l     O .rodata	0000000000000012              drake::systems::Diagram<double>::GetSubsystemStuff<drake::systems::Context<double> const, drake::systems::DiagramContext<double> const>(drake::systems::System<double> const&, drake::systems::Context<double> const*, std::function<drake::systems::Context<double> const* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::Context<double> const*)>, std::function<drake::systems::Context<double> const& (drake::systems::DiagramContext<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000ec220 l     O .rodata	0000000000000014              drake::systems::Diagram<double>::GetSubsystemContext(drake::systems::System<double> const&, drake::systems::Context<double> const&) const::__func__
00000000000eaad0 l     O .rodata	0000000000000012              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetSubsystemStuff<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const, drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const>(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::function<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)>, std::function<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000ead40 l     O .rodata	0000000000000014              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetSubsystemContext(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const::__func__
00000000000eb820 l     O .rodata	0000000000000012              drake::systems::Diagram<drake::symbolic::Expression>::GetSubsystemStuff<drake::systems::Context<drake::symbolic::Expression> const, drake::systems::DiagramContext<drake::symbolic::Expression> const>(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*, std::function<drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*)>, std::function<drake::systems::Context<drake::symbolic::Expression> const& (drake::systems::DiagramContext<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000ebaa0 l     O .rodata	0000000000000014              drake::systems::Diagram<drake::symbolic::Expression>::GetSubsystemContext(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const&) const::__func__
00000000000eb7e0 l     O .rodata	0000000000000012              drake::systems::Diagram<drake::symbolic::Expression>::GetSubsystemStuff<drake::systems::Context<drake::symbolic::Expression>, drake::systems::DiagramContext<drake::symbolic::Expression> >(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*, std::function<drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*)>, std::function<drake::systems::Context<drake::symbolic::Expression>& (drake::systems::DiagramContext<drake::symbolic::Expression>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000eb840 l     O .rodata	0000000000000012              drake::systems::Diagram<drake::symbolic::Expression>::GetSubsystemStuff<drake::systems::State<drake::symbolic::Expression>, drake::systems::DiagramState<drake::symbolic::Expression> >(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*, std::function<drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*)>, std::function<drake::systems::State<drake::symbolic::Expression>& (drake::systems::DiagramState<drake::symbolic::Expression>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000eb860 l     O .rodata	0000000000000012              drake::systems::Diagram<drake::symbolic::Expression>::GetSubsystemStuff<drake::systems::State<drake::symbolic::Expression> const, drake::systems::DiagramState<drake::symbolic::Expression> const>(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*, std::function<drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*)>, std::function<drake::systems::State<drake::symbolic::Expression> const& (drake::systems::DiagramState<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000eb890 l     O .rodata	0000000000000012              drake::systems::Diagram<drake::symbolic::Expression>::GetSubsystemStuff<drake::systems::ContinuousState<drake::symbolic::Expression> const, drake::systems::DiagramContinuousState<drake::symbolic::Expression> const>(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*, std::function<drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*)>, std::function<drake::systems::ContinuousState<drake::symbolic::Expression> const& (drake::systems::DiagramContinuousState<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000eb8b0 l     O .rodata	0000000000000012              drake::systems::Diagram<drake::symbolic::Expression>::GetSubsystemStuff<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression> >(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*, std::function<drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*)>, std::function<drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000eba60 l     O .rodata	0000000000000036              drake::systems::Diagram<drake::symbolic::Expression>::AddTriggeredWitnessFunctionToCompositeEventCollection(drake::systems::Event<drake::symbolic::Expression>*, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const::__func__
00000000000eba20 l     O .rodata	000000000000002c              drake::systems::Diagram<drake::symbolic::Expression>::GetMutableSubsystemCompositeEventCollection(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const::__func__
00000000000eb8d0 l     O .rodata	0000000000000012              drake::systems::Diagram<drake::symbolic::Expression>::GetSubsystemStuff<drake::systems::CompositeEventCollection<drake::symbolic::Expression> const, drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression> const>(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*, std::function<drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*)>, std::function<drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000eaa90 l     O .rodata	0000000000000012              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetSubsystemStuff<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::function<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)>, std::function<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000eaaf0 l     O .rodata	0000000000000012              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetSubsystemStuff<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::function<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)>, std::function<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000eab10 l     O .rodata	0000000000000012              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetSubsystemStuff<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const, drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const>(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::function<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)>, std::function<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000eab40 l     O .rodata	0000000000000012              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetSubsystemStuff<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const, drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const>(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::function<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)>, std::function<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000eab60 l     O .rodata	0000000000000012              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetSubsystemStuff<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::function<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)>, std::function<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000ead00 l     O .rodata	0000000000000036              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AddTriggeredWitnessFunctionToCompositeEventCollection(drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const::__func__
00000000000eacc0 l     O .rodata	000000000000002c              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetMutableSubsystemCompositeEventCollection(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const::__func__
00000000000eab80 l     O .rodata	0000000000000012              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetSubsystemStuff<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const, drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const>(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::function<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)>, std::function<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000ec460 l     O .rodata	0000000000000018              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::get_subevent_collection(int) const::__func__
00000000000ec280 l     O .rodata	0000000000000017              drake::systems::Diagram<double>::DispatchPublishHandler(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::PublishEvent<double> > const&) const::__func__
00000000000ebfc0 l     O .rodata	0000000000000012              drake::systems::Diagram<double>::GetSubsystemStuff<drake::systems::State<double>, drake::systems::DiagramState<double> >(drake::systems::System<double> const&, drake::systems::State<double>*, std::function<drake::systems::State<double>* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::State<double>*)>, std::function<drake::systems::State<double>& (drake::systems::DiagramState<double>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000ebfe0 l     O .rodata	0000000000000012              drake::systems::Diagram<double>::GetSubsystemStuff<drake::systems::State<double> const, drake::systems::DiagramState<double> const>(drake::systems::System<double> const&, drake::systems::State<double> const*, std::function<drake::systems::State<double> const* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::State<double> const*)>, std::function<drake::systems::State<double> const& (drake::systems::DiagramState<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000ec010 l     O .rodata	0000000000000012              drake::systems::Diagram<double>::GetSubsystemStuff<drake::systems::ContinuousState<double> const, drake::systems::DiagramContinuousState<double> const>(drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*, std::function<drake::systems::ContinuousState<double> const* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*)>, std::function<drake::systems::ContinuousState<double> const& (drake::systems::DiagramContinuousState<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000ec030 l     O .rodata	0000000000000012              drake::systems::Diagram<double>::GetSubsystemStuff<drake::systems::CompositeEventCollection<double>, drake::systems::DiagramCompositeEventCollection<double> >(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*, std::function<drake::systems::CompositeEventCollection<double>* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*)>, std::function<drake::systems::CompositeEventCollection<double>& (drake::systems::DiagramCompositeEventCollection<double>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000ec1e0 l     O .rodata	0000000000000036              drake::systems::Diagram<double>::AddTriggeredWitnessFunctionToCompositeEventCollection(drake::systems::Event<double>*, drake::systems::CompositeEventCollection<double>*) const::__func__
00000000000ec1a0 l     O .rodata	000000000000002c              drake::systems::Diagram<double>::GetMutableSubsystemCompositeEventCollection(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*) const::__func__
00000000000ec050 l     O .rodata	0000000000000012              drake::systems::Diagram<double>::GetSubsystemStuff<drake::systems::CompositeEventCollection<double> const, drake::systems::DiagramCompositeEventCollection<double> const>(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*, std::function<drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*)>, std::function<drake::systems::CompositeEventCollection<double> const& (drake::systems::DiagramCompositeEventCollection<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>) const::__func__
00000000000ec578 l     O .rodata	0000000000000008              drake::systems::VectorBase<double>::SetFrom(drake::systems::VectorBase<double> const&)::__func__
00000000000ec580 l     O .rodata	000000000000000e              drake::systems::VectorBase<double>::SetFromVector(Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)::__func__
00000000000ec540 l     O .rodata	0000000000000014              drake::systems::System<double>::DoMapVelocityToQDot(drake::systems::Context<double> const&, Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<double>*) const::__func__
00000000000ec500 l     O .rodata	0000000000000014              drake::systems::System<double>::DoMapQDotToVelocity(drake::systems::Context<double> const&, Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<double>*) const::__func__
00000000000eb040 l     O .rodata	0000000000000014              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoMapVelocityToQDot(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const::__func__
00000000000eb000 l     O .rodata	0000000000000014              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoMapQDotToVelocity(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const::__func__
00000000000ebd80 l     O .rodata	0000000000000014              drake::systems::System<drake::symbolic::Expression>::DoMapVelocityToQDot(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<drake::symbolic::Expression>*) const::__func__
00000000000ebd40 l     O .rodata	0000000000000014              drake::systems::System<drake::symbolic::Expression>::DoMapQDotToVelocity(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<drake::symbolic::Expression>*) const::__func__
00000000000ec140 l     O .rodata	000000000000000a              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::add_event(std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > >)::__func__
00000000000ec100 l     O .rodata	000000000000000a              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::add_event(std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > >)::__func__
00000000000ec0c0 l     O .rodata	000000000000000a              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::add_event(std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > >)::__func__
00000000000eb9c0 l     O .rodata	000000000000000a              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::add_event(std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > >)::__func__
00000000000eb980 l     O .rodata	000000000000000a              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::add_event(std::unique_ptr<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > >)::__func__
00000000000eb940 l     O .rodata	000000000000000a              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::add_event(std::unique_ptr<drake::systems::PublishEvent<drake::symbolic::Expression>, std::default_delete<drake::systems::PublishEvent<drake::symbolic::Expression> > >)::__func__
00000000000eac60 l     O .rodata	000000000000000a              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::add_event(std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >)::__func__
00000000000eac20 l     O .rodata	000000000000000a              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::add_event(std::unique_ptr<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >)::__func__
00000000000eabe0 l     O .rodata	000000000000000a              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::add_event(std::unique_ptr<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >)::__func__
00000000000ec170 l     O .rodata	000000000000001b              drake::systems::Diagram<double>::GetGraphvizOutputPortToken(drake::systems::OutputPort<double> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const::__func__
00000000000ec150 l     O .rodata	000000000000001a              drake::systems::Diagram<double>::GetGraphvizInputPortToken(drake::systems::InputPortDescriptor<double> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const::__func__
00000000000eba00 l     O .rodata	000000000000001b              drake::systems::Diagram<drake::symbolic::Expression>::GetGraphvizOutputPortToken(drake::systems::OutputPort<drake::symbolic::Expression> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const::__func__
00000000000eb9e0 l     O .rodata	000000000000001a              drake::systems::Diagram<drake::symbolic::Expression>::GetGraphvizInputPortToken(drake::systems::InputPortDescriptor<drake::symbolic::Expression> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const::__func__
00000000000eaca0 l     O .rodata	000000000000001b              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetGraphvizOutputPortToken(drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const::__func__
00000000000eac80 l     O .rodata	000000000000001a              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetGraphvizInputPortToken(drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const::__func__
000000000007a7b0 l     F .text	0000000000000079              void fmt::internal::format_decimal<unsigned int, char, fmt::internal::NoThousandsSep>(char*, unsigned int, unsigned int, fmt::internal::NoThousandsSep) [clone .isra.337]
000000000007a830 l     F .text	0000000000000091              void fmt::internal::format_decimal<unsigned long, char, fmt::internal::NoThousandsSep>(char*, unsigned long, unsigned int, fmt::internal::NoThousandsSep) [clone .isra.338]
000000000006f940 l     F .text	000000000000004d              std::default_delete<drake::systems::DependencyTracker>::operator()(drake::systems::DependencyTracker*) const [clone .isra.472]
000000000007a8d0 l     F .text	00000000000000ad              void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .isra.490]
000000000007a8d0 l     F .text	00000000000000ad              void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.482]
000000000007a980 l     F .text	000000000000003b              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.486]
000000000007aa40 l     F .text	0000000000000029              std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, false> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, false>*) [clone .isra.770]
000000000007abc0 l     F .text	000000000000002c              void fmt::internal::ThousandsSep::operator()<char>(char*&) [clone .part.793]
000000000007ad90 l     F .text	0000000000000043              std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, drake::systems::controllers::StateFeedbackControllerInterface<double>*>, false> > >::_M_allocate_buckets(unsigned long) [clone .isra.1104]
000000000007ad90 l     F .text	0000000000000043              std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<drake::systems::System<double> const*, false> > >::_M_allocate_buckets(unsigned long) [clone .isra.1006]
000000000007ad90 l     F .text	0000000000000043              std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, false> > >::_M_allocate_buckets(unsigned long) [clone .isra.1078]
000000000007aea0 l     F .text	0000000000000048              std::_Hashtable<int, std::pair<int const, drake::systems::controllers::StateFeedbackControllerInterface<double>*>, std::allocator<std::pair<int const, drake::systems::controllers::StateFeedbackControllerInterface<double>*> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const [clone .isra.1273]
000000000007aef0 l     F .text	0000000000000048              std::_Hashtable<drake::systems::System<double> const*, drake::systems::System<double> const*, std::allocator<drake::systems::System<double> const*>, std::__detail::_Identity, std::equal_to<drake::systems::System<double> const*>, std::hash<drake::systems::System<double> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_find_before_node(unsigned long, drake::systems::System<double> const* const&, unsigned long) const [clone .isra.1277]
000000000007b160 l     F .text	000000000000002c              std::_Vector_base<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::_M_allocate(unsigned long) [clone .isra.1777]
000000000007b160 l     F .text	000000000000002c              std::_Vector_base<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::_M_allocate(unsigned long) [clone .isra.1024]
000000000007b160 l     F .text	000000000000002c              std::_Vector_base<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::_M_allocate(unsigned long) [clone .isra.1030]
000000000007b160 l     F .text	000000000000002c              std::_Vector_base<std::pair<drake::systems::System<double> const*, int>, std::allocator<std::pair<drake::systems::System<double> const*, int> > >::_M_allocate(unsigned long) [clone .isra.1211]
000000000007b160 l     F .text	000000000000002c              std::_Vector_base<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::_M_allocate(unsigned long) [clone .isra.1724]
000000000007b160 l     F .text	000000000000002c              std::_Vector_base<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::_M_allocate(unsigned long) [clone .isra.1731]
000000000007b160 l     F .text	000000000000002c              std::_Vector_base<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::_M_allocate(unsigned long) [clone .isra.1770]
00000000000ebc70 l     O .rodata	0000000000000019              drake::systems::Diagram<drake::symbolic::Expression>::DoCalcNextUpdateTimeImpl<drake::symbolic::Expression>(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*, drake::symbolic::Expression*) const::__func__
000000000006f98e l     F .text	0000000000000098              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > drake::NiceTypeName::Get<drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&) [clone .isra.2358]
000000000006f98e l     F .text	0000000000000098              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > drake::NiceTypeName::Get<drake::systems::System<double> >(drake::systems::System<double> const&) [clone .isra.470]
000000000006f98e l     F .text	0000000000000098              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > drake::NiceTypeName::Get<drake::systems::ContextBase>(drake::systems::ContextBase const&) [clone .isra.474]
000000000006f98e l     F .text	0000000000000098              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > drake::NiceTypeName::Get<drake::systems::SystemBase>(drake::systems::SystemBase const&) [clone .isra.475]
000000000006f98e l     F .text	0000000000000098              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > drake::NiceTypeName::Get<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) [clone .isra.901]
000000000006f98e l     F .text	0000000000000098              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > drake::NiceTypeName::Get<drake::systems::System<drake::symbolic::Expression> >(drake::systems::System<drake::symbolic::Expression> const&) [clone .isra.904]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::BasicVector<drake::symbolic::Expression>, std::default_delete<drake::systems::BasicVector<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<drake::symbolic::Expression>, std::default_delete<drake::systems::BasicVector<drake::symbolic::Expression> > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.3723]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::DependencyTracker, std::default_delete<drake::systems::DependencyTracker> >, std::allocator<std::unique_ptr<drake::systems::DependencyTracker, std::default_delete<drake::systems::DependencyTracker> > > >::_M_check_len(unsigned long, char const*) const [clone .isra.248]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >, std::allocator<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > > >::_M_check_len(unsigned long, char const*) const [clone .isra.647]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> >, std::allocator<std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> > > >::_M_check_len(unsigned long, char const*) const [clone .isra.672]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > >, std::allocator<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.870]
000000000007c140 l     F .text	000000000000004b              std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >::_M_check_len(unsigned long, char const*) const [clone .isra.945]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > >, std::allocator<std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.1315]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > >, std::allocator<std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.1450]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.1840]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.1864]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::SystemConstraint<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::SystemConstraint<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::SystemConstraint<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::SystemConstraint<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.1948]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::SystemConstraint<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemConstraint<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::SystemConstraint<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemConstraint<drake::symbolic::Expression> > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.1983]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.2020]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::OutputPort<drake::symbolic::Expression>, std::default_delete<drake::systems::OutputPort<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::OutputPort<drake::symbolic::Expression>, std::default_delete<drake::systems::OutputPort<drake::symbolic::Expression> > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.2035]
000000000007c140 l     F .text	000000000000004b              std::vector<drake::systems::VectorBase<double>*, std::allocator<drake::systems::VectorBase<double>*> >::_M_check_len(unsigned long, char const*) const [clone .isra.3536]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.2572]
000000000007c140 l     F .text	000000000000004b              std::vector<drake::systems::ContinuousState<drake::symbolic::Expression>*, std::allocator<drake::systems::ContinuousState<drake::symbolic::Expression>*> >::_M_check_len(unsigned long, char const*) const [clone .isra.2846]
000000000007c140 l     F .text	000000000000004b              std::vector<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> >::_M_check_len(unsigned long, char const*) const [clone .isra.2896]
000000000007c140 l     F .text	000000000000004b              std::vector<drake::systems::ContinuousState<double>*, std::allocator<drake::systems::ContinuousState<double>*> >::_M_check_len(unsigned long, char const*) const [clone .isra.2937]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.3002]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.3011]
000000000007c140 l     F .text	000000000000004b              std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> >::_M_check_len(unsigned long, char const*) const [clone .isra.3018]
000000000007c140 l     F .text	000000000000004b              std::vector<drake::systems::AbstractValue*, std::allocator<drake::systems::AbstractValue*> >::_M_check_len(unsigned long, char const*) const [clone .isra.3025]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.3085]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.3094]
000000000007c140 l     F .text	000000000000004b              std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> >::_M_check_len(unsigned long, char const*) const [clone .isra.3101]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.3161]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.3170]
000000000007c140 l     F .text	000000000000004b              std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> >::_M_check_len(unsigned long, char const*) const [clone .isra.3177]
000000000007c140 l     F .text	000000000000004b              std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> >::_M_check_len(unsigned long, char const*) const [clone .isra.3193]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.3716]
000000000007c140 l     F .text	000000000000004b              std::vector<std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > >, std::allocator<std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > > > >::_M_check_len(unsigned long, char const*) const [clone .isra.3376]
000000000007c140 l     F .text	000000000000004b              std::vector<drake::systems::PublishEvent<double> const*, std::allocator<drake::systems::PublishEvent<double> const*> >::_M_check_len(unsigned long, char const*) const [clone .isra.3383]
000000000007c140 l     F .text	000000000000004b              std::vector<drake::systems::VectorBase<drake::symbolic::Expression>*, std::allocator<drake::systems::VectorBase<drake::symbolic::Expression>*> >::_M_check_len(unsigned long, char const*) const [clone .isra.3463]
000000000007c140 l     F .text	000000000000004b              std::vector<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> >::_M_check_len(unsigned long, char const*) const [clone .isra.3500]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::copyable_unique_ptr<drake::systems::CacheEntryValue>, std::allocator<drake::copyable_unique_ptr<drake::systems::CacheEntryValue> > >::_M_allocate(unsigned long) [clone .isra.3781]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::DependencyTracker, std::default_delete<drake::systems::DependencyTracker> >, std::allocator<std::unique_ptr<drake::systems::DependencyTracker, std::default_delete<drake::systems::DependencyTracker> > > >::_M_allocate(unsigned long) [clone .isra.389]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<double, std::allocator<double> >::_M_allocate(unsigned long) [clone .isra.502]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >, std::allocator<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > > >::_M_allocate(unsigned long) [clone .isra.650]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::DependencyTracker const*, std::allocator<drake::systems::DependencyTracker const*> >::_M_allocate(unsigned long) [clone .isra.662]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::BasicVector<drake::symbolic::Expression>, std::default_delete<drake::systems::BasicVector<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<drake::symbolic::Expression>, std::default_delete<drake::systems::BasicVector<drake::symbolic::Expression> > > > >::_M_allocate(unsigned long) [clone .isra.3744]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> >, std::allocator<std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> > > >::_M_allocate(unsigned long) [clone .isra.675]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > >, std::allocator<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > > >::_M_allocate(unsigned long) [clone .isra.873]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >::_M_allocate(unsigned long) [clone .isra.948]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > >, std::allocator<std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > > > >::_M_allocate(unsigned long) [clone .isra.1318]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > >, std::allocator<std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > > > >::_M_allocate(unsigned long) [clone .isra.1453]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::EventCollection<drake::systems::PublishEvent<double> >*, std::allocator<drake::systems::EventCollection<drake::systems::PublishEvent<double> >*> >::_M_allocate(unsigned long) [clone .isra.1576]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > >, std::allocator<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > > >::_M_allocate(unsigned long) [clone .isra.1581]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >*, std::allocator<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >*> >::_M_allocate(unsigned long) [clone .isra.1585]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > >, std::allocator<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > > >::_M_allocate(unsigned long) [clone .isra.1590]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >*, std::allocator<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >*> >::_M_allocate(unsigned long) [clone .isra.1594]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > >, std::allocator<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > > >::_M_allocate(unsigned long) [clone .isra.1599]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::_M_allocate(unsigned long) [clone .isra.1843]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > > >::_M_allocate(unsigned long) [clone .isra.1867]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::SystemConstraint<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::SystemConstraint<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::SystemConstraint<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::SystemConstraint<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::_M_allocate(unsigned long) [clone .isra.1951]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::SystemConstraint<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemConstraint<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::SystemConstraint<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemConstraint<drake::symbolic::Expression> > > > >::_M_allocate(unsigned long) [clone .isra.1986]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::_M_allocate(unsigned long) [clone .isra.2023]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::OutputPort<drake::symbolic::Expression>, std::default_delete<drake::systems::OutputPort<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::OutputPort<drake::symbolic::Expression>, std::default_delete<drake::systems::OutputPort<drake::symbolic::Expression> > > > >::_M_allocate(unsigned long) [clone .isra.2038]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >*, std::allocator<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >*> >::_M_allocate(unsigned long) [clone .isra.2048]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > >, std::allocator<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > > >::_M_allocate(unsigned long) [clone .isra.2053]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >*, std::allocator<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >*> >::_M_allocate(unsigned long) [clone .isra.2057]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > >, std::allocator<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > > >::_M_allocate(unsigned long) [clone .isra.2062]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >*, std::allocator<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >*> >::_M_allocate(unsigned long) [clone .isra.2066]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > >, std::allocator<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > > >::_M_allocate(unsigned long) [clone .isra.2071]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >*, std::allocator<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >*> >::_M_allocate(unsigned long) [clone .isra.2075]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > >, std::allocator<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > > >::_M_allocate(unsigned long) [clone .isra.2080]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >*, std::allocator<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >*> >::_M_allocate(unsigned long) [clone .isra.2084]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > >, std::allocator<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > > >::_M_allocate(unsigned long) [clone .isra.2089]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >*, std::allocator<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >*> >::_M_allocate(unsigned long) [clone .isra.2093]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > >, std::allocator<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > > >::_M_allocate(unsigned long) [clone .isra.2098]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > > >::_M_allocate(unsigned long) [clone .isra.2764]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::OutputPortValue*, std::allocator<drake::systems::OutputPortValue*> >::_M_allocate(unsigned long) [clone .isra.2854]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::ContinuousState<drake::symbolic::Expression>*, std::allocator<drake::systems::ContinuousState<drake::symbolic::Expression>*> >::_M_allocate(unsigned long) [clone .isra.2990]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, std::default_delete<drake::systems::CompositeEventCollection<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, std::default_delete<drake::systems::CompositeEventCollection<drake::symbolic::Expression> > > > >::_M_allocate(unsigned long) [clone .isra.2997]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > > > >::_M_allocate(unsigned long) [clone .isra.3005]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > > > >::_M_allocate(unsigned long) [clone .isra.3014]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> >::_M_allocate(unsigned long) [clone .isra.3021]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::AbstractValue*, std::allocator<drake::systems::AbstractValue*> >::_M_allocate(unsigned long) [clone .isra.3028]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::WitnessFunction<drake::symbolic::Expression> const*, std::allocator<drake::systems::WitnessFunction<drake::symbolic::Expression> const*> >::_M_allocate(unsigned long) [clone .isra.3044]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> >::_M_allocate(unsigned long) [clone .isra.3058]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> >::_M_allocate(unsigned long) [clone .isra.3074]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::_M_allocate(unsigned long) [clone .isra.3081]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::_M_allocate(unsigned long) [clone .isra.3088]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::_M_allocate(unsigned long) [clone .isra.3097]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> >::_M_allocate(unsigned long) [clone .isra.3104]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >::_M_allocate(unsigned long) [clone .isra.3114]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >::_M_allocate(unsigned long) [clone .isra.3132]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::ContinuousState<double>*, std::allocator<drake::systems::ContinuousState<double>*> >::_M_allocate(unsigned long) [clone .isra.3150]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::CompositeEventCollection<double>, std::default_delete<drake::systems::CompositeEventCollection<double> > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<double>, std::default_delete<drake::systems::CompositeEventCollection<double> > > > >::_M_allocate(unsigned long) [clone .isra.3157]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > > > >::_M_allocate(unsigned long) [clone .isra.3164]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > > > >::_M_allocate(unsigned long) [clone .isra.3173]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> >::_M_allocate(unsigned long) [clone .isra.3180]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> >::_M_allocate(unsigned long) [clone .isra.3196]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::copyable_unique_ptr<drake::systems::FixedInputPortValue>, std::allocator<drake::copyable_unique_ptr<drake::systems::FixedInputPortValue> > >::_M_allocate(unsigned long) [clone .isra.3777]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::SystemOutput<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemOutput<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::SystemOutput<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemOutput<drake::symbolic::Expression> > > > >::_M_allocate(unsigned long) [clone .isra.3334]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::Context<drake::symbolic::Expression>, std::default_delete<drake::systems::Context<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::Context<drake::symbolic::Expression>, std::default_delete<drake::systems::Context<drake::symbolic::Expression> > > > >::_M_allocate(unsigned long) [clone .isra.3338]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::DiscreteValues<drake::symbolic::Expression>*, std::allocator<drake::systems::DiscreteValues<drake::symbolic::Expression>*> >::_M_allocate(unsigned long) [clone .isra.3349]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::_M_allocate(unsigned long) [clone .isra.3354]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::_M_allocate(unsigned long) [clone .isra.3358]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> >::_M_allocate(unsigned long) [clone .isra.3369]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > >, std::allocator<std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > > > >::_M_allocate(unsigned long) [clone .isra.3379]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::PublishEvent<double> const*, std::allocator<drake::systems::PublishEvent<double> const*> >::_M_allocate(unsigned long) [clone .isra.3386]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::SystemOutput<double>, std::default_delete<drake::systems::SystemOutput<double> > >, std::allocator<std::unique_ptr<drake::systems::SystemOutput<double>, std::default_delete<drake::systems::SystemOutput<double> > > > >::_M_allocate(unsigned long) [clone .isra.3390]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::Context<double>, std::default_delete<drake::systems::Context<double> > >, std::allocator<std::unique_ptr<drake::systems::Context<double>, std::default_delete<drake::systems::Context<double> > > > >::_M_allocate(unsigned long) [clone .isra.3394]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::DiscreteValues<double>*, std::allocator<drake::systems::DiscreteValues<double>*> >::_M_allocate(unsigned long) [clone .isra.3404]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::State<double>*, std::allocator<drake::systems::State<double>*> >::_M_allocate(unsigned long) [clone .isra.3522]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::State<double>, std::default_delete<drake::systems::State<double> > >, std::allocator<std::unique_ptr<drake::systems::State<double>, std::default_delete<drake::systems::State<double> > > > >::_M_allocate(unsigned long) [clone .isra.3527]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::VectorBase<double>*, std::allocator<drake::systems::VectorBase<double>*> >::_M_allocate(unsigned long) [clone .isra.3539]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::_M_allocate(unsigned long) [clone .isra.3739]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::State<drake::symbolic::Expression>*, std::allocator<drake::systems::State<drake::symbolic::Expression>*> >::_M_allocate(unsigned long) [clone .isra.3444]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::State<drake::symbolic::Expression>, std::default_delete<drake::systems::State<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::State<drake::symbolic::Expression>, std::default_delete<drake::systems::State<drake::symbolic::Expression> > > > >::_M_allocate(unsigned long) [clone .isra.3449]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::VectorBase<drake::symbolic::Expression>*, std::allocator<drake::systems::VectorBase<drake::symbolic::Expression>*> >::_M_allocate(unsigned long) [clone .isra.3466]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> >::_M_allocate(unsigned long) [clone .isra.3484]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::_M_allocate(unsigned long) [clone .isra.3489]
000000000007c190 l     F .text	000000000000002c              std::_Vector_base<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> >::_M_allocate(unsigned long) [clone .isra.3503]
000000000007c1c0 l     F .text	000000000000003d              std::vector<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::_M_check_len(unsigned long, char const*) const [clone .isra.1774] [clone .constprop.3867]
00000000000ebe10 l     O .rodata	000000000000001a              drake::systems::System<drake::symbolic::Expression>::DoEvalConstraintEquations(drake::systems::Context<drake::symbolic::Expression> const&) const::__func__
00000000000ebe30 l     O .rodata	000000000000001d              drake::systems::System<drake::symbolic::Expression>::DoEvalConstraintEquationsDot(drake::systems::Context<drake::symbolic::Expression> const&) const::__func__
00000000000eb080 l     O .rodata	000000000000001a              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoEvalConstraintEquations(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const::__func__
00000000000eb0a0 l     O .rodata	000000000000001d              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoEvalConstraintEquationsDot(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const::__func__
00000000000ec5d0 l     O .rodata	000000000000001a              drake::systems::System<double>::DoEvalConstraintEquations(drake::systems::Context<double> const&) const::__func__
00000000000ec5f0 l     O .rodata	000000000000001d              drake::systems::System<double>::DoEvalConstraintEquationsDot(drake::systems::Context<double> const&) const::__func__
00000000000ec5a0 l     O .rodata	000000000000000b              drake::systems::BasicVector<double>::GetAtIndex(int) const::__func__
00000000000ec590 l     O .rodata	000000000000000b              drake::systems::BasicVector<double>::GetAtIndex(int)::__func__
00000000000ec558 l     O .rodata	000000000000000b              drake::systems::Subvector<double>::GetAtIndex(int) const::__func__
00000000000ec568 l     O .rodata	000000000000000b              drake::systems::Subvector<double>::GetAtIndex(int)::__func__
00000000000eb568 l     O .rodata	000000000000000b              drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetAtIndex(int) const::__func__
00000000000eb578 l     O .rodata	000000000000000b              drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetAtIndex(int)::__func__
00000000000eb540 l     O .rodata	000000000000000b              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetAtIndex(int) const::__func__
00000000000eb550 l     O .rodata	000000000000000b              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetAtIndex(int)::__func__
00000000000ebd98 l     O .rodata	000000000000000b              drake::systems::Subvector<drake::symbolic::Expression>::GetAtIndex(int) const::__func__
00000000000ebda8 l     O .rodata	000000000000000b              drake::systems::Subvector<drake::symbolic::Expression>::GetAtIndex(int)::__func__
00000000000ebde0 l     O .rodata	000000000000000b              drake::systems::BasicVector<drake::symbolic::Expression>::GetAtIndex(int) const::__func__
00000000000ebdd0 l     O .rodata	000000000000000b              drake::systems::BasicVector<drake::symbolic::Expression>::GetAtIndex(int)::__func__
00000000000ebeb0 l     O .rodata	0000000000000017              drake::systems::internal::DiagramOutput<drake::symbolic::Expression>::get_mutable_port_value(int)::__func__
00000000000eb728 l     O .rodata	000000000000000f              drake::systems::internal::DiagramOutput<drake::symbolic::Expression>::get_port_value(int) const::__func__
00000000000ec670 l     O .rodata	0000000000000017              drake::systems::internal::DiagramOutput<double>::get_mutable_port_value(int)::__func__
00000000000eb400 l     O .rodata	000000000000000f              drake::systems::internal::DiagramOutput<double>::get_port_value(int) const::__func__
00000000000eb4d0 l     O .rodata	0000000000000017              drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_mutable_port_value(int)::__func__
00000000000eb4e8 l     O .rodata	000000000000000f              drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_port_value(int) const::__func__
00000000000ec420 l     O .rodata	0000000000000018              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::get_subevent_collection(int) const::__func__
00000000000ec438 l     O .rodata	0000000000000008              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::DoMerge(drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > const&)::__func__
00000000000ead80 l     O .rodata	0000000000000018              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::get_subevent_collection(int) const::__func__
00000000000eabf0 l     O .rodata	0000000000000008              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::DoMerge(drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > const&)::__func__
00000000000ebbc0 l     O .rodata	0000000000000018              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::get_subevent_collection(int) const::__func__
00000000000eb9d0 l     O .rodata	0000000000000008              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::DoMerge(drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > const&)::__func__
00000000000ebb30 l     O .rodata	0000000000000018              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::get_subevent_collection(int) const::__func__
00000000000eb990 l     O .rodata	0000000000000008              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::DoMerge(drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > const&)::__func__
00000000000ebae0 l     O .rodata	0000000000000018              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::get_subevent_collection(int) const::__func__
00000000000eb950 l     O .rodata	0000000000000008              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::DoMerge(drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > const&)::__func__
00000000000eae60 l     O .rodata	0000000000000018              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::get_subevent_collection(int) const::__func__
00000000000eac70 l     O .rodata	0000000000000008              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::DoMerge(drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > const&)::__func__
00000000000eadd0 l     O .rodata	0000000000000018              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::get_subevent_collection(int) const::__func__
00000000000eac30 l     O .rodata	0000000000000008              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::DoMerge(drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > const&)::__func__
00000000000ec440 l     O .rodata	0000000000000018              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::get_subevent_collection(int) const::__func__
00000000000ec458 l     O .rodata	0000000000000008              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::DoMerge(drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > const&)::__func__
00000000000ec478 l     O .rodata	0000000000000008              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::DoMerge(drake::systems::EventCollection<drake::systems::PublishEvent<double> > const&)::__func__
00000000000ebb00 l     O .rodata	0000000000000017              drake::systems::Diagram<drake::symbolic::Expression>::DispatchPublishHandler(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > const&) const::__func__
00000000000eada0 l     O .rodata	0000000000000017              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DispatchPublishHandler(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > const&) const::__func__
00000000000ebc50 l     O .rodata	0000000000000016              drake::systems::Diagram<drake::symbolic::Expression>::DoCalcTimeDerivatives(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression>*) const::__func__
00000000000eaef0 l     O .rodata	0000000000000016              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcTimeDerivatives(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const::__func__
00000000000ec380 l     O .rodata	0000000000000016              drake::systems::Diagram<double>::DoCalcTimeDerivatives(drake::systems::Context<double> const&, drake::systems::ContinuousState<double>*) const::__func__
00000000000ebcb0 l     O .rodata	0000000000000013              drake::systems::Diagram<drake::symbolic::Expression>::DoGetPerStepEvents(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const::__func__
00000000000ebc90 l     O .rodata	0000000000000011              drake::systems::System<drake::symbolic::Expression>::GetPerStepEvents(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const::__func__
00000000000ebd20 l     O .rodata	000000000000001a              drake::systems::Diagram<drake::symbolic::Expression>::DoGetInitializationEvents(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const::__func__
00000000000ebcd0 l     O .rodata	0000000000000018              drake::systems::System<drake::symbolic::Expression>::GetInitializationEvents(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const::__func__
00000000000ebe90 l     O .rodata	000000000000000f              drake::systems::DiagramOutputPort<drake::symbolic::Expression>::get_subcontext(drake::systems::Context<drake::symbolic::Expression> const&) const::__func__
00000000000ec650 l     O .rodata	000000000000000f              drake::systems::DiagramOutputPort<double>::get_subcontext(drake::systems::Context<double> const&) const::__func__
00000000000eb0f0 l     O .rodata	000000000000000f              drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_subcontext(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const::__func__
000000000006fa26 l     F .text	0000000000000073              std::default_delete<drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> > >::operator()(drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >*) const [clone .isra.1337] [clone .constprop.3870]
000000000006fa9a l     F .text	0000000000000073              std::default_delete<drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >::operator()(drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >*) const [clone .isra.1959] [clone .constprop.3861]
000000000006fb0e l     F .text	0000000000000073              std::default_delete<drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > >::operator()(drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >*) const [clone .isra.2010] [clone .constprop.3858]
000000000006fb82 l     F .text	0000000000000073              std::default_delete<drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > >::operator()(drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >*) const [clone .isra.2002] [clone .constprop.3857]
000000000006fbf6 l     F .text	0000000000000073              std::default_delete<drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >::operator()(drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >*) const [clone .isra.1967] [clone .constprop.3862]
000000000006fc6a l     F .text	0000000000000073              std::default_delete<drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > >::operator()(drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >*) const [clone .isra.1994] [clone .constprop.3856]
000000000006fcde l     F .text	0000000000000073              std::default_delete<drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> > >::operator()(drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >*) const [clone .isra.1345] [clone .constprop.3871]
000000000006fd52 l     F .text	0000000000000073              std::default_delete<drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> > >::operator()(drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >*) const [clone .isra.1329] [clone .constprop.3869]
000000000006fdc6 l     F .text	0000000000000073              std::default_delete<drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >::operator()(drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >*) const [clone .isra.1975] [clone .constprop.3863]
00000000000eb370 l     O .rodata	0000000000000010              drake::systems::Diagram<double>::SetDefaultState(drake::systems::Context<double> const&, drake::systems::State<double>*) const::__func__
00000000000eaa30 l     O .rodata	0000000000000010              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetDefaultState(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const::__func__
00000000000eb760 l     O .rodata	0000000000000010              drake::systems::Diagram<drake::symbolic::Expression>::SetDefaultState(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const::__func__
00000000000eaa58 l     O .rodata	000000000000000f              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetRandomState(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const::__func__
00000000000eb398 l     O .rodata	000000000000000f              drake::systems::Diagram<double>::SetRandomState(drake::systems::Context<double> const&, drake::systems::State<double>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const::__func__
00000000000eb788 l     O .rodata	000000000000000f              drake::systems::Diagram<drake::symbolic::Expression>::SetRandomState(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const::__func__
00000000000eaf70 l     O .rodata	0000000000000013              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetPerStepEvents(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const::__func__
00000000000eaf50 l     O .rodata	0000000000000011              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetPerStepEvents(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const::__func__
00000000000ec3c0 l     O .rodata	0000000000000019              drake::systems::Diagram<double>::DoCalcNextUpdateTimeImpl<double>(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*, double*) const::__func__
00000000000ec3a0 l     O .rodata	0000000000000013              drake::systems::System<double>::CalcNextUpdateTime(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*) const::__func__
00000000000ec4e0 l     O .rodata	000000000000001a              drake::systems::Diagram<double>::DoGetInitializationEvents(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*) const::__func__
00000000000ec4a0 l     O .rodata	0000000000000018              drake::systems::System<double>::GetInitializationEvents(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*) const::__func__
00000000000ec400 l     O .rodata	0000000000000013              drake::systems::Diagram<double>::DoGetPerStepEvents(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*) const::__func__
00000000000ec3e0 l     O .rodata	0000000000000011              drake::systems::System<double>::GetPerStepEvents(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*) const::__func__
00000000000eaea8 l     O .rodata	000000000000000f              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_input_port(int) const::__func__
00000000000ebc08 l     O .rodata	000000000000000f              drake::systems::System<drake::symbolic::Expression>::get_input_port(int) const::__func__
00000000000eafe0 l     O .rodata	000000000000001a              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetInitializationEvents(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const::__func__
00000000000eaf90 l     O .rodata	0000000000000018              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetInitializationEvents(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const::__func__
0000000000084130 l     F .text	0000000000000078              Eigen::DenseStorage<double, -1, -1, 1, 0>::resize(long, long, long) [clone .isra.258]
00000000000ea781 l     O .rodata	0000000000000005              drake::systems::SystemConstraint<double>::Calc(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*) const::__func__
00000000000eb1c8 l     O .rodata	000000000000000f              drake::systems::System<double>::get_input_port(int) const::__func__
00000000003108a0 l     O .data.rel.ro	0000000000000038              spdlog::level::short_level_names
00000000003108e0 l     O .data.rel.ro	0000000000000038              spdlog::level::level_names
0000000000086980 l     F .text	0000000000000024              spdlog::details::(anonymous namespace)::name_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000ebdc0 l     O .rodata	000000000000000e              drake::systems::VectorBase<drake::symbolic::Expression>::SetFromVector(Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)::__func__
00000000000ebdb8 l     O .rodata	0000000000000008              drake::systems::VectorBase<drake::symbolic::Expression>::SetFrom(drake::systems::VectorBase<drake::symbolic::Expression> const&)::__func__
0000000000310860 l     O .data.rel.ro	0000000000000028              vtable for spdlog::details::(anonymous namespace)::name_formatter
00000000000ea931 l     O .rodata	0000000000000005              drake::systems::SystemConstraint<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Calc(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>*) const::__func__
000000000008ab30 l     F .text	000000000000005a              std::default_delete<drake::systems::Diagram<double>::Blueprint>::operator()(drake::systems::Diagram<double>::Blueprint*) const [clone .isra.701]
00000000000ea700 l     O .rodata	0000000000000012              drake::systems::System<double>::SetDefaultContext(drake::systems::Context<double>*) const::__func__
000000000008c1c0 l     F .text	00000000000000c6              spdlog::details::pad_n_join(fmt::BasicMemoryWriter<char, std::allocator<char> >&, int, int, int, char) [clone .constprop.3880]
000000000008c5d0 l     F .text	000000000000007b              spdlog::details::pad_n_join(fmt::BasicMemoryWriter<char, std::allocator<char> >&, int, int, char) [clone .constprop.3881]
00000000000ea658 l     O .rodata	000000000000000f              drake::systems::WitnessFunction<double>::should_trigger(double const&, double const&) const::__func__
00000000000ea640 l     O .rodata	0000000000000017              drake::systems::Simulator<double>::IsolateWitnessTriggers(std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*)::__func__
00000000000ea881 l     O .rodata	0000000000000005              drake::systems::SystemConstraint<drake::symbolic::Expression>::Calc(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>*) const::__func__
00000000000f4f3d l     O .rodata	0000000000000001              std::piecewise_construct
00000000000eb1a0 l     O .rodata	000000000000001b              drake::systems::DiagramBuilder<double>::ThrowIfSystemNotRegistered(drake::systems::System<double> const*) const::__func__
00000000000eb1c0 l     O .rodata	0000000000000008              drake::systems::DiagramBuilder<double>::Connect(drake::systems::OutputPort<double> const&, drake::systems::InputPortDescriptor<double> const&)::__func__
00000000000ec0a0 l     O .rodata	0000000000000020              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::set_and_own_subevent_collection(int, std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > >)::__func__
00000000000ec0e0 l     O .rodata	0000000000000020              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::set_and_own_subevent_collection(int, std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > >)::__func__
00000000000ec120 l     O .rodata	0000000000000020              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::set_and_own_subevent_collection(int, std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > >)::__func__
00000000000ec2e8 l     O .rodata	000000000000000f              drake::systems::ContinuousState<double>::SetFromGeneric<double>(drake::systems::ContinuousState<double> const&)::__func__
00000000000ec320 l     O .rodata	0000000000000022              drake::systems::Diagram<double>::DispatchUnrestrictedUpdateHandler(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > const&, drake::systems::State<double>*) const::__func__
00000000000ec2a0 l     O .rodata	0000000000000010              drake::systems::DiagramDiscreteValues<double>::get_subdiscrete(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const::__func__
00000000000ec2c0 l     O .rodata	0000000000000026              drake::systems::Diagram<double>::DispatchDiscreteVariableUpdateHandler(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > const&, drake::systems::DiscreteValues<double>*) const::__func__
00000000000ebe60 l     O .rodata	000000000000002b              drake::systems::System<drake::symbolic::Expression>::DoCalcVelocityChangeFromConstraintImpulses(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<double, -1, -1, 0, -1, -1> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&) const::__func__
00000000000eaf30 l     O .rodata	0000000000000019              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcNextUpdateTimeImpl<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >*) const::__func__
00000000000eaf10 l     O .rodata	0000000000000013              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::CalcNextUpdateTime(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const::__func__
00000000000ea6f0 l     O .rodata	000000000000000b              drake::systems::Simulator<double>::Initialize()::__func__
00000000000eb0c0 l     O .rodata	000000000000002b              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcVelocityChangeFromConstraintImpulses(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<double, -1, -1, 0, -1, -1> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&) const::__func__
00000000000ec620 l     O .rodata	000000000000002b              drake::systems::System<double>::DoCalcVelocityChangeFromConstraintImpulses(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, -1, 0, -1, -1> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&) const::__func__
00000000000eb650 l     O .rodata	000000000000001c              drake::systems::ContextBase::MaybeGetFixedInputPortValue(int) const::__func__
00000000000eb630 l     O .rodata	0000000000000014              drake::systems::SystemBase::get_input_port_base(drake::TypeSafeIndex<drake::systems::InputPortTag>) const::__func__
00000000000eb670 l     O .rodata	0000000000000013              drake::systems::System<drake::symbolic::Expression>::CheckValidContextT<drake::symbolic::Expression>(drake::systems::Context<drake::symbolic::Expression> const&) const::__func__
00000000000eb618 l     O .rodata	000000000000000a              drake::systems::FixedInputPortValue::get_value() const::__func__
00000000000eb690 l     O .rodata	0000000000000014              drake::systems::System<drake::symbolic::Expression>::DoCheckValidContext(drake::systems::ContextBase const&) const::__func__
00000000000eb560 l     O .rodata	0000000000000008              drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetFrom(drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)::__func__
00000000000eb530 l     O .rodata	000000000000000e              drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetFromVector(Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)::__func__
00000000000ec6d0 l     O .rodata	0000000000000016              drake::systems::Diagram<double>::GetSystemIndexOrAbort(drake::systems::System<double> const*) const::__func__
00000000000eb240 l     O .rodata	000000000000000e              drake::manipulation::util::SimDiagramBuilder<double>::AddController<drake::systems::controllers::InverseDynamicsController<double> >(int, std::unique_ptr<drake::systems::controllers::InverseDynamicsController<double>, std::default_delete<drake::systems::controllers::InverseDynamicsController<double> > >)::__func__
00000000000ea940 l     O .rodata	0000000000000013              drake::systems::SystemBase::set_parent_service(drake::systems::internal::SystemParentServiceInterface const*)::__func__
00000000000ea750 l     O .rodata	0000000000000012              drake::systems::DiagramOutputPort<double>::DiagramOutputPort(drake::systems::System<double> const&, drake::systems::internal::SystemMessageInterface const&, drake::TypeSafeIndex<drake::systems::OutputPortTag>, drake::systems::OutputPort<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)::__func__
00000000000ea770 l     O .rodata	0000000000000011              drake::systems::SystemConstraint<double>::SystemConstraint(std::function<void (drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)>, int, drake::systems::SystemConstraintType, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::__func__
00000000000ea788 l     O .rodata	000000000000000b              drake::systems::Diagram<double>::Initialize(std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> >)::__func__
00000000000ea960 l     O .rodata	0000000000000013              drake::systems::SystemBase::set_parent_service(drake::systems::SystemBase*, drake::systems::internal::SystemParentServiceInterface const*)::__func__
00000000000ea720 l     O .rodata	0000000000000011              drake::systems::System<double>::CreateOutputPort(std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > >)::__func__
00000000000ea910 l     O .rodata	0000000000000010              drake::systems::SystemBase::CreateInputPort(std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> >)::__func__
00000000000ea738 l     O .rodata	000000000000000b              drake::systems::OutputPort<double>::OutputPort(drake::systems::System<double> const&, drake::systems::internal::SystemMessageInterface const&, drake::TypeSafeIndex<drake::systems::OutputPortTag>, drake::systems::PortDataType, int)::__func__
00000000000ea670 l     O .rodata	0000000000000014              drake::systems::IntegratorBase<double>::CalcStateChangeNorm(drake::systems::ContinuousState<double> const&) const::__func__
00000000000ea690 l     O .rodata	000000000000001e              drake::systems::IntegratorBase<double>::StepOnceErrorControlledAtMost(double const&)::__func__
00000000000ea6b0 l     O .rodata	0000000000000019              drake::systems::Simulator<double>::IntegrateContinuousState(double const&, double const&, double const&, double const&, drake::systems::CompositeEventCollection<double>*)::__func__
00000000000ec240 l     O .rodata	0000000000000014              drake::systems::System<double>::GetWitnessFunctions(drake::systems::Context<double> const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*) const::__func__
00000000000ea6c9 l     O .rodata	0000000000000007              drake::systems::Simulator<double>::StepTo(double const&)::__func__
00000000000eabc0 l     O .rodata	0000000000000020              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::set_and_own_subevent_collection(int, std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > >)::__func__
00000000000eac00 l     O .rodata	0000000000000020              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::set_and_own_subevent_collection(int, std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > >)::__func__
00000000000eac40 l     O .rodata	0000000000000020              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::set_and_own_subevent_collection(int, std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > >)::__func__
00000000000a28f0 l     F .text	000000000000005a              std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint>::operator()(drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint*) const [clone .isra.1737]
00000000000eb920 l     O .rodata	0000000000000020              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::set_and_own_subevent_collection(int, std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > >)::__func__
00000000000eb960 l     O .rodata	0000000000000020              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::set_and_own_subevent_collection(int, std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > >)::__func__
00000000000eb9a0 l     O .rodata	0000000000000020              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::set_and_own_subevent_collection(int, std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > >)::__func__
00000000000a3af0 l     F .text	000000000000005a              std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint>::operator()(drake::systems::Diagram<drake::symbolic::Expression>::Blueprint*) const [clone .isra.1783]
00000000000eb130 l     O .rodata	0000000000000016              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetSystemIndexOrAbort(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const::__func__
00000000000ebf10 l     O .rodata	0000000000000016              drake::systems::Diagram<drake::symbolic::Expression>::GetSystemIndexOrAbort(drake::systems::System<drake::symbolic::Expression> const*) const::__func__
00000000000eb180 l     O .rodata	0000000000000012              drake::systems::Diagram<double>::ConvertScalarType<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >() const::__func__
00000000000ea8a0 l     O .rodata	0000000000000012              drake::systems::Diagram<double>::ConvertScalarType<drake::symbolic::Expression>() const::__func__
00000000000ea800 l     O .rodata	0000000000000012              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ConvertScalarType<double>() const::__func__
00000000000a8540 l     F .text	00000000000002bd              std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > drake::systems::system_scalar_converter_detail::Make<drake::systems::Diagram, double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(bool, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, std::integral_constant<bool, true>) [clone .constprop.3853]
00000000000ea7e0 l     O .rodata	0000000000000012              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ConvertScalarType<drake::symbolic::Expression>() const::__func__
00000000000ea7c0 l     O .rodata	0000000000000012              drake::systems::Diagram<drake::symbolic::Expression>::ConvertScalarType<double>() const::__func__
00000000000a9b60 l     F .text	00000000000002bd              std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > drake::systems::system_scalar_converter_detail::Make<drake::systems::Diagram, double, drake::symbolic::Expression>(bool, drake::systems::System<drake::symbolic::Expression> const&, std::integral_constant<bool, true>) [clone .constprop.3851]
00000000000ea7a0 l     O .rodata	0000000000000012              drake::systems::Diagram<drake::symbolic::Expression>::ConvertScalarType<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >() const::__func__
00000000000ea8f0 l     O .rodata	0000000000000012              drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiagramOutputPort(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::internal::SystemMessageInterface const&, drake::TypeSafeIndex<drake::systems::OutputPortTag>, drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)::__func__
00000000000ea920 l     O .rodata	0000000000000011              drake::systems::SystemConstraint<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SystemConstraint(std::function<void (drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>*)>, int, drake::systems::SystemConstraintType, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::__func__
00000000000ea978 l     O .rodata	000000000000000b              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Initialize(std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> >)::__func__
00000000000ea8d8 l     O .rodata	000000000000000b              drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::OutputPort(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::internal::SystemMessageInterface const&, drake::TypeSafeIndex<drake::systems::OutputPortTag>, drake::systems::PortDataType, int)::__func__
00000000000ea8c0 l     O .rodata	0000000000000011              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::CreateOutputPort(std::unique_ptr<drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >)::__func__
00000000000ac2c0 l     F .text	00000000000002bd              std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > drake::systems::system_scalar_converter_detail::Make<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(bool, drake::systems::System<double> const&, std::integral_constant<bool, true>) [clone .constprop.3859]
00000000000ac5b0 l     F .text	00000000000002bd              std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > drake::systems::system_scalar_converter_detail::Make<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(bool, drake::systems::System<drake::symbolic::Expression> const&, std::integral_constant<bool, true>) [clone .constprop.3850]
00000000000ea850 l     O .rodata	0000000000000012              drake::systems::DiagramOutputPort<drake::symbolic::Expression>::DiagramOutputPort(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::internal::SystemMessageInterface const&, drake::TypeSafeIndex<drake::systems::OutputPortTag>, drake::systems::OutputPort<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)::__func__
00000000000ea870 l     O .rodata	0000000000000011              drake::systems::SystemConstraint<drake::symbolic::Expression>::SystemConstraint(std::function<void (drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>*)>, int, drake::systems::SystemConstraintType, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::__func__
00000000000ea888 l     O .rodata	000000000000000b              drake::systems::Diagram<drake::symbolic::Expression>::Initialize(std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> >)::__func__
00000000000ea838 l     O .rodata	000000000000000b              drake::systems::OutputPort<drake::symbolic::Expression>::OutputPort(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::internal::SystemMessageInterface const&, drake::TypeSafeIndex<drake::systems::OutputPortTag>, drake::systems::PortDataType, int)::__func__
00000000000ea820 l     O .rodata	0000000000000011              drake::systems::System<drake::symbolic::Expression>::CreateOutputPort(std::unique_ptr<drake::systems::OutputPort<drake::symbolic::Expression>, std::default_delete<drake::systems::OutputPort<drake::symbolic::Expression> > >)::__func__
00000000000ae200 l     F .text	00000000000002bd              std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > drake::systems::system_scalar_converter_detail::Make<drake::systems::Diagram, drake::symbolic::Expression, double>(bool, drake::systems::System<double> const&, std::integral_constant<bool, true>) [clone .constprop.3854]
00000000000ae4f0 l     F .text	00000000000002bd              std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > drake::systems::system_scalar_converter_detail::Make<drake::systems::Diagram, drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(bool, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, std::integral_constant<bool, true>) [clone .constprop.3852]
00000000000ebe9f l     O .rodata	0000000000000005              drake::systems::OutputPort<drake::symbolic::Expression>::Calc(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::AbstractValue*) const::__func__
00000000000eb0ff l     O .rodata	0000000000000005              drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Calc(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::AbstractValue*) const::__func__
00000000000ebdf0 l     O .rodata	0000000000000014              drake::systems::Diagram<drake::symbolic::Expression>::DoMapVelocityToQDot(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<drake::symbolic::Expression>*) const::__func__
00000000000ebd60 l     O .rodata	0000000000000014              drake::systems::Diagram<drake::symbolic::Expression>::DoMapQDotToVelocity(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<drake::symbolic::Expression>*) const::__func__
00000000000eb060 l     O .rodata	0000000000000014              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoMapVelocityToQDot(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const::__func__
00000000000eb020 l     O .rodata	0000000000000014              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoMapQDotToVelocity(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const::__func__
00000000000ec65f l     O .rodata	0000000000000005              drake::systems::OutputPort<double>::Calc(drake::systems::Context<double> const&, drake::systems::AbstractValue*) const::__func__
00000000000ec5b0 l     O .rodata	0000000000000014              drake::systems::Diagram<double>::DoMapVelocityToQDot(drake::systems::Context<double> const&, Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<double>*) const::__func__
00000000000ec520 l     O .rodata	0000000000000014              drake::systems::Diagram<double>::DoMapQDotToVelocity(drake::systems::Context<double> const&, Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<double>*) const::__func__
00000000000eb6f0 l     O .rodata	0000000000000018              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::set_subevent_collection(int, drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >*)::__func__
00000000000eb6d0 l     O .rodata	0000000000000018              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::set_subevent_collection(int, drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >*)::__func__
00000000000eb6b0 l     O .rodata	0000000000000018              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::set_subevent_collection(int, drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >*)::__func__
00000000000eb770 l     O .rodata	0000000000000015              drake::systems::Diagram<drake::symbolic::Expression>::SetDefaultParameters(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::Parameters<drake::symbolic::Expression>*) const::__func__
00000000000eb7c0 l     O .rodata	0000000000000014              drake::systems::Diagram<drake::symbolic::Expression>::SetRandomParameters(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::Parameters<drake::symbolic::Expression>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const::__func__
00000000000eb7a0 l     O .rodata	0000000000000018              drake::systems::Parameters<drake::symbolic::Expression>::set_abstract_parameters(std::unique_ptr<drake::systems::AbstractValues, std::default_delete<drake::systems::AbstractValues> >)::__func__
00000000000ea9e0 l     O .rodata	0000000000000018              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::set_subevent_collection(int, drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >*)::__func__
00000000000ea9c0 l     O .rodata	0000000000000018              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::set_subevent_collection(int, drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >*)::__func__
00000000000ea9a0 l     O .rodata	0000000000000018              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::set_subevent_collection(int, drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >*)::__func__
00000000000eaa40 l     O .rodata	0000000000000015              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetDefaultParameters(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const::__func__
00000000000eaa70 l     O .rodata	0000000000000014              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetRandomParameters(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const::__func__
00000000000eb480 l     O .rodata	0000000000000018              drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::set_abstract_parameters(std::unique_ptr<drake::systems::AbstractValues, std::default_delete<drake::systems::AbstractValues> >)::__func__
00000000000eb478 l     O .rodata	0000000000000008              drake::systems::ContinuousState<double>::DoClone() const::__func__
00000000000eb320 l     O .rodata	0000000000000018              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::set_subevent_collection(int, drake::systems::EventCollection<drake::systems::PublishEvent<double> >*)::__func__
00000000000eb300 l     O .rodata	0000000000000018              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::set_subevent_collection(int, drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >*)::__func__
00000000000eb2e0 l     O .rodata	0000000000000018              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::set_subevent_collection(int, drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >*)::__func__
00000000000eb380 l     O .rodata	0000000000000015              drake::systems::Diagram<double>::SetDefaultParameters(drake::systems::Context<double> const&, drake::systems::Parameters<double>*) const::__func__
00000000000eb3b0 l     O .rodata	0000000000000014              drake::systems::Diagram<double>::SetRandomParameters(drake::systems::Context<double> const&, drake::systems::Parameters<double>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const::__func__
00000000000eb420 l     O .rodata	0000000000000018              drake::systems::Parameters<double>::set_abstract_parameters(std::unique_ptr<drake::systems::AbstractValues, std::default_delete<drake::systems::AbstractValues> >)::__func__
00000000000ebb20 l     O .rodata	0000000000000010              drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>::get_subdiscrete(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const::__func__
00000000000ebb60 l     O .rodata	0000000000000026              drake::systems::Diagram<drake::symbolic::Expression>::DispatchDiscreteVariableUpdateHandler(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > const&, drake::systems::DiscreteValues<drake::symbolic::Expression>*) const::__func__
00000000000ec6f0 l     O .rodata	0000000000000012              drake::systems::SystemBase::EvalAbstractInput(drake::systems::ContextBase const&, int) const::__func__
00000000000ebed0 l     O .rodata	0000000000000013              drake::systems::DiagramContext<drake::symbolic::Expression>::GetSubsystemOutput(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const::__func__
00000000000ebf40 l     O .rodata	0000000000000020              drake::systems::Diagram<drake::symbolic::Expression>::EvalConnectedSubsystemInputPort(drake::systems::ContextBase const&, drake::systems::InputPortBase const&) const::__func__
00000000000eadc0 l     O .rodata	0000000000000010              drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_subdiscrete(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const::__func__
00000000000eae00 l     O .rodata	0000000000000026              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DispatchDiscreteVariableUpdateHandler(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > const&, drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const::__func__
00000000000eae28 l     O .rodata	000000000000000f              drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetFromGeneric<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)::__func__
00000000000eae80 l     O .rodata	0000000000000022              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DispatchUnrestrictedUpdateHandler(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const::__func__
00000000000eb110 l     O .rodata	0000000000000013              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetSubsystemOutput(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const::__func__
00000000000eb160 l     O .rodata	0000000000000020              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::EvalConnectedSubsystemInputPort(drake::systems::ContextBase const&, drake::systems::InputPortBase const&) const::__func__
00000000000ec690 l     O .rodata	0000000000000013              drake::systems::DiagramContext<double>::GetSubsystemOutput(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const::__func__
00000000000ec720 l     O .rodata	0000000000000020              drake::systems::Diagram<double>::EvalConnectedSubsystemInputPort(drake::systems::ContextBase const&, drake::systems::InputPortBase const&) const::__func__
00000000000ebb88 l     O .rodata	000000000000000f              drake::systems::ContinuousState<drake::symbolic::Expression>::SetFromGeneric<drake::symbolic::Expression>(drake::systems::ContinuousState<drake::symbolic::Expression> const&)::__func__
00000000000ebbe0 l     O .rodata	0000000000000022              drake::systems::Diagram<drake::symbolic::Expression>::DispatchUnrestrictedUpdateHandler(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > const&, drake::systems::State<drake::symbolic::Expression>*) const::__func__
00000000000eb358 l     O .rodata	000000000000000f              drake::systems::Diagram<double>::AllocateOutput(drake::systems::Context<double> const&) const::__func__
00000000000eb340 l     O .rodata	0000000000000017              drake::systems::Diagram<double>::ExposeSubsystemOutputs(drake::systems::DiagramContext<double> const&, drake::systems::internal::DiagramOutput<double>*) const::__func__
00000000000eb738 l     O .rodata	000000000000000f              drake::systems::Diagram<drake::symbolic::Expression>::AllocateOutput(drake::systems::Context<drake::symbolic::Expression> const&) const::__func__
00000000000eb710 l     O .rodata	0000000000000017              drake::systems::Diagram<drake::symbolic::Expression>::ExposeSubsystemOutputs(drake::systems::DiagramContext<drake::symbolic::Expression> const&, drake::systems::internal::DiagramOutput<drake::symbolic::Expression>*) const::__func__
00000000000eaa18 l     O .rodata	000000000000000f              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateOutput(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const::__func__
00000000000eaa00 l     O .rodata	0000000000000017              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ExposeSubsystemOutputs(drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const::__func__
00000000000eb210 l     O .rodata	000000000000000a              drake::systems::lcm::Serializer<drake::lcmt_iiwa_status>::Serialize(drake::systems::AbstractValue const&, std::vector<unsigned char, std::allocator<unsigned char> >*) const::__func__
00000000000eb200 l     O .rodata	000000000000000c              drake::systems::lcm::Serializer<drake::lcmt_iiwa_status>::Deserialize(void const*, int, drake::systems::AbstractValue*) const::__func__
00000000000eb230 l     O .rodata	000000000000000a              drake::systems::lcm::Serializer<drake::lcmt_iiwa_command>::Serialize(drake::systems::AbstractValue const&, std::vector<unsigned char, std::allocator<unsigned char> >*) const::__func__
00000000000eb220 l     O .rodata	000000000000000c              drake::systems::lcm::Serializer<drake::lcmt_iiwa_command>::Deserialize(void const*, int, drake::systems::AbstractValue*) const::__func__
00000000000ec480 l     O .rodata	0000000000000011              drake::systems::PublishEvent<double>::add_to_composite(drake::systems::CompositeEventCollection<double>*) const::__func__
00000000000eb2a0 l     O .rodata	0000000000000013              drake::systems::System<double>::CheckValidContextT<double>(drake::systems::Context<double> const&) const::__func__
00000000000eb2c0 l     O .rodata	0000000000000014              drake::systems::System<double>::DoCheckValidContext(drake::systems::ContextBase const&) const::__func__
00000000000eb250 l     O .rodata	0000000000000013              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::CheckValidContextT<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const::__func__
00000000000eb270 l     O .rodata	0000000000000014              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCheckValidContext(drake::systems::ContextBase const&) const::__func__
00000000000ec260 l     O .rodata	0000000000000016              drake::systems::Diagram<double>::DoGetWitnessFunctions(drake::systems::Context<double> const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*) const::__func__
00000000000ead60 l     O .rodata	0000000000000016              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetWitnessFunctions(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, std::vector<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >*) const::__func__
00000000000ebac0 l     O .rodata	0000000000000016              drake::systems::Diagram<drake::symbolic::Expression>::DoGetWitnessFunctions(drake::systems::Context<drake::symbolic::Expression> const&, std::vector<drake::systems::WitnessFunction<drake::symbolic::Expression> const*, std::allocator<drake::systems::WitnessFunction<drake::symbolic::Expression> const*> >*) const::__func__
00000000000eb747 l     O .rodata	0000000000000005              drake::systems::DiagramContinuousState<drake::symbolic::Expression>::Span(std::vector<drake::systems::ContinuousState<drake::symbolic::Expression>*, std::allocator<drake::systems::ContinuousState<drake::symbolic::Expression>*> > const&, std::function<drake::systems::VectorBase<drake::symbolic::Expression>& (drake::systems::ContinuousState<drake::symbolic::Expression>*)>)::__func__
00000000000eb5d8 l     O .rodata	0000000000000009              drake::systems::DiagramState<drake::symbolic::Expression>::Finalize()::__func__
00000000000eb5c0 l     O .rodata	0000000000000013              drake::systems::State<drake::symbolic::Expression>::set_abstract_state(std::unique_ptr<drake::systems::AbstractValues, std::default_delete<drake::systems::AbstractValues> >)::__func__
00000000000eb521 l     O .rodata	0000000000000005              drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Span(std::vector<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> > const&, std::function<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)>)::__func__
00000000000eb518 l     O .rodata	0000000000000009              drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Finalize()::__func__
00000000000eb500 l     O .rodata	0000000000000013              drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::set_abstract_state(std::unique_ptr<drake::systems::AbstractValues, std::default_delete<drake::systems::AbstractValues> >)::__func__
00000000000eb473 l     O .rodata	0000000000000005              drake::systems::DiagramContinuousState<double>::Span(std::vector<drake::systems::ContinuousState<double>*, std::allocator<drake::systems::ContinuousState<double>*> > const&, std::function<drake::systems::VectorBase<double>& (drake::systems::ContinuousState<double>*)>)::__func__
00000000000eb438 l     O .rodata	0000000000000009              drake::systems::DiagramState<double>::Finalize()::__func__
00000000000eb460 l     O .rodata	0000000000000013              drake::systems::State<double>::set_abstract_state(std::unique_ptr<drake::systems::AbstractValues, std::default_delete<drake::systems::AbstractValues> >)::__func__
00000000000eb448 l     O .rodata	000000000000000d              drake::systems::DiagramState<double>::set_substate(int, drake::systems::State<double>*)::__func__
00000000000eb3f0 l     O .rodata	000000000000000a              drake::systems::DiagramContext<double>::AddSystem(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>, std::unique_ptr<drake::systems::Context<double>, std::default_delete<drake::systems::Context<double> > >, std::unique_ptr<drake::systems::SystemOutput<double>, std::default_delete<drake::systems::SystemOutput<double> > >)::__func__
00000000000eb498 l     O .rodata	000000000000000b              drake::systems::ContextBase::set_parent(drake::systems::ContextBase const*)::__func__
00000000000eb288 l     O .rodata	000000000000000c              drake::systems::DiagramContext<double>::ExportInput(drake::TypeSafeIndex<drake::systems::InputPortTag>, std::pair<drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&)::__func__
00000000000eb4a8 l     O .rodata	000000000000000b              drake::systems::ContextBase::set_parent(drake::systems::ContextBase*, drake::systems::ContextBase const*)::__func__
00000000000eb298 l     O .rodata	0000000000000008              drake::systems::DiagramContext<double>::Connect(std::pair<drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&, std::pair<drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&)::__func__
00000000000eb5e8 l     O .rodata	000000000000000d              drake::systems::DiagramState<drake::symbolic::Expression>::set_substate(int, drake::systems::State<drake::symbolic::Expression>*)::__func__
00000000000eb3e0 l     O .rodata	000000000000000a              drake::systems::DiagramContext<drake::symbolic::Expression>::AddSystem(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>, std::unique_ptr<drake::systems::Context<drake::symbolic::Expression>, std::default_delete<drake::systems::Context<drake::symbolic::Expression> > >, std::unique_ptr<drake::systems::SystemOutput<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemOutput<drake::symbolic::Expression> > >)::__func__
00000000000eb3c8 l     O .rodata	000000000000000c              drake::systems::DiagramContext<drake::symbolic::Expression>::ExportInput(drake::TypeSafeIndex<drake::systems::InputPortTag>, std::pair<drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&)::__func__
00000000000eb3d8 l     O .rodata	0000000000000008              drake::systems::DiagramContext<drake::symbolic::Expression>::Connect(std::pair<drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&, std::pair<drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&)::__func__
00000000000eb588 l     O .rodata	000000000000000d              drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::set_substate(int, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)::__func__
00000000000eb4b8 l     O .rodata	000000000000000a              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AddSystem(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>, std::unique_ptr<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::unique_ptr<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >)::__func__
00000000000ea988 l     O .rodata	000000000000000c              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ExportInput(drake::TypeSafeIndex<drake::systems::InputPortTag>, std::pair<drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&)::__func__
00000000000ea998 l     O .rodata	0000000000000008              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Connect(std::pair<drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&, std::pair<drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&)::__func__
00000000000eb5a8 l     O .rodata	000000000000000f              drake::systems::DiagramContext<drake::symbolic::Expression>::DiagramContext(drake::systems::DiagramContext<drake::symbolic::Expression> const&)::__func__
00000000000eb598 l     O .rodata	000000000000000f              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiagramContext(drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)::__func__
00000000000eb410 l     O .rodata	000000000000000f              drake::systems::DiagramContext<double>::DiagramContext(drake::systems::DiagramContext<double> const&)::__func__
00000000000eb528 l     O .rodata	0000000000000008              drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoClone() const::__func__
00000000000eb750 l     O .rodata	0000000000000008              drake::systems::ContinuousState<drake::symbolic::Expression>::DoClone() const::__func__
0000000000070120 l     F .text	0000000000000742              _GLOBAL__sub_I_kuka_simulation.cc
0000000000316c20 l     O .bss	0000000000000040              fLS::s_spdlog_level
0000000000316c18 l     O .bss	0000000000000008              fLS::FLAGS_nospdlog_level
0000000000316c10 l     O .bss	0000000000000001              fLS::o_spdlog_level
0000000000316c00 l     O .bss	0000000000000001              std::__ioinit
0000000000316b40 l     O .bss	0000000000000001              fLD::o_simulation_sec
0000000000316b00 l     O .bss	0000000000000040              fLS::s_urdf
0000000000316af8 l     O .bss	0000000000000008              fLS::FLAGS_nourdf
0000000000316af0 l     O .bss	0000000000000001              fLS::o_urdf
0000000000316ae1 l     O .bss	0000000000000001              fLB::o_visualize_frames
0000000000316ae0 l     O .bss	0000000000000001              fLD::o_target_realtime_rate
00000000000d36b0 l     F .text	0000000000001841              drake::examples::kuka_iiwa_arm::(anonymous namespace)::DoMain()
00000000000eb1d8 l     O .rodata	000000000000000f              drake::systems::lcm::LcmPublisherSystem::get_input_port() const::__func__
00000000000ea6d0 l     O .rodata	000000000000001b              drake::systems::Diagram<double>::GetMutableSubsystemContext(drake::systems::System<double> const&, drake::systems::Context<double>*) const::__func__
00000000000eb1f0 l     O .rodata	0000000000000010              drake::systems::lcm::LcmSubscriberSystem::get_output_port() const::__func__
00000000000ec740 l     O .rodata	0000000000000007              drake::examples::kuka_iiwa_arm::(anonymous namespace)::DoMain()::__func__
0000000000312078 l     O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::(anonymous namespace)::name_formatter
00000000000f13e0 l     O .rodata	0000000000000031              typeinfo name for spdlog::details::(anonymous namespace)::name_formatter
0000000000000000 l    df *ABS*	0000000000000000              iiwa_lcm.cc
00000000000d4f30 l     F .text	0000000000000037              std::_Function_base::_Base_manager<drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::IiwaCommandReceiver(int)::{lambda(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::IiwaCommandReceiver(int)::{lambda(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)#1}> const&, std::_Manager_operation)
0000000000314e10 l     O .data.rel.ro	0000000000000010              typeinfo for drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::IiwaCommandReceiver(int)::{lambda(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)#1}
00000000000d4f70 l     F .text	0000000000000037              std::_Function_base::_Base_manager<drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::IiwaCommandReceiver(int)::{lambda(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)#2}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::IiwaCommandReceiver(int)::{lambda(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)#2}> const&, std::_Manager_operation)
0000000000314e20 l     O .data.rel.ro	0000000000000010              typeinfo for drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::IiwaCommandReceiver(int)::{lambda(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)#2}
00000000000d53e0 l     F .text	0000000000000037              __tcf_3
0000000000317160 l     O .bss	0000000000000180              spdlog::details::full_months
00000000000d5420 l     F .text	0000000000000037              __tcf_2
00000000003172e0 l     O .bss	0000000000000180              spdlog::details::months
00000000000d5460 l     F .text	0000000000000037              __tcf_1
0000000000317460 l     O .bss	00000000000000e0              spdlog::details::full_days
00000000000d54a0 l     F .text	0000000000000037              __tcf_0
0000000000317540 l     O .bss	00000000000000e0              spdlog::details::days
00000000000f5c88 l     O .rodata	0000000000000008              drake::systems::VectorBase<double>::SetFrom(drake::systems::VectorBase<double> const&)::__func__
00000000000f57f8 l     O .rodata	000000000000000b              drake::systems::LeafSystem<double>::DeclareVectorOutputPort<drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque, drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&, void (drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::*)(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*) const)::{lambda(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)#1}::operator()(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*) const::__func__
00000000000f5a40 l     O .rodata	0000000000000036              drake::systems::LeafSystem<double>::AddTriggeredWitnessFunctionToCompositeEventCollection(drake::systems::Event<double>*, drake::systems::CompositeEventCollection<double>*) const::__func__
00000000000f5a80 l     O .rodata	0000000000000013              drake::systems::LeafSystem<double>::DoCalcWitnessValue(drake::systems::Context<double> const&, drake::systems::WitnessFunction<double> const&) const::__func__
00000000000f5b30 l     O .rodata	0000000000000018              drake::systems::LeafSystem<double>::DoAllocateInputAbstract(drake::systems::InputPortDescriptor<double> const&) const::__func__
00000000000f5980 l     O .rodata	0000000000000007              drake::systems::LeafOutputPort<double>::DoEval(drake::systems::Context<double> const&) const::__func__
00000000000f5a10 l     O .rodata	000000000000001b              drake::systems::LeafSystem<double>::GetGraphvizOutputPortToken(drake::systems::OutputPort<double> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const::__func__
00000000000f59f0 l     O .rodata	000000000000001a              drake::systems::LeafSystem<double>::GetGraphvizInputPortToken(drake::systems::InputPortDescriptor<double> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const::__func__
00000000000d5ac0 l     F .text	00000000000000ad              void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .isra.338]
00000000000d5ac0 l     F .text	00000000000000ad              void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.327]
00000000000d5b70 l     F .text	000000000000003b              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.329]
00000000000d5c90 l     F .text	0000000000000096              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > drake::NiceTypeName::Get<drake::systems::System<double> >(drake::systems::System<double> const&) [clone .isra.884]
00000000000d5c90 l     F .text	0000000000000096              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > drake::NiceTypeName::Get<drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&) [clone .isra.322]
00000000000d5c90 l     F .text	0000000000000096              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > drake::NiceTypeName::Get<drake::systems::SystemBase>(drake::systems::SystemBase const&) [clone .isra.323]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> >::_M_allocate(unsigned long) [clone .isra.1182]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::DependencyTracker, std::default_delete<drake::systems::DependencyTracker> >, std::allocator<std::unique_ptr<drake::systems::DependencyTracker, std::default_delete<drake::systems::DependencyTracker> > > >::_M_allocate(unsigned long) [clone .isra.278]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<double, std::allocator<double> >::_M_allocate(unsigned long) [clone .isra.343]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >, std::allocator<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > > >::_M_allocate(unsigned long) [clone .isra.413]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<drake::systems::DependencyTracker const*, std::allocator<drake::systems::DependencyTracker const*> >::_M_allocate(unsigned long) [clone .isra.424]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> >, std::allocator<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > > >::_M_allocate(unsigned long) [clone .isra.430]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> >, std::allocator<std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> > > >::_M_allocate(unsigned long) [clone .isra.437]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_M_allocate(unsigned long) [clone .isra.453]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > >, std::allocator<std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > > > >::_M_allocate(unsigned long) [clone .isra.644]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > >, std::allocator<std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > > > >::_M_allocate(unsigned long) [clone .isra.685]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<drake::systems::PublishEvent<double> const*, std::allocator<drake::systems::PublishEvent<double> const*> >::_M_allocate(unsigned long) [clone .isra.692]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > > > >::_M_allocate(unsigned long) [clone .isra.699]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<drake::systems::DiscreteUpdateEvent<double> const*, std::allocator<drake::systems::DiscreteUpdateEvent<double> const*> >::_M_allocate(unsigned long) [clone .isra.706]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > >, std::allocator<std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > > > >::_M_allocate(unsigned long) [clone .isra.713]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<drake::systems::UnrestrictedUpdateEvent<double> const*, std::allocator<drake::systems::UnrestrictedUpdateEvent<double> const*> >::_M_allocate(unsigned long) [clone .isra.720]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > >, std::allocator<std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > > > >::_M_allocate(unsigned long) [clone .isra.730]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > > >::_M_allocate(unsigned long) [clone .isra.952]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::OutputPortValue, std::default_delete<drake::systems::OutputPortValue> >, std::allocator<std::unique_ptr<drake::systems::OutputPortValue, std::default_delete<drake::systems::OutputPortValue> > > >::_M_allocate(unsigned long) [clone .isra.988]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> >::_M_allocate(unsigned long) [clone .isra.1011]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> >::_M_allocate(unsigned long) [clone .isra.1063]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<std::unique_ptr<drake::systems::BasicVector<drake::symbolic::Expression>, std::default_delete<drake::systems::BasicVector<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<drake::symbolic::Expression>, std::default_delete<drake::systems::BasicVector<drake::symbolic::Expression> > > > >::_M_allocate(unsigned long) [clone .isra.1123]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<drake::copyable_unique_ptr<drake::systems::FixedInputPortValue>, std::allocator<drake::copyable_unique_ptr<drake::systems::FixedInputPortValue> > >::_M_allocate(unsigned long) [clone .isra.1149]
00000000000d5d30 l     F .text	000000000000002c              std::_Vector_base<drake::copyable_unique_ptr<drake::systems::CacheEntryValue>, std::allocator<drake::copyable_unique_ptr<drake::systems::CacheEntryValue> > >::_M_allocate(unsigned long) [clone .isra.1153]
000000000006fe3a l     F .text	0000000000000024              std::default_delete<drake::systems::DiscreteUpdateEvent<double> >::operator()(drake::systems::DiscreteUpdateEvent<double>*) const [clone .isra.292] [clone .constprop.1202]
00000000000d5d60 l     F .text	000000000000003d              std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> >::_M_check_len(unsigned long, char const*) const [clone .isra.1179] [clone .constprop.1209]
00000000000f5c78 l     O .rodata	000000000000000b              drake::systems::BasicVector<double>::GetAtIndex(int)::__func__
00000000000f59b0 l     O .rodata	0000000000000017              drake::systems::LeafSystemOutput<double>::get_mutable_port_value(int)::__func__
00000000000f59c8 l     O .rodata	000000000000000f              drake::systems::LeafSystemOutput<double>::get_port_value(int) const::__func__
00000000000f5aa0 l     O .rodata	0000000000000017              drake::systems::LeafSystem<double>::DispatchPublishHandler(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::PublishEvent<double> > const&) const::__func__
00000000000f5b00 l     O .rodata	0000000000000022              drake::systems::LeafSystem<double>::DispatchUnrestrictedUpdateHandler(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > const&, drake::systems::State<double>*) const::__func__
000000000006fe5e l     F .text	00000000000000c7              std::default_delete<drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> > >::operator()(drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >*) const [clone .isra.584] [clone .constprop.1203]
000000000006ff26 l     F .text	00000000000000c7              std::default_delete<drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> > >::operator()(drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >*) const [clone .isra.574] [clone .constprop.1199]
000000000006ffee l     F .text	00000000000000c7              std::default_delete<drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> > >::operator()(drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >*) const [clone .isra.579] [clone .constprop.1201]
00000000000d6da0 l     F .text	0000000000000072              std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> >::operator()(drake::systems::UnrestrictedUpdateEvent<double>*) const [clone .isra.293] [clone .constprop.1204]
00000000000700b6 l     F .text	0000000000000061              std::default_delete<drake::systems::PublishEvent<double> >::operator()(drake::systems::PublishEvent<double>*) const [clone .isra.291] [clone .constprop.1200]
00000000000d7110 l     F .text	000000000000001b              std::_Function_handler<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*), drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::IiwaCommandReceiver(int)::{lambda(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)#1}>::_M_invoke(std::_Any_data const&, drake::systems::Context<double> const&, drake::systems::BasicVector<double>*&&)
00000000000d7130 l     F .text	000000000000001b              std::_Function_handler<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*), drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::IiwaCommandReceiver(int)::{lambda(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)#2}>::_M_invoke(std::_Any_data const&, drake::systems::Context<double> const&, drake::systems::BasicVector<double>*&&)
00000000000f5970 l     O .rodata	0000000000000010              drake::systems::SystemBase::CreateInputPort(std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> >)::__func__
00000000000f5958 l     O .rodata	000000000000000f              drake::systems::System<double>::get_input_port(int) const::__func__
00000000000f58e0 l     O .rodata	0000000000000010              drake::systems::System<double>::EvalVectorInput<drake::systems::BasicVector>(drake::systems::Context<double> const&, int) const::__func__
00000000000f58c0 l     O .rodata	0000000000000019              drake::systems::System<double>::EvalBasicVectorInputImpl(char const*, drake::systems::Context<double> const&, drake::TypeSafeIndex<drake::systems::InputPortTag>) const::__func__
00000000000f57c8 l     O .rodata	000000000000000f              drake::systems::SystemBase::EvalInputValue<drake::systems::ContactResults<double> >(drake::systems::ContextBase const&, int) const::__func__
00000000000f57e0 l     O .rodata	0000000000000015              drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::OutputExternalTorque(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*) const::__func__
00000000000f58f0 l     O .rodata	0000000000000012              drake::systems::SystemBase::EvalAbstractInput(drake::systems::ContextBase const&, int) const::__func__
00000000000f5910 l     O .rodata	000000000000001e              drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::DoCalcDiscreteVariableUpdates(drake::systems::Context<double> const&, std::vector<drake::systems::DiscreteUpdateEvent<double> const*, std::allocator<drake::systems::DiscreteUpdateEvent<double> const*> > const&, drake::systems::DiscreteValues<double>*) const::__func__
00000000000f58b1 l     O .rodata	0000000000000005              drake::systems::OutputPort<double>::Calc(drake::systems::Context<double> const&, drake::systems::AbstractValue*) const::__func__
00000000000f5930 l     O .rodata	0000000000000011              drake::systems::System<double>::CreateOutputPort(std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > >)::__func__
00000000000f5948 l     O .rodata	000000000000000b              drake::systems::OutputPort<double>::OutputPort(drake::systems::System<double> const&, drake::systems::internal::SystemMessageInterface const&, drake::TypeSafeIndex<drake::systems::OutputPortTag>, drake::systems::PortDataType, int)::__func__
00000000000f5bc8 l     O .rodata	000000000000000a              drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >::add_event(std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > >)::__func__
00000000000f5b48 l     O .rodata	000000000000000a              drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >::add_event(std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > >)::__func__
00000000000f5b80 l     O .rodata	0000000000000011              drake::systems::DiscreteUpdateEvent<double>::add_to_composite(drake::systems::CompositeEventCollection<double>*) const::__func__
00000000000f5b60 l     O .rodata	000000000000001a              drake::systems::CompositeEventCollection<double>::add_discrete_update_event(std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > >)::__func__
00000000000f5b98 l     O .rodata	000000000000000a              drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::add_event(std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > >)::__func__
00000000000f5ac0 l     O .rodata	0000000000000026              drake::systems::LeafSystem<double>::DispatchDiscreteVariableUpdateHandler(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > const&, drake::systems::DiscreteValues<double>*) const::__func__
00000000000f59e0 l     O .rodata	0000000000000010              drake::systems::LeafSystem<double>::SetDefaultState(drake::systems::Context<double> const&, drake::systems::State<double>*) const::__func__
00000000000f5870 l     O .rodata	000000000000001a              drake::systems::LeafSystem<double>::DeclareAbstractOutputPort<drake::examples::kuka_iiwa_arm::IiwaStatusSender, drake::lcmt_iiwa_status>(drake::lcmt_iiwa_status (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)() const, void (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)(drake::systems::Context<double> const&, drake::lcmt_iiwa_status*) const)::__func__
00000000000f5890 l     O .rodata	000000000000000e              drake::systems::System<double>::AddConstraint(std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > >)::__func__
00000000000f58a0 l     O .rodata	0000000000000011              drake::systems::SystemConstraint<double>::SystemConstraint(std::function<void (drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)>, int, drake::systems::SystemConstraintType, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::__func__
00000000000f5810 l     O .rodata	0000000000000018              drake::systems::LeafSystem<double>::DeclareVectorOutputPort<drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque, drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&, void (drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::*)(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*) const)::__func__
00000000000f5840 l     O .rodata	0000000000000023              drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::IiwaContactResultsToExternalTorque(RigidBodyTree<double> const&, std::vector<int, std::allocator<int> > const&)::__func__
00000000000f5828 l     O .rodata	0000000000000009              RigidBody<double>::getJoint() const::__func__
00000000000f5bb0 l     O .rodata	0000000000000011              drake::systems::UnrestrictedUpdateEvent<double>::add_to_composite(drake::systems::CompositeEventCollection<double>*) const::__func__
00000000000f5990 l     O .rodata	000000000000001b              drake::systems::detail::CheckBasicVectorInvariants<double>(drake::systems::BasicVector<double> const*)::__func__
00000000000f5c60 l     O .rodata	0000000000000015              drake::systems::State<double>::set_continuous_state(std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > >)::__func__
00000000000f5c40 l     O .rodata	0000000000000013              drake::systems::State<double>::set_discrete_state(std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >)::__func__
00000000000f5c20 l     O .rodata	0000000000000013              drake::systems::State<double>::set_abstract_state(std::unique_ptr<drake::systems::AbstractValues, std::default_delete<drake::systems::AbstractValues> >)::__func__
00000000000f5be0 l     O .rodata	0000000000000018              drake::systems::Parameters<double>::set_abstract_parameters(std::unique_ptr<drake::systems::AbstractValues, std::default_delete<drake::systems::AbstractValues> >)::__func__
00000000000f5c00 l     O .rodata	0000000000000017              drake::systems::Parameters<double>::set_numeric_parameters(std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >)::__func__
00000000000708a0 l     F .text	0000000000000567              _GLOBAL__sub_I_iiwa_lcm.cc
0000000000317620 l     O .bss	0000000000000001              std::__ioinit
00000000000f5fa0 l     O .rodata	000000000000006f              typeinfo name for drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::IiwaCommandReceiver(int)::{lambda(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)#1}
00000000000f6020 l     O .rodata	0000000000000070              typeinfo name for drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::IiwaCommandReceiver(int)::{lambda(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)#2}
0000000000000000 l    df *ABS*	0000000000000000              iiwa_common.cc
00000000000e2c60 l     F .text	0000000000000037              __tcf_3
0000000000317640 l     O .bss	0000000000000180              spdlog::details::full_months
00000000000e2ca0 l     F .text	0000000000000037              __tcf_2
00000000003177c0 l     O .bss	0000000000000180              spdlog::details::months
00000000000e2ce0 l     F .text	0000000000000037              __tcf_1
0000000000317940 l     O .bss	00000000000000e0              spdlog::details::full_days
00000000000e2d20 l     F .text	0000000000000037              __tcf_0
0000000000317a20 l     O .bss	00000000000000e0              spdlog::details::days
00000000000e2dd0 l     F .text	00000000000000ad              void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .isra.280]
00000000000e2dd0 l     F .text	00000000000000ad              void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.242]
00000000000e2e80 l     F .text	000000000000003b              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.244]
0000000000070e10 l     F .text	0000000000000567              _GLOBAL__sub_I_iiwa_common.cc
0000000000317b00 l     O .bss	0000000000000001              std::__ioinit
0000000000000000 l    df *ABS*	0000000000000000              crtstuff.c
0000000000310858 l     O .jcr	0000000000000000              __JCR_LIST__
00000000000713b0 l     F .text	0000000000000000              deregister_tm_clones
00000000000713f0 l     F .text	0000000000000000              register_tm_clones
0000000000071440 l     F .text	0000000000000000              __do_global_dtors_aux
0000000000316780 l     O .bss	0000000000000001              completed.7594
0000000000310850 l     O .fini_array	0000000000000000              __do_global_dtors_aux_fini_array_entry
0000000000071480 l     F .text	0000000000000000              frame_dummy
0000000000310830 l     O .init_array	0000000000000000              __frame_dummy_init_array_entry
0000000000000000 l    df *ABS*	0000000000000000              crtstuff.c
000000000010b9a8 l     O .eh_frame	0000000000000000              __FRAME_END__
0000000000310858 l     O .jcr	0000000000000000              __JCR_END__
0000000000000000 l    df *ABS*	0000000000000000              
0000000000317b08 l       .bss	0000000000000000              _end
0000000000316000 l     O .got.plt	0000000000000000              _GLOBAL_OFFSET_TABLE_
00000000003159b0 l     O .dynamic	0000000000000000              _DYNAMIC
0000000000310850 l       .init_array	0000000000000000              __init_array_end
0000000000316768 l       .bss	0000000000000000              __bss_start
0000000000310830 l       .init_array	0000000000000000              __init_array_start
0000000000316768 l       .data	0000000000000000              _edata
00000000000f6cd0 l       .eh_frame_hdr	0000000000000000              __GNU_EH_FRAME_HDR
0000000000095380  w    F .text	0000000000000065              std::_Rb_tree<std::pair<drake::systems::System<double> const*, int>, std::pair<drake::systems::System<double> const*, int>, std::_Identity<std::pair<drake::systems::System<double> const*, int> >, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > >::find(std::pair<drake::systems::System<double> const*, int> const&) const
0000000000316760  w    O .data	0000000000000008              .hidden DW.ref.__gxx_personality_v0
00000000003121e0  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::M_formatter
0000000000099570  w    F .text	00000000000008af              fmt::BasicFormatter<char, fmt::ArgFormatter<char> >::format(char const*&, fmt::internal::Arg const&)
0000000000310f10  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::SystemOutput<double>
000000000007cc70  w    F .text	000000000000007a              drake::systems::internal::DiagramOutput<double>::get_mutable_port_value(int)
00000000000f1650  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::e_formatter
0000000000312330  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::v_formatter
00000000003109c8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (int)
00000000000f11c0  w    O .rodata	0000000000000034              typeinfo name for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>
00000000003122a0  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::R_formatter
0000000000000000       F *UND*	0000000000000000              drake::symbolic::abs(drake::symbolic::Expression const&)
0000000000312a80  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}
00000000000719e0  w    F .text	0000000000000036              std::_Function_handler<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > (drake::systems::System<double> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > (drake::systems::System<double>::*)() const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&)
0000000000074430  w    F .text	000000000000000f              spdlog::details::R_formatter::~R_formatter()
0000000000311190  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
000000000008b170  w    F .text	00000000000000f6              void std::vector<RigidBodyFrame<double>, std::allocator<RigidBodyFrame<double> > >::emplace_back<RigidBodyFrame<double> >(RigidBodyFrame<double>&&)
00000000003122b8  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::T_formatter
00000000003141e0  w    O .data.rel.ro	0000000000000038              vtable for drake::systems::lcm::Serializer<drake::lcmt_iiwa_status>
000000000008d970  w    F .text	00000000000001c6              drake::systems::IntegratorBase<double>::ValidateSmallerStepSize(double const&, double const&) const
00000000000edf00  w    O .rodata	000000000000003a              typeinfo name for drake::systems::SystemOutput<drake::symbolic::Expression>
0000000000070870 g     F .text	000000000000002d              main
000000000007e990  w    F .text	000000000000007d              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::~DiagramEventCollection()
0000000000075390  w    F .text	0000000000000047              drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_subevent_collection(int) const
00000000000b9680  w    F .text	000000000000005a              std::_Rb_tree<drake::systems::PeriodicEventData, std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > >, std::_Select1st<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > > >, drake::systems::PeriodicEventDataComparator, std::allocator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > > >*)
000000000008dc00  w    F .text	000000000000014e              drake::systems::Simulator<double>::GetCurrentWitnessTimeIsolation() const
0000000000074e00  w    F .text	000000000000006e              drake::systems::DiagramContext<double>::GetSubsystemContext(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const
0000000000000000       F *UND*	0000000000000000              operator delete[](void*, unsigned long)@@CXXABI_1.3.9
0000000000000000       F *UND*	0000000000000000              std::logic_error::logic_error(char const*)@@GLIBCXX_3.4.21
00000000000f6c20  w    O .rodata	000000000000006e              typeinfo name for std::_Sp_counted_ptr_inplace<RigidBodyFrame<double>, Eigen::aligned_allocator<RigidBodyFrame<double> >, (__gnu_cxx::_Lock_policy)2>
0000000000088970  w    F .text	0000000000000144              void std::vector<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >, std::allocator<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > > >::emplace_back<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > >(std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >&&)
0000000000310a08  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (int)
000000000007c2e0  w    F .text	000000000000006b              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoEvalConstraintEquations(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
000000000007a650  w    F .text	0000000000000032              drake::systems::lcm::Serializer<drake::lcmt_iiwa_status>::~Serializer()
0000000000073e10  w    F .text	000000000000007b              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::~DiagramEventCollection()
00000000000a92b0  w    F .text	00000000000000ee              std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >, drake::systems::System<drake::symbolic::Expression> const* const&)
00000000000734e0  w    F .text	000000000000000d              std::_Function_handler<drake::systems::VectorBase<drake::symbolic::Expression>& (drake::systems::ContinuousState<drake::symbolic::Expression>*), drake::systems::VectorBase<drake::symbolic::Expression>& (*)(drake::systems::ContinuousState<drake::symbolic::Expression>*)>::_M_invoke(std::_Any_data const&, drake::systems::ContinuousState<drake::symbolic::Expression>*&&)
00000000000a7010  w    F .text	00000000000000ee              std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >, drake::systems::System<double> const* const&)
0000000000071fb0  w    F .text	0000000000000006              spdlog::details::z_formatter::~z_formatter()
0000000000000000       F *UND*	0000000000000000              drake::systems::AbstractValues::size() const
00000000000e2d90  w    F .text	000000000000002d              std::_Sp_counted_ptr_inplace<RigidBodyFrame<double>, Eigen::aligned_allocator<RigidBodyFrame<double> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
00000000000defb0  w    F .text	0000000000000143              void std::vector<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > > >::emplace_back<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > >(std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >&&)
0000000000000000       F *UND*	0000000000000000              drake::systems::SystemBase::ThrowInputPortHasWrongType(char const*, drake::TypeSafeIndex<drake::systems::InputPortTag>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const
00000000000742d0  w    F .text	0000000000000038              drake::systems::Value<int>::Clone() const
00000000003144e0  w    O .data.rel.ro	0000000000000208              vtable for drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000310d40  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramState<drake::symbolic::Expression>
00000000000a2c10  w    F .text	000000000000000c              non-virtual thunk to drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Diagram()
0000000000071740  w    F .text	0000000000000060              drake::systems::CompositeEventCollection<double>::~CompositeEventCollection()
0000000000074a60  w    F .text	0000000000000018              fmt::FormatError::~FormatError()
00000000003116c0  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>
0000000000312ca0  w    O .data.rel.ro	0000000000000028              typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const
00000000000de470  w    F .text	000000000000007b              std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > drake::systems::detail::ModelValues::CloneVectorModel<double>(int) const
00000000000afa20  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
00000000000ed860  w    O .rodata	00000000000000a9              typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > ()
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@@GLIBCXX_3.4.21
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@@GLIBCXX_3.4.21
0000000000312c40  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Initialize(std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> >)::{lambda(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>*)#1}
00000000000cf050  w    F .text	0000000000000018              drake::systems::Supervector<double>::GetAtIndex(int) const
00000000000ecec0  w    O .rodata	0000000000000031              typeinfo name for drake::systems::State<double>* (drake::systems::System<double> const&, drake::systems::State<double>*)
00000000000f1f00  w    O .rodata	0000000000000024              typeinfo name for drake::systems::DiscreteValues<double>
00000000000edb20  w    O .rodata	000000000000007d              typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > ()
0000000000071f90  w    F .text	0000000000000006              spdlog::details::pid_formatter::~pid_formatter()
000000000007cd70  w    F .text	000000000000007a              drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_mutable_port_value(int)
00000000003167c0 u     O .bss	0000000000000008              guard variable for drake::NiceTypeName::Get<drake::systems::BasicVector<double> >()::canonical
000000000009cd80  w    F .text	000000000000013c              void drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)> const&)
00000000000f3920  w    O .rodata	0000000000000083              typeinfo name for drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
00000000003125d0  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::IntegratorBase<double>
0000000000089b10  w    F .text	00000000000001e9              drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::CopyToVector() const
0000000000311690  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>
0000000000073200  w    F .text	0000000000000060              drake::systems::CompositeEventCollection<drake::symbolic::Expression>::~CompositeEventCollection()
0000000000073d90  w    F .text	000000000000007b              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::~DiagramEventCollection()
0000000000311168  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int) const
0000000000072210  w    F .text	0000000000000006              std::_Sp_counted_ptr_inplace<spdlog::sinks::stderr_sink<std::mutex>, std::allocator<spdlog::sinks::stderr_sink<std::mutex> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
000000000007a5d0  w    F .text	0000000000000018              drake::systems::lcm::Serializer<drake::lcmt_iiwa_command>::~Serializer()
00000000000f5e40  w    O .rodata	0000000000000033              typeinfo name for drake::examples::kuka_iiwa_arm::IiwaStatusSender
0000000000000000       F *UND*	0000000000000000              __cxa_begin_catch@@CXXABI_1.3
0000000000312210  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::e_formatter
0000000000074470  w    F .text	000000000000000f              spdlog::details::F_formatter::~F_formatter()
0000000000075480  w    F .text	0000000000000033              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcTimeDerivatives(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000f1ce0  w    O .rodata	0000000000000024              typeinfo name for drake::systems::DiagramBuilder<double>
0000000000312120  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::c_formatter
0000000000093920  w    F .text	000000000000062f              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::NormInf() const
00000000000b4c90  w    F .text	00000000000000d3              void std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> >::emplace_back<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*>(drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*&&)
00000000000ed5a0  w    O .rodata	0000000000000052              typeinfo name for Eigen::internal::auto_diff_special_op<Eigen::Matrix<double, -1, 1, 0, -1, 1>, false>
00000000000d9760 g     F .text	00000000000000ef              drake::examples::kuka_iiwa_arm::IiwaStatusSender::MakeOutputStatus() const
00000000000d5210  w    F .text	000000000000001f              drake::systems::LeafSystem<double>::AllocateDiscreteVariables() const
000000000007bf00  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*), drake::systems::ContinuousState<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000db020  w    F .text	000000000000005a              drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >::add_event(std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > >)
00000000000a2950  w    F .text	0000000000000089              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Diagram()
0000000000071e60  w    F .text	000000000000002a              std::_Function_handler<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&)
0000000000312608  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::PublishEvent<double>
0000000000314eb8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::LeafSystem<double>::MakeAllocCallback<drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&)::{lambda()#1}
0000000000000000       F *UND*	0000000000000000              realloc@@GLIBC_2.2.5
0000000000000000       F *UND*	0000000000000000              operator delete(void*, unsigned long)@@CXXABI_1.3.9
000000000007b040  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000092ca0  w    F .text	00000000000000ea              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcVelocityChangeFromConstraintImpulses(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<double, -1, -1, 0, -1, -1> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&) const
0000000000071380 g     F .text	000000000000002a              _start
00000000000dcf40  w    F .text	0000000000000137              void std::vector<std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > >, std::allocator<std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > > > >::_M_emplace_back_aux<std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > > >(std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > >&&)
00000000000ed480  w    O .rodata	0000000000000057              typeinfo name for drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*)
0000000000071c10  w    F .text	000000000000002a              std::_Function_handler<drake::systems::Context<double> const* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::Context<double> const*), drake::systems::Context<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double> const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&, drake::systems::System<double> const&, drake::systems::Context<double> const*&&)
00000000000d5bb0  w    F .text	00000000000000d1              std::_Function_base::_Base_manager<drake::systems::LeafSystem<double>::MakeAllocCallback<drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::LeafSystem<double>::MakeAllocCallback<drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&)::{lambda()#1}> const&, std::_Manager_operation)
000000000008fb60  w    F .text	000000000000004c              std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> >, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >*)
00000000000ba540  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::Context<drake::symbolic::Expression>, std::default_delete<drake::systems::Context<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::Context<drake::symbolic::Expression>, std::default_delete<drake::systems::Context<drake::symbolic::Expression> > > > >::~vector()
0000000000072360  w    F .text	0000000000000047              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::HasEvents() const
00000000000f5e00  w    O .rodata	0000000000000036              typeinfo name for drake::examples::kuka_iiwa_arm::IiwaCommandReceiver
00000000000a29f0  w    F .text	0000000000000171              void std::vector<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::emplace_back<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > >(std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >&&)
00000000000bbed0  w    F .text	0000000000000145              std::pair<std::_Rb_tree_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, bool> std::_Rb_tree<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::_Identity<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::less<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::_M_insert_unique<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&>(std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&)
0000000000088120  w    F .text	0000000000000355              spdlog::async_logger::~async_logger()
00000000000f6280  w    O .rodata	00000000000000de              typeinfo name for drake::systems::LeafSystem<double>::DeclareAbstractOutputPort<drake::examples::kuka_iiwa_arm::IiwaStatusSender, drake::lcmt_iiwa_status>(drake::lcmt_iiwa_status (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)() const, void (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)(drake::systems::Context<double> const&, drake::lcmt_iiwa_status*) const)::{lambda(drake::systems::Context<double> const&, drake::systems::AbstractValue*)#2}
00000000000725f0  w    F .text	000000000000006d              drake::systems::VectorBase<double>::NormInf() const
00000000000d9720  w    F .text	0000000000000040              std::vector<double, std::allocator<double> >::resize(unsigned long, double const&)
0000000000311f90  w    O .data.rel.ro	0000000000000018              typeinfo for fmt::internal::RuntimeError
00000000000b2270  w    F .text	00000000000000d3              void std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> >::emplace_back<drake::systems::BasicVector<drake::symbolic::Expression>*>(drake::systems::BasicVector<drake::symbolic::Expression>*&&)
000000000008e7b0  w    F .text	0000000000000190              drake::systems::VectorBase<drake::symbolic::Expression>::CopyToVector() const
000000000008fbb0  w    F .text	0000000000000089              drake::systems::Diagram<double>::~Diagram()
000000000007a6f0  w    F .text	0000000000000018              drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~InputPortDescriptor()
0000000000000000       F *UND*	0000000000000000              drake::systems::AbstractValues::CopyFrom(drake::systems::AbstractValues const&)
00000000000af210  w    F .text	000000000000038e              drake::systems::Diagram<drake::symbolic::Expression>::DoMapVelocityToQDot(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<drake::symbolic::Expression>*) const
0000000000312828  w    O .data.rel.ro	0000000000000028              typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > (drake::systems::System<double>::*)() const
00000000000c5f40  w    F .text	0000000000000141              drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>::DoClone() const
0000000000075680  w    F .text	0000000000000009              non-virtual thunk to drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetParentPathname() const
0000000000071f70  w    F .text	0000000000000006              spdlog::details::v_formatter::~v_formatter()
000000000009acb0  w    F .text	000000000000013c              drake::logging::HandleSpdlogGflags()
00000000000727c0  w    F .text	0000000000000012              drake::systems::System<drake::symbolic::Expression>::DoGetMutableTargetSystemState(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const
00000000000dc6d0 g     F .text	0000000000000298              drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::IiwaCommandReceiver(int)
0000000000312af0  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000310f50  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramDiscreteValues<double>
0000000000073f90  w    F .text	000000000000002a              drake::systems::internal::DiagramOutput<double>::~DiagramOutput()
00000000000ee7c0  w    O .rodata	000000000000005e              typeinfo name for drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000084680  w    F .text	00000000000000d2              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)
000000000009cb60  w    F .text	000000000000018d              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~System()
00000000000f0cc0  w    O .rodata	0000000000000051              typeinfo name for std::_Simple_type_wrapper<drake::systems::State<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double> const*) const>
0000000000312910  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramContext<drake::symbolic::Expression>
00000000000ed720  w    O .rodata	0000000000000074              typeinfo name for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)
00000000000ed220  w    O .rodata	000000000000003d              typeinfo name for drake::systems::VectorBase<double>& (drake::systems::ContinuousState<double>*)
00000000000f3820  w    O .rodata	0000000000000078              typeinfo name for drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000086310  w    F .text	000000000000006e              std::_Hashtable<int, std::pair<int const, drake::systems::controllers::StateFeedbackControllerInterface<double>*>, std::allocator<std::pair<int const, drake::systems::controllers::StateFeedbackControllerInterface<double>*> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::~_Hashtable()
00000000000da6c0  w    F .text	0000000000000183              void drake::systems::LeafSystem<double>::DeclarePeriodicEvent<drake::systems::DiscreteUpdateEvent<double> >(double, double)
00000000000f6740  w    O .rodata	0000000000000094              typeinfo name for drake::systems::LeafOutputPort<double>::set_calculation_function(std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>)::{lambda(drake::systems::Context<double> const&, drake::systems::AbstractValue*)#1}
0000000000089f00  w    F .text	000000000000007e              drake::systems::RungeKutta3Integrator<double>::~RungeKutta3Integrator()
0000000000312bc8  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::InputPortDescriptor<drake::symbolic::Expression>
0000000000087ac0  w    F .text	00000000000000a3              spdlog::logger::~logger()
00000000000738c0  w    F .text	0000000000000032              fmt::internal::MemoryBuffer<char, 500ul, std::allocator<char> >::~MemoryBuffer()
00000000000e77d4 g     F .fini	0000000000000000              _fini
00000000000aef40  w    F .text	000000000000003f              drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::~DiagramCompositeEventCollection()
0000000000313ce0  w    O .data.rel.ro	0000000000000028              vtable for drake::systems::DiscreteValues<drake::symbolic::Expression>
0000000000312570  w    O .data.rel.ro	0000000000000038              typeinfo for drake::systems::Diagram<double>
000000000008cbb0  w    F .text	0000000000000125              spdlog::details::t_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000096670  w    F .text	000000000000018f              std::pair<std::_Rb_tree_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_insert_unique<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000311078  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::State<drake::symbolic::Expression> const& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int) const
0000000000310b98  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*)
00000000000b0490  w    F .text	000000000000014b              drake::systems::BasicVector<double>::Clone() const
00000000000b3090  w    F .text	0000000000000874              drake::systems::Diagram<drake::symbolic::Expression>::SetRandomParameters(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::Parameters<drake::symbolic::Expression>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
00000000003135e0  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::State<double>
0000000000074d00  w    F .text	000000000000002a              std::_Function_handler<void* (void const*), drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}>::_M_invoke(std::_Any_data const&, void const*&&)
0000000000000000       F *UND*	0000000000000000              drake::systems::SystemBase::MakeContext() const
0000000000083970  w    F .text	0000000000000033              std::type_info::operator!=(std::type_info const&) const
00000000000aaa30  w    F .text	0000000000000080              std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> >, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > > >::_M_get_insert_unique_pos(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&)
0000000000090bb0  w    F .text	000000000000008b              drake::systems::Simulator<double>::HandleUnrestrictedUpdate(drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > const&)
0000000000000000       F *UND*	0000000000000000              memmove@@GLIBC_2.2.5
00000000000ee100  w    O .rodata	0000000000000044              typeinfo name for drake::systems::DiagramContinuousState<drake::symbolic::Expression>
00000000000743c0  w    F .text	000000000000000f              spdlog::details::ch_formatter::~ch_formatter()
0000000000000000       F *UND*	0000000000000000              drake::systems::ContextBase::~ContextBase()
0000000000312c78  w    O .data.rel.ro	0000000000000028              typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const
00000000000efe40  w    O .rodata	000000000000006c              typeinfo name for std::_Simple_type_wrapper<drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*) const>
000000000008fab0  w    F .text	00000000000000a6              drake::systems::Diagram<double>::AllocateForcedUnrestrictedUpdateEventCollection() const
00000000000b49f0  w    F .text	0000000000000144              void std::vector<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::emplace_back<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > >(std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >&&)
00000000000be590  w    F .text	000000000000018d              drake::systems::ContinuousState<double>::ContinuousState(std::unique_ptr<drake::systems::VectorBase<double>, std::default_delete<drake::systems::VectorBase<double> > >)
00000000000b1fd0  w    F .text	0000000000000144              void std::vector<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > > > >::emplace_back<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > > >(std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > >&&)
0000000000312cd8  w    O .data.rel.ro	0000000000000028              typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const
000000000008f440  w    F .text	00000000000002da              std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > drake::systems::Diagram<double>::AllocateForcedEventCollection<drake::systems::DiscreteUpdateEvent<double> >(std::function<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > (drake::systems::System<double> const*)>) const
000000000007a4b0  w    F .text	0000000000000032              stx::bad_optional_access::~bad_optional_access()
0000000000077a30  w    F .text	00000000000002b4              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetMutableTargetSystemState(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000000000       F *UND*	0000000000000000              localtime_r@@GLIBC_2.2.5
00000000000f17d0  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::i_formatter
00000000000731d0  w    F .text	0000000000000023              std::_Function_handler<drake::systems::CompositeEventCollection<double> const& (drake::systems::DiagramCompositeEventCollection<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<double> const& (drake::systems::DiagramCompositeEventCollection<double>::*)(int) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramCompositeEventCollection<double> const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
000000000007d2e0  w    F .text	00000000000000fd              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::DoMerge(drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > const&)
00000000000aee90  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, std::default_delete<drake::systems::CompositeEventCollection<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, std::default_delete<drake::systems::CompositeEventCollection<drake::symbolic::Expression> > > > >::~vector()
00000000000b9250  w    F .text	0000000000000148              drake::systems::DiscreteValues<double>::DiscreteValues(std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> > const&)
00000000000f0c60  w    O .rodata	000000000000004f              typeinfo name for std::_Simple_type_wrapper<drake::systems::State<double>& (drake::systems::DiagramState<double>::*)(int)>
00000000000b24a0  w    F .text	0000000000000047              drake::systems::DiscreteValues<drake::symbolic::Expression>::~DiscreteValues()
00000000003149d0  w    O .data.rel.ro	0000000000000038              vtable for drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000d6290  w    F .text	00000000000000a4              drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >::Clear()
00000000000e3280  w    F .text	0000000000000224              void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_emplace_back_aux<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000c17a0  w    F .text	00000000000000ae              drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoClone() const
0000000000086ae0  w    F .text	0000000000000065              drake::systems::DiagramContext<drake::symbolic::Expression>::set_time(drake::symbolic::Expression const&)
00000000000d8ab0 g     F .text	0000000000000387              drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::DoCalcDiscreteVariableUpdates(drake::systems::Context<double> const&, std::vector<drake::systems::DiscreteUpdateEvent<double> const*, std::allocator<drake::systems::DiscreteUpdateEvent<double> const*> > const&, drake::systems::DiscreteValues<double>*) const
0000000000094ed0  w    F .text	0000000000000113              drake::systems::lcm::LcmPublisherSystem* drake::systems::DiagramBuilder<double>::AddSystem<drake::systems::lcm::LcmPublisherSystem>(std::unique_ptr<drake::systems::lcm::LcmPublisherSystem, std::default_delete<drake::systems::lcm::LcmPublisherSystem> >)
0000000000074a60  w    F .text	0000000000000018              fmt::FormatError::~FormatError()
0000000000074230  w    F .text	000000000000003f              drake::systems::PeriodicEventData::DoClone() const
00000000000bf0f0  w    F .text	000000000000054f              drake::systems::Diagram<drake::symbolic::Expression>::GetDirectFeedthroughs() const
00000000000c2610  w    F .text	0000000000000141              drake::systems::lcm::Serializer<drake::lcmt_iiwa_status>::Serialize(drake::systems::AbstractValue const&, std::vector<unsigned char, std::allocator<unsigned char> >*) const
00000000003116d0  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>
00000000003127d8  w    O .data.rel.ro	0000000000000018              typeinfo for std::_Sp_counted_ptr_inplace<spdlog::sinks::stderr_sink<std::mutex>, std::allocator<spdlog::sinks::stderr_sink<std::mutex> >, (__gnu_cxx::_Lock_policy)2>
0000000000312e50  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>
0000000000312da0  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>
00000000000745b0  w    F .text	000000000000000f              drake::systems::PeriodicEventData::~PeriodicEventData()
00000000000f1180  w    O .rodata	000000000000003e              typeinfo name for drake::systems::VectorBase<double>& (*)(drake::systems::ContinuousState<double>*)
00000000000ef0e0  w    O .rodata	0000000000000078              typeinfo name for drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int) const
0000000000312288  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::r_formatter
0000000000310b38  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::State<drake::symbolic::Expression> const& (int)
000000000007f6c0  w    F .text	000000000000018f              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetDefaultState(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000aca10  w    F .text	0000000000001442              drake::systems::Diagram<drake::symbolic::Expression>::Initialize(std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> >)
00000000000f1b20  w    O .rodata	000000000000001b              typeinfo name for drake::systems::System<double>
0000000000316758  w    O .data	0000000000000008              .hidden DW.ref._ZTISt9exception
0000000000074730  w    F .text	0000000000000024              drake::systems::Parameters<double>::~Parameters()
00000000000d7ce0 g     F .text	00000000000001df              drake::examples::kuka_iiwa_arm::IiwaStatusSender::OutputStatus(drake::systems::Context<double> const&, drake::lcmt_iiwa_status*) const
00000000000e2c50  w    F .text	000000000000000a              std::_Sp_counted_ptr_inplace<RigidBodyFrame<double>, Eigen::aligned_allocator<RigidBodyFrame<double> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
0000000000079e30  w    F .text	000000000000005d              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoMapVelocityToQDot(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000840f0  w    F .text	0000000000000032              Eigen::internal::throw_std_bad_alloc()
000000000007be40  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::State<double> const*), drake::systems::State<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double> const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000b4b40  w    F .text	0000000000000144              void std::vector<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::emplace_back<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > >(std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >&&)
0000000000071ad0  w    F .text	0000000000000037              std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}> const&, std::_Manager_operation)
0000000000073f60  w    F .text	000000000000002a              drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramOutput()
0000000000089980  w    F .text	0000000000000033              drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::CalcInequalityConstraint(Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>*) const
0000000000000000       F *UND*	0000000000000000              drake::systems::RigidBodyPlant<double>::get_rigid_body_tree() const
00000000000e4d20  w    F .text	0000000000000178              Eigen::internal::gemm_pack_lhs<double, long, Eigen::internal::const_blas_data_mapper<double, long, 0>, 4, 2, 0, false, false>::operator()(double*, Eigen::internal::const_blas_data_mapper<double, long, 0> const&, long, long, long, long)
00000000000e30f0  w    F .text	0000000000000063              std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()
0000000000310e98  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::WitnessTriggeredEventData<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000f38a0  w    O .rodata	000000000000007f              typeinfo name for drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000310d00  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramContinuousState<drake::symbolic::Expression>
0000000000000000       O *UND*	0000000000000000              vtable for __cxxabiv1::__pointer_type_info@@CXXABI_1.3
00000000000d55e0  w    F .text	0000000000000037              drake::systems::Value<drake::systems::BasicVector<double> >::~Value()
00000000000bc310  w    F .text	000000000000000a              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetFromVector(Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)
000000000007cef0  w    F .text	0000000000000049              drake::systems::Supervector<double>::~Supervector()
0000000000000000       F *UND*	0000000000000000              syscall@@GLIBC_2.2.5
0000000000312bf8  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >
00000000000b2430  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::BasicVector<drake::symbolic::Expression>, std::default_delete<drake::systems::BasicVector<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<drake::symbolic::Expression>, std::default_delete<drake::systems::BasicVector<drake::symbolic::Expression> > > > >::~vector()
0000000000071f70  w    F .text	0000000000000006              spdlog::details::v_formatter::~v_formatter()
00000000003122d0  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::z_formatter
0000000000311ae0  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000089920  w    F .text	0000000000000020              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~BasicVector()
0000000000083180  w    F .text	000000000000011f              drake::systems::DiagramContext<double>::~DiagramContext()
0000000000095130  w    F .text	000000000000004c              std::_Rb_tree<std::pair<drake::systems::System<double> const*, int>, std::pair<drake::systems::System<double> const*, int>, std::_Identity<std::pair<drake::systems::System<double> const*, int> >, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<double> const*, int> >*)
00000000000d6c60  w    F .text	00000000000000c9              drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >::~LeafEventCollection()
00000000000db660  w    F .text	00000000000000cb              void std::vector<drake::systems::UnrestrictedUpdateEvent<double> const*, std::allocator<drake::systems::UnrestrictedUpdateEvent<double> const*> >::emplace_back<drake::systems::UnrestrictedUpdateEvent<double> const*>(drake::systems::UnrestrictedUpdateEvent<double> const*&&)
0000000000072010  w    F .text	0000000000000006              spdlog::details::F_formatter::~F_formatter()
00000000000d61e0  w    F .text	00000000000000a4              drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::Clear()
0000000000316660 u     O .data	00000000000000a0              fmt::internal::BasicData<void>::POWERS_OF_10_64
00000000000f4e20  w    O .rodata	000000000000006e              typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*) const>
0000000000313480  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::full_formatter
000000000007d7e0  w    F .text	00000000000000fd              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::DoMerge(drake::systems::EventCollection<drake::systems::PublishEvent<double> > const&)
0000000000312760  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >
000000000009a090  w    F .text	000000000000085a              drake::systems::Simulator<double>::Simulator(drake::systems::System<double> const&, std::unique_ptr<drake::systems::Context<double>, std::default_delete<drake::systems::Context<double> > >)
0000000000087a90  w    F .text	0000000000000024              drake::systems::DiagramContext<drake::symbolic::Expression>::~DiagramContext()
00000000000f1a00  w    O .rodata	000000000000001a              typeinfo name for drake::systems::Value<int>
00000000000a29f0  w    F .text	0000000000000171              void std::vector<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::emplace_back<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > >(std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >&&)
0000000000311f60  w    O .data.rel.ro	0000000000000018              typeinfo for stx::bad_optional_access
0000000000314d80  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::LeafSystem<double>
000000000007f390  w    F .text	0000000000000073              drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoEval(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
00000000000ef2a0  w    O .rodata	0000000000000076              typeinfo name for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
000000000009d0f0  w    F .text	00000000000001ad              drake::systems::System<drake::symbolic::Expression>::~System()
0000000000000000       F *UND*	0000000000000000              drake::systems::AbstractValues::AbstractValues(std::vector<drake::systems::AbstractValue*, std::allocator<drake::systems::AbstractValue*> > const&)
00000000000ee700  w    O .rodata	0000000000000058              typeinfo name for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000c4350  w    F .text	00000000000001d6              drake::systems::System<double>::DoCheckValidContext(drake::systems::ContextBase const&) const
0000000000310ef8  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramCompositeEventCollection<double>
00000000000c68d0  w    F .text	00000000000001ca              drake::systems::Diagram<double>::DoGetWitnessFunctions(drake::systems::Context<double> const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*) const
00000000000956c0  w    F .text	000000000000006f              drake::systems::Diagram<double>::GetSystemIndexOrAbort(drake::systems::System<double> const*) const
0000000000314ec8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::LeafSystem<double>::MaybeDeclareVectorBaseInequalityConstraint(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, drake::systems::VectorBase<double> const&, std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)> const&)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}
0000000000000000       F *UND*	0000000000000000              std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@GLIBCXX_3.4.21
00000000000a2950  w    F .text	0000000000000089              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Diagram()
0000000000311208  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)
000000000009b5c0  w    F .text	00000000000003b1              spdlog::logger::_default_err_handler(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000f1f40  w    O .rodata	0000000000000045              typeinfo name for drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >
00000000000d8340  w    F .text	0000000000000141              drake::systems::LeafCompositeEventCollection<double>::LeafCompositeEventCollection()
00000000000edbe0  w    O .rodata	0000000000000064              typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > ()
0000000000000000       F *UND*	0000000000000000              drake::systems::SystemScalarConverter::SystemScalarConverter()
0000000000073110  w    F .text	0000000000000023              std::_Function_handler<drake::systems::ContinuousState<double> const& (drake::systems::DiagramContinuousState<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::ContinuousState<double> const& (drake::systems::DiagramContinuousState<double>::*)(int) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramContinuousState<double> const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
000000000007afc0  w    F .text	0000000000000079              std::_Function_base::_Base_manager<drake::systems::Diagram<drake::symbolic::Expression>::Initialize(std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> >)::{lambda(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::Diagram<drake::symbolic::Expression>::Initialize(std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> >)::{lambda(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>*)#1}> const&, std::_Manager_operation)
0000000000086380  w    F .text	00000000000000a5              std::unique_ptr<drake::systems::lcm::LcmSubscriberSystem, std::default_delete<drake::systems::lcm::LcmSubscriberSystem> > drake::systems::lcm::LcmSubscriberSystem::Make<drake::lcmt_iiwa_command>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, drake::lcm::DrakeLcmInterface*)
00000000000b3d60  w    F .text	0000000000000098              std::_Rb_tree_iterator<std::pair<int const, int> > std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_emplace_equal<drake::TypeSafeIndex<drake::systems::InputPortTag>&, drake::TypeSafeIndex<drake::systems::OutputPortTag>&>(drake::TypeSafeIndex<drake::systems::InputPortTag>&, drake::TypeSafeIndex<drake::systems::OutputPortTag>&)
0000000000072a20  w    F .text	000000000000004f              drake::systems::Parameters<drake::symbolic::Expression>::~Parameters()
000000000008d220  w    F .text	0000000000000098              std::_Hashtable<drake::systems::SystemScalarConverter::Key, std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> >, std::allocator<std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> > >, std::__detail::_Select1st, std::equal_to<drake::systems::SystemScalarConverter::Key>, drake::systems::SystemScalarConverter::KeyHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()
0000000000074ac0  w    F .text	0000000000000018              fmt::internal::RuntimeError::~RuntimeError()
0000000000073480  w    F .text	0000000000000060              drake::systems::State<drake::symbolic::Expression>::~State()
0000000000071710  w    F .text	000000000000001a              std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy()
00000000000f14b0  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::A_formatter
00000000000c86c0  w    F .text	0000000000000345              drake::systems::DiagramContinuousState<drake::symbolic::Expression>::DiagramContinuousState(std::vector<drake::systems::ContinuousState<drake::symbolic::Expression>*, std::allocator<drake::systems::ContinuousState<drake::symbolic::Expression>*> >)
00000000000afc50  w    F .text	00000000000002e3              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoMapVelocityToQDot(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000094c40  w    F .text	000000000000013c              drake::examples::kuka_iiwa_arm::IiwaCommandReceiver* drake::systems::DiagramBuilder<double>::AddSystem<drake::examples::kuka_iiwa_arm::IiwaCommandReceiver, int const&>(int const&)
00000000000e28e0  w    F .text	0000000000000353              drake::systems::LeafContext<double>::DoCloneWithoutPointers() const
0000000000316be8 u     O .bss	0000000000000008              drake::lcmt_iiwa_status::getHash()::hash
0000000000071ff0  w    F .text	0000000000000006              spdlog::details::p_formatter::~p_formatter()
00000000000d9020  w    F .text	0000000000000195              std::_Function_handler<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > (), drake::systems::LeafSystem<double>::DeclareAbstractOutputPort<drake::examples::kuka_iiwa_arm::IiwaStatusSender, drake::lcmt_iiwa_status>(drake::lcmt_iiwa_status (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)() const, void (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)(drake::systems::Context<double> const&, drake::lcmt_iiwa_status*) const)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
00000000000eedc0  w    O .rodata	0000000000000051              typeinfo name for drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*) const
00000000000f1e00  w    O .rodata	0000000000000022              typeinfo name for drake::systems::PublishEvent<double>
000000000007c510  w    F .text	0000000000000061              drake::systems::BasicVector<double>::GetAtIndex(int)
000000000008ffc0  w    F .text	00000000000000cf              Eigen::internal::redux_impl<Eigen::internal::scalar_min_op<double, double>, Eigen::internal::redux_evaluator<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, 3, 0>::run(Eigen::internal::redux_evaluator<Eigen::Matrix<double, -1, 1, 0, -1, 1> > const&, Eigen::internal::scalar_min_op<double, double> const&)
0000000000072b30  w    F .text	000000000000002a              std::_Function_handler<drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*), drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*&&)
0000000000089e60  w    F .text	000000000000009e              drake::systems::IntegratorBase<double>::~IntegratorBase()
0000000000310df8  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000d0b00  w    F .text	0000000000000097              drake::systems::Value<drake::lcmt_iiwa_status>::SetFromOrThrow(drake::systems::AbstractValue const&)
00000000000f0180  w    O .rodata	0000000000000080              typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*) const>
000000000009cf90  w    F .text	0000000000000153              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::Diagram<drake::symbolic::Expression> >()
0000000000086840  w    F .text	0000000000000030              spdlog::details::B_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000a65b0  w    F .text	00000000000009d4              std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> > drake::systems::Diagram<double>::ConvertScalarType<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >() const
0000000000086750  w    F .text	0000000000000061              void fmt::Buffer<char>::append<char>(char const*, char const*)
000000000009c0e0  w    F .text	00000000000007b5              drake::systems::DiagramBuilder<double>::ThrowIfAlgebraicLoopsExist() const
0000000000074690  w    F .text	0000000000000024              drake::systems::ContinuousState<double>::~ContinuousState()
00000000000d6ae0  w    F .text	00000000000000a4              drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >::Clear()
000000000007c9b0  w    F .text	0000000000000069              drake::systems::Subvector<drake::symbolic::Expression>::GetAtIndex(int) const
00000000000d5530  w    F .text	0000000000000024              drake::systems::DiscreteUpdateEvent<double>::~DiscreteUpdateEvent()
000000000009da80  w    F .text	000000000000013c              void drake::systems::SystemScalarConverter::Add<double, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)
00000000000d5180  w    F .text	000000000000000b              drake::systems::DiscreteUpdateEvent<double>::is_discrete_update() const
00000000003138a8  w    O .data.rel.ro	00000000000001c8              vtable for drake::systems::System<drake::symbolic::Expression>
000000000007a710  w    F .text	0000000000000032              drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~InputPortDescriptor()
0000000000000000       O *UND*	0000000000000000              typeinfo for std::exception@@GLIBCXX_3.4
00000000000bf640  w    F .text	00000000000001c6              void drake::systems::ContinuousState<drake::symbolic::Expression>::SetFromGeneric<drake::symbolic::Expression>(drake::systems::ContinuousState<drake::symbolic::Expression> const&)
0000000000071f50  w    F .text	0000000000000006              spdlog::details::full_formatter::~full_formatter()
0000000000311878  w    O .data.rel.ro	0000000000000028              vtable for drake::systems::DiagramContinuousState<drake::symbolic::Expression>
0000000000312f50  w    O .data.rel.ro	0000000000000028              vtable for fmt::SystemError
0000000000079dd0  w    F .text	000000000000005d              drake::systems::System<double>::DoMapQDotToVelocity(drake::systems::Context<double> const&, Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<double>*) const
000000000008a9e0  w    F .text	000000000000003a              drake::systems::VectorBase<drake::symbolic::Expression>::CalcInequalityConstraint(Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>*) const
000000000008c0a0  w    F .text	000000000000003c              spdlog::details::H_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000312b10  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::OutputPort<drake::symbolic::Expression>
000000000008fc40  w    F .text	000000000000000c              non-virtual thunk to drake::systems::Diagram<double>::~Diagram()
00000000000a4020  w    F .text	000000000000006f              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetSystemIndexOrAbort(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
0000000000311560  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::State<drake::symbolic::Expression>& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int)>
00000000000cd980  w    F .text	000000000000005f              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoClone() const
00000000000720c0  w    F .text	0000000000000006              spdlog::details::C_formatter::~C_formatter()
000000000007c7f0  w    F .text	0000000000000069              drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetAtIndex(int) const
0000000000000000       F *UND*	0000000000000000              std::runtime_error::runtime_error(char const*)@@GLIBCXX_3.4.21
0000000000311370  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::State<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double>*) const
0000000000072130  w    F .text	0000000000000006              spdlog::details::level_formatter::~level_formatter()
0000000000000000       F *UND*	0000000000000000              drake::multibody::AddFlatTerrainToWorld(RigidBodyTree<double>*, double, double)
00000000000b41f0  w    F .text	0000000000000648              drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiagramCompositeEventCollection(std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >)
000000000007f290  w    F .text	0000000000000073              drake::systems::DiagramOutputPort<drake::symbolic::Expression>::DoEval(drake::systems::Context<drake::symbolic::Expression> const&) const
00000000000ae7b0  w    F .text	0000000000000025              std::_Function_handler<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&), drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)
0000000000000000       F *UND*	0000000000000000              drake::systems::SystemImpl::GetMemoryObjectName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, long)
000000000007b460  w    F .text	000000000000001e              drake::systems::SystemBase::GetSystemType[abi:cxx11]() const
000000000008c530  w    F .text	000000000000006c              spdlog::details::r_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000086aa0  w    F .text	000000000000001c              drake::systems::Context<drake::symbolic::Expression>::set_time(drake::symbolic::Expression const&)
0000000000000000       F *UND*	0000000000000000              std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@GLIBCXX_3.4.21
00000000003113e8  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::State<double> const& (drake::systems::DiagramState<double>::*)(int) const
00000000000ba140  w    F .text	0000000000000219              drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetPortIdString() const
00000000000dddd0  w    F .text	0000000000000192              drake::systems::UnrestrictedUpdateEvent<double>::add_to_composite(drake::systems::CompositeEventCollection<double>*) const
00000000003167e0 u     O .bss	0000000000000020              drake::NiceTypeName::Get<drake::systems::BasicVector<double> >()::canonical[abi:cxx11]
0000000000075ff0  w    F .text	000000000000005d              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcWitnessValue(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
0000000000082810  w    F .text	00000000000003f6              drake::systems::Diagram<double>::DoCalcNextUpdateTime(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*, double*) const
0000000000090090  w    F .text	0000000000000186              void drake::systems::ContinuousState<double>::SetFromGeneric<double>(drake::systems::ContinuousState<double> const&)
0000000000074700  w    F .text	0000000000000024              drake::systems::State<double>::~State()
0000000000000000       F *UND*	0000000000000000              __stack_chk_fail@@GLIBC_2.4
00000000000c4d60  w    F .text	0000000000000201              drake::systems::DiagramDiscreteValues<double>::DiagramDiscreteValues(std::vector<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > > > >)
00000000000ee1c0  w    O .rodata	0000000000000032              typeinfo name for drake::systems::State<drake::symbolic::Expression>
0000000000000000       F *UND*	0000000000000000              drake::systems::detail::ModelValues::CloneModel(int) const
0000000000314d50  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::LeafOutputPort<double>
000000000009d540  w    F .text	000000000000005e              std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)>::function(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)
0000000000310a58  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::ContinuousState<double> const* (drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*)
00000000000721d0  w    F .text	0000000000000020              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcNonConservativePower(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
00000000000b17d0  w    F .text	0000000000000648              drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::DiagramCompositeEventCollection(std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, std::default_delete<drake::systems::CompositeEventCollection<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, std::default_delete<drake::systems::CompositeEventCollection<drake::symbolic::Expression> > > > >)
00000000000b4030  w    F .text	00000000000001be              std::unique_ptr<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > drake::dynamic_pointer_cast_or_throw<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, drake::systems::ContextBase>(std::unique_ptr<drake::systems::ContextBase, std::default_delete<drake::systems::ContextBase> >&&)
00000000000ee820  w    O .rodata	000000000000005e              typeinfo name for drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000d7ec0  w    F .text	0000000000000034              drake::systems::Value<drake::systems::BasicVector<double> >::GetNiceTypeName() const
0000000000000000       F *UND*	0000000000000000              memset@@GLIBC_2.2.5
00000000000be350  w    F .text	0000000000000226              drake::systems::Diagram<double>::EvalConnectedSubsystemInputPort(drake::systems::ContextBase const&, drake::systems::InputPortBase const&) const
0000000000000000       F *UND*	0000000000000000              drake::systems::InputPortBase::~InputPortBase()
00000000000d2c90  w    F .text	00000000000008d2              drake::systems::ContinuousState<drake::symbolic::Expression>::ContinuousState(std::unique_ptr<drake::systems::VectorBase<drake::symbolic::Expression>, std::default_delete<drake::systems::VectorBase<drake::symbolic::Expression> > >, int, int, int)
00000000000d8060 g     F .text	00000000000002e0              drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::OutputExternalTorque(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*) const
0000000000082640  w    F .text	0000000000000082              drake::systems::ContextBase::GetSystemName[abi:cxx11]() const
0000000000088120  w    F .text	0000000000000355              spdlog::async_logger::~async_logger()
00000000000e34b0  w    F .text	0000000000000182              void std::vector<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >, std::allocator<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > > >::_M_emplace_back_aux<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > >(std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >&&)
00000000000b8a80  w    F .text	00000000000007c7              drake::systems::Diagram<double>::SetRandomParameters(drake::systems::Context<double> const&, drake::systems::Parameters<double>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
00000000000f3d40  w    O .rodata	000000000000008a              typeinfo name for drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000071940  w    F .text	0000000000000035              std::_Function_handler<drake::systems::Context<double>& (drake::systems::DiagramContext<double>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<double>& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>::_M_invoke(std::_Any_data const&, drake::systems::DiagramContext<double>*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000072770  w    F .text	0000000000000010              drake::systems::System<drake::symbolic::Expression>::AllocateDiscreteVariables() const
0000000000073f90  w    F .text	000000000000002a              drake::systems::internal::DiagramOutput<double>::~DiagramOutput()
0000000000072750  w    F .text	0000000000000006              drake::systems::System<double>::GetGraphvizOutputPortToken(drake::systems::OutputPort<double> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000d2140  w    F .text	0000000000000123              drake::systems::BasicVector<drake::symbolic::Expression>::Clone() const
000000000007c710  w    F .text	0000000000000069              drake::systems::Subvector<double>::GetAtIndex(int) const
00000000000af150  w    F .text	00000000000000b4              drake::systems::Subvector<drake::symbolic::Expression>::Subvector(drake::systems::VectorBase<drake::symbolic::Expression>*, int, int)
0000000000310ac8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
00000000003117b8  w    O .data.rel.ro	0000000000000020              typeinfo for drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (*)(drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
0000000000000000       O *UND*	0000000000000000              typeinfo for std::out_of_range@@GLIBCXX_3.4
0000000000071f60  w    F .text	0000000000000006              spdlog::details::ch_formatter::~ch_formatter()
00000000003132a0  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::E_formatter
0000000000074540  w    F .text	000000000000000f              spdlog::details::B_formatter::~B_formatter()
00000000000724c0  w    F .text	0000000000000012              drake::systems::System<double>::DoGetTargetSystemContinuousState(drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*) const
0000000000310938  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (int)
0000000000000000       F *UND*	0000000000000000              std::thread::join()@@GLIBCXX_3.4.11
0000000000072070  w    F .text	0000000000000006              spdlog::details::H_formatter::~H_formatter()
00000000000f1fa0  w    O .rodata	0000000000000041              typeinfo name for drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >
000000000009f920  w    F .text	0000000000000089              std::vector<std::unique_ptr<drake::systems::SystemConstraint<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemConstraint<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::SystemConstraint<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemConstraint<drake::symbolic::Expression> > > > >::~vector()
0000000000310d30  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::State<drake::symbolic::Expression>
00000000000722e0  w    F .text	0000000000000047              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::HasEvents() const
00000000000869b0  w    F .text	0000000000000072              std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()
00000000000e4780  w    F .text	000000000000007f              std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)
00000000000b7050  w    F .text	000000000000013f              drake::systems::ContinuousState<double>::DoClone() const
00000000000df100  w    F .text	00000000000000f9              std::vector<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> >, std::allocator<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > > >::reserve(unsigned long)
00000000000729c0  w    F .text	0000000000000006              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetGraphvizFragment(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
0000000000311028  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::State<drake::symbolic::Expression>& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int)
000000000008a880  w    F .text	00000000000000c7              void Eigen::internal::destruct_elements_of_array<drake::symbolic::Expression>(drake::symbolic::Expression*, unsigned long)
0000000000072ba0  w    F .text	000000000000002a              std::_Function_handler<drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*), drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*&&)
0000000000071a80  w    F .text	0000000000000006              drake::systems::DiagramOutputPort<double>::~DiagramOutputPort()
0000000000074be0  w    F .text	0000000000000082              spdlog::sinks::base_sink<std::mutex>::log(spdlog::details::log_msg const&)
00000000000e4ea0  w    F .text	0000000000001559              Eigen::internal::gebp_kernel<double, double, long, Eigen::internal::blas_data_mapper<double, long, 0, 0>, 4, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<double, long, 0, 0> const&, double const*, double const*, long, long, long, double, long, long, long, long)
00000000000f2380  w    O .rodata	0000000000000052              typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double>*) const>
00000000003115d0  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*) const>
00000000000ae7e0  w    F .text	0000000000000087              drake::lcmt_iiwa_status::~lcmt_iiwa_status()
00000000000eea40  w    O .rodata	0000000000000035              typeinfo name for drake::systems::DiagramCompositeEventCollection<double>
0000000000072800  w    F .text	0000000000000012              drake::systems::System<drake::symbolic::Expression>::DoGetTargetSystemContinuousState(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*) const
000000000007a5b0  w    F .text	000000000000001f              drake::systems::System<drake::symbolic::Expression>::DoCalcPotentialEnergy(drake::systems::Context<drake::symbolic::Expression> const&) const
00000000003115a0  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::ContinuousState<drake::symbolic::Expression> const& (drake::systems::DiagramContinuousState<drake::symbolic::Expression>::*)(int) const>
00000000000744b0  w    F .text	000000000000000f              spdlog::details::M_formatter::~M_formatter()
0000000000094040  w    F .text	0000000000000854              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ScaleAndAddToVector(Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > const&, Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>, 0, Eigen::InnerStride<1> >) const
00000000003123b8  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::sinks::stderr_sink<std::mutex>
00000000000b14b0  w    F .text	0000000000000153              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::Context<drake::symbolic::Expression> >()
0000000000085450  w    F .text	0000000000000388              drake::systems::System<double>::get_output_port(int) const
00000000000c36d0  w    F .text	000000000000013f              std::_MakeUniq<drake::systems::DiagramState<double> >::__single_object std::make_unique<drake::systems::DiagramState<double>, int&>(int&)
0000000000072060  w    F .text	0000000000000006              spdlog::details::I_formatter::~I_formatter()
0000000000310948  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
000000000008e940  w    F .text	00000000000001c2              void std::vector<std::pair<drake::systems::PeriodicEventData, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, std::allocator<std::pair<drake::systems::PeriodicEventData, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > > > >::_M_emplace_back_aux<std::pair<drake::systems::PeriodicEventData, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > > >(std::pair<drake::systems::PeriodicEventData, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >&&)
0000000000000000       F *UND*	0000000000000000              drake::symbolic::operator+(drake::symbolic::Expression, drake::symbolic::Expression const&)
0000000000073b90  w    F .text	000000000000007b              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::~DiagramEventCollection()
00000000000f2c00  w    O .rodata	00000000000000c3              typeinfo name for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}
00000000000ba750  w    F .text	00000000000002d4              drake::systems::BasicVector<drake::symbolic::Expression>::set_value(Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)
00000000003136b0  w    O .data.rel.ro	0000000000000030              vtable for drake::systems::PeriodicEventData
0000000000000000       F *UND*	0000000000000000              std::__throw_bad_cast()@@GLIBCXX_3.4
000000000008eb10  w    F .text	000000000000009e              std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_get_insert_unique_pos(std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&)
000000000007a690  w    F .text	0000000000000018              drake::systems::InputPortDescriptor<drake::symbolic::Expression>::~InputPortDescriptor()
000000000007d1e0  w    F .text	00000000000000fd              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::DoMerge(drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > const&)
00000000000ee160  w    O .rodata	0000000000000043              typeinfo name for drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>
00000000000efa20  w    O .rodata	000000000000004a              typeinfo name for drake::systems::CompositeEventCollection<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*) const
00000000000d7a00  w    F .text	00000000000000d1              std::_Function_base::_Base_manager<drake::systems::LeafOutputPort<double>::set_calculation_function(std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>)::{lambda(drake::systems::Context<double> const&, drake::systems::AbstractValue*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::LeafOutputPort<double>::set_calculation_function(std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>)::{lambda(drake::systems::Context<double> const&, drake::systems::AbstractValue*)#1}> const&, std::_Manager_operation)
0000000000083bf0  w    F .text	000000000000003f              spdlog::details::async_log_helper::async_msg::~async_msg()
00000000000aef80  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > > > >::~vector()
0000000000312730  w    O .data.rel.ro	0000000000000018              typeinfo for std::_Sp_counted_ptr_inplace<spdlog::pattern_formatter, std::allocator<spdlog::pattern_formatter>, (__gnu_cxx::_Lock_policy)2>
0000000000074d30  w    F .text	000000000000002a              std::_Function_handler<void* (void const*), drake::systems::SystemScalarConverter::Add<double, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}>::_M_invoke(std::_Any_data const&, void const*&&)
000000000007eb10  w    F .text	000000000000007d              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::~DiagramEventCollection()
00000000000735e0  w    F .text	000000000000000d              std::_Function_handler<drake::systems::VectorBase<double>& (drake::systems::ContinuousState<double>*), drake::systems::VectorBase<double>& (*)(drake::systems::ContinuousState<double>*)>::_M_invoke(std::_Any_data const&, drake::systems::ContinuousState<double>*&&)
0000000000000000       F *UND*	0000000000000000              strlen@@GLIBC_2.2.5
000000000008f7d0  w    F .text	00000000000002da              std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > drake::systems::Diagram<double>::AllocateForcedEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >(std::function<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > (drake::systems::System<double> const*)>) const
00000000000a1520  w    F .text	00000000000000f1              void std::vector<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::emplace_back<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&>(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&)
00000000000728a0  w    F .text	0000000000000006              drake::systems::System<drake::symbolic::Expression>::DoGetPerStepEvents(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const
000000000007ab30  w    F .text	0000000000000089              std::_Function_base::_Base_manager<drake::systems::Simulator<double>::IsolateWitnessTriggers(std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*)::{lambda(double const&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::Simulator<double>::IsolateWitnessTriggers(std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*)::{lambda(double const&)#1}> const&, std::_Manager_operation)
000000000008e940  w    F .text	00000000000001c2              void std::vector<std::pair<drake::systems::PeriodicEventData, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, std::allocator<std::pair<drake::systems::PeriodicEventData, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > > > >::_M_emplace_back_aux<std::pair<drake::systems::PeriodicEventData, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > > >(std::pair<drake::systems::PeriodicEventData, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >&&)
0000000000310ab8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::VectorBase<drake::symbolic::Expression>& (drake::systems::ContinuousState<drake::symbolic::Expression>*)
00000000000c5be0  w    F .text	0000000000000201              drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>::DiagramDiscreteValues(std::vector<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > > > >)
0000000000085850  w    F .text	0000000000000a33              drake::systems::Diagram<double>::GetGraphvizFragment(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
000000000008d920  w    F .text	0000000000000045              drake::systems::DiscreteValues<double>::~DiscreteValues()
0000000000000000       F *UND*	0000000000000000              drake::systems::SystemScalarConverter::Insert(std::type_info const&, std::type_info const&, std::function<void* (void const*)> const&)
000000000007b540  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*), drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000003112f8  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)
0000000000074310  w    F .text	000000000000008b              fmt::internal::MemoryBuffer<char, 500ul, std::allocator<char> >::grow(unsigned long)
00000000000764f0  w    F .text	00000000000002b4              drake::systems::Diagram<drake::symbolic::Expression>::DoGetMutableTargetSystemContext(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*) const
00000000000864e0  w    F .text	0000000000000184              drake::systems::RigidBodyPlant<double>::torque_output_port() const
0000000000000000       O *UND*	0000000000000000              vtable for __cxxabiv1::__class_type_info@@CXXABI_1.3
0000000000312378  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::full_formatter
0000000000313de0  w    O .data.rel.ro	0000000000000070              vtable for drake::systems::DiagramContext<double>
00000000000bd740  w    F .text	0000000000000104              __gnu_cxx::__normal_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > > std::__find_if<__gnu_cxx::__normal_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > >, __gnu_cxx::__ops::_Iter_equals_val<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const> >(__gnu_cxx::__normal_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > >, __gnu_cxx::__normal_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > >, __gnu_cxx::__ops::_Iter_equals_val<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const>, std::random_access_iterator_tag)
0000000000000000       O *UND*	0000000000000000              vtable for std::bad_alloc@@GLIBCXX_3.4
0000000000075660  w    F .text	000000000000001b              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetParentPathname() const
0000000000073850  w    F .text	000000000000006b              drake::systems::BasicVector<drake::symbolic::Expression>::DoPlusEqScaled(std::initializer_list<std::pair<drake::symbolic::Expression, drake::systems::VectorBase<drake::symbolic::Expression> const&> > const&)
00000000000d54f0  w    F .text	0000000000000032              drake::systems::LeafCompositeEventCollection<double>::~LeafCompositeEventCollection()
0000000000092d90  w    F .text	00000000000000c6              drake::systems::System<double>::DoCalcVelocityChangeFromConstraintImpulses(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, -1, 0, -1, -1> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&) const
0000000000316aa0 u     O .bss	0000000000000020              drake::NiceTypeName::Get<drake::systems::ContextBase>()::canonical[abi:cxx11]
00000000003109e8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (int)
00000000000d7ba0  w    F .text	0000000000000131              drake::systems::BasicVector<double> const* drake::systems::System<double>::EvalVectorInput<drake::systems::BasicVector>(drake::systems::Context<double> const&, int) const
00000000000720f0  w    F .text	0000000000000006              spdlog::details::b_formatter::~b_formatter()
00000000000d84e0  w    F .text	0000000000000029              drake::systems::DiscreteUpdateEvent<double>::DiscreteUpdateEvent(drake::systems::Event<double>::TriggerType const&)
00000000000a1420  w    F .text	00000000000000f1              void std::vector<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::emplace_back<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&>(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&)
0000000000084760  w    F .text	000000000000008a              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)
00000000000cd7e0  w    F .text	0000000000000191              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::BasicVector(int)
0000000000000000       F *UND*	0000000000000000              __cxa_guard_abort@@CXXABI_1.3
00000000003120a8  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::short_level_formatter
00000000000740e0  w    F .text	0000000000000047              drake::systems::Supervector<double>::~Supervector()
0000000000314c30  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >
0000000000073590  w    F .text	000000000000000d              std::_Function_handler<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*), drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (*)(drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)>::_M_invoke(std::_Any_data const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*&&)
0000000000312318  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::i_formatter
0000000000312448  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::EventData
00000000000832d0  w    F .text	000000000000012f              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramContext()
00000000000d0ab0  w    F .text	000000000000004d              drake::systems::Value<drake::lcmt_iiwa_command>::SetFromOrThrow(drake::systems::AbstractValue const&)
00000000000984e0  w    F .text	00000000000000b6              void fmt::BasicWriter<char>::write_str<char, fmt::FormatSpec>(fmt::internal::Value::StringValue<char> const&, fmt::FormatSpec const&)
00000000000ef680  w    O .rodata	000000000000009c              typeinfo name for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)
00000000000cec40  w    F .text	00000000000000e7              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetZero()
00000000000aff40  w    F .text	00000000000002e3              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoMapQDotToVelocity(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000086f00  w    F .text	0000000000000057              drake::systems::System<drake::symbolic::Expression>::DoCalcNextUpdateTime(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*, drake::symbolic::Expression*) const
00000000000793c0  w    F .text	00000000000002b4              drake::systems::Diagram<double>::DoGetMutableTargetSystemCompositeEventCollection(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*) const
00000000000f30c0  w    O .rodata	0000000000000039              typeinfo name for drake::systems::Context<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double> const*) const
00000000000bbe80  w    F .text	000000000000004c              std::_Rb_tree<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::_Identity<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::less<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >*)
0000000000000000       F *UND*	0000000000000000              drake::systems::OutputPortValue::Clone() const
00000000000f17f0  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::v_formatter
00000000000c3dc0  w    F .text	00000000000001ef              std::_Rb_tree<drake::systems::PeriodicEventData, std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > >, std::_Select1st<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > > >, drake::systems::PeriodicEventDataComparator, std::allocator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > > >, drake::systems::PeriodicEventData const&)
0000000000080fd0  w    F .text	0000000000000083              spdlog::pattern_formatter::~pattern_formatter()
0000000000312d60  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>
00000000000ed340  w    O .rodata	000000000000004b              typeinfo name for drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*)
0000000000311778  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*) const>
00000000003125a8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::DiagramBuilder<double>
00000000000c54a0  w    F .text	0000000000000201              drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiagramDiscreteValues(std::vector<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >)
00000000000dbed0  w    F .text	000000000000005e              std::function<void (drake::systems::Context<double> const&, drake::systems::UnrestrictedUpdateEvent<double> const&, drake::systems::State<double>*)>::function(std::function<void (drake::systems::Context<double> const&, drake::systems::UnrestrictedUpdateEvent<double> const&, drake::systems::State<double>*)> const&)
00000000003126e0  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::Context<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double>*) const
0000000000095330  w    F .text	000000000000004c              std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, int> >*)
0000000000313390  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::t_formatter
0000000000000000       F *UND*	0000000000000000              std::__throw_system_error(int)@@GLIBCXX_3.4.11
0000000000000000       F *UND*	0000000000000000              drake::detail::AssertionFailed(char const*, char const*, char const*, int)
00000000000af930  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
0000000000074060  w    F .text	0000000000000078              drake::systems::DiagramState<double>::~DiagramState()
00000000000cd7e0  w    F .text	0000000000000191              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::BasicVector(int)
0000000000071d00  w    F .text	0000000000000036              std::_Function_handler<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&)
000000000007bd80  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::State<double>*), drake::systems::State<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double>*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000c5be0  w    F .text	0000000000000201              drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>::DiagramDiscreteValues(std::vector<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > > > >)
00000000000c8a10  w    F .text	000000000000027a              drake::systems::Diagram<drake::symbolic::Expression>::AllocateTimeDerivatives() const
000000000007bc00  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*), drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000311608  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000721f0  w    F .text	0000000000000006              drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Subvector()
00000000000ecf00  w    O .rodata	000000000000001e              typeinfo name for drake::systems::State<double>& (int)
00000000000cc240  w    F .text	00000000000000e7              drake::systems::BasicVector<drake::symbolic::Expression>::BasicVector(int)
00000000000a39e0  w    F .text	0000000000000109              std::vector<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > > >::~vector()
0000000000000000       F *UND*	0000000000000000              std::runtime_error::~runtime_error()@@GLIBCXX_3.4
00000000000ed6a0  w    O .rodata	0000000000000065              typeinfo name for drake::systems::Context<drake::symbolic::Expression> const& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
0000000000088970  w    F .text	0000000000000144              void std::vector<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >, std::allocator<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > > >::emplace_back<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > >(std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >&&)
0000000000311a20  w    O .data.rel.ro	0000000000000028              vtable for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
000000000007a550  w    F .text	000000000000001f              drake::systems::System<drake::symbolic::Expression>::DoCalcNonConservativePower(drake::systems::Context<drake::symbolic::Expression> const&) const
00000000000e2c40  w    F .text	0000000000000006              std::_Sp_counted_ptr_inplace<RigidBodyFrame<double>, Eigen::aligned_allocator<RigidBodyFrame<double> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
0000000000072870  w    F .text	0000000000000006              drake::systems::System<drake::symbolic::Expression>::GetGraphvizInputPortToken(drake::systems::InputPortDescriptor<drake::symbolic::Expression> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000ecf20  w    O .rodata	0000000000000032              typeinfo name for drake::systems::State<double> const* (drake::systems::System<double> const&, drake::systems::State<double> const*)
00000000000bbda0  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
00000000000d6680  w    F .text	0000000000000073              drake::systems::LeafSystemOutput<double>::~LeafSystemOutput()
00000000000873c0  w    F .text	0000000000000254              drake::systems::VectorBase<drake::symbolic::Expression>::ScaleAndAddToVector(drake::symbolic::Expression const&, Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>, 0, Eigen::InnerStride<1> >) const
0000000000000000       O *UND*	0000000000000000              vtable for __cxxabiv1::__function_type_info@@CXXABI_1.3
00000000000f3ee0  w    O .rodata	0000000000000060              typeinfo name for drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >
00000000000f29c0  w    O .rodata	0000000000000034              typeinfo name for drake::systems::Diagram<drake::symbolic::Expression>
0000000000094ff0  w    F .text	000000000000013c              drake::examples::kuka_iiwa_arm::IiwaStatusSender* drake::systems::DiagramBuilder<double>::AddSystem<drake::examples::kuka_iiwa_arm::IiwaStatusSender, int const&>(int const&)
00000000000ae7e0  w    F .text	0000000000000087              drake::lcmt_iiwa_status::~lcmt_iiwa_status()
0000000000312e28  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::Context<drake::symbolic::Expression> const& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const
0000000000000000       F *UND*	0000000000000000              sqrt@@GLIBC_2.2.5
0000000000072120  w    F .text	0000000000000006              spdlog::details::short_level_formatter::~short_level_formatter()
0000000000079b50  w    F .text	0000000000000028              drake::systems::BasicVector<double>::~BasicVector()
00000000000f39c0  w    O .rodata	0000000000000038              typeinfo name for drake::systems::OutputPort<drake::symbolic::Expression>
00000000000c23d0  w    F .text	0000000000000231              drake::systems::Value<drake::lcmt_iiwa_status> const* drake::systems::AbstractValue::DownCastOrThrow<drake::lcmt_iiwa_status>() const
00000000000d2c90  w    F .text	00000000000008d2              drake::systems::ContinuousState<drake::symbolic::Expression>::ContinuousState(std::unique_ptr<drake::systems::VectorBase<drake::symbolic::Expression>, std::default_delete<drake::systems::VectorBase<drake::symbolic::Expression> > >, int, int, int)
0000000000072c90  w    F .text	0000000000000023              std::_Function_handler<drake::systems::ContinuousState<drake::symbolic::Expression> const& (drake::systems::DiagramContinuousState<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::ContinuousState<drake::symbolic::Expression> const& (drake::systems::DiagramContinuousState<drake::symbolic::Expression>::*)(int) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramContinuousState<drake::symbolic::Expression> const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
00000000003140e8  w    O .data.rel.ro	0000000000000050              vtable for drake::systems::RungeKutta3Integrator<double>
0000000000314758  w    O .data.rel.ro	0000000000000070              vtable for drake::systems::DiagramContext<drake::symbolic::Expression>
0000000000096520  w    F .text	000000000000005e              std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_erase(std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*)
0000000000071a20  w    F .text	0000000000000036              std::_Function_handler<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > (drake::systems::System<double> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > (drake::systems::System<double>::*)() const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&)
00000000000727e0  w    F .text	0000000000000012              drake::systems::System<drake::symbolic::Expression>::DoGetTargetSystemState(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*) const
0000000000311fc0  w    O .data.rel.ro	0000000000000010              typeinfo for fmt::BasicWriter<char>
0000000000094ff0  w    F .text	000000000000013c              drake::examples::kuka_iiwa_arm::IiwaStatusSender* drake::systems::DiagramBuilder<double>::AddSystem<drake::examples::kuka_iiwa_arm::IiwaStatusSender, int const&>(int const&)
0000000000314b78  w    O .data.rel.ro	0000000000000038              vtable for drake::systems::DiagramOutputPort<drake::symbolic::Expression>
00000000000d9210  w    F .text	000000000000028c              std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_M_fill_insert(__gnu_cxx::__normal_iterator<std::pair<int, int>*, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >, unsigned long, std::pair<int, int> const&)
0000000000000000       F *UND*	0000000000000000              fflush@@GLIBC_2.2.5
00000000003127f0  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Diagram<double>::Initialize(std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> >)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}
00000000000f0580  w    O .rodata	000000000000008f              typeinfo name for std::_Simple_type_wrapper<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)>
0000000000072e80  w    F .text	000000000000002a              std::_Function_handler<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&)
00000000000a5030  w    F .text	000000000000006f              drake::systems::Diagram<drake::symbolic::Expression>::GetSystemIndexOrAbort(drake::systems::System<drake::symbolic::Expression> const*) const
0000000000312690  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::EventCollection<drake::systems::PublishEvent<double> >
00000000000e3a10  w    F .text	000000000000028c              decltype(auto) transformSpatialForce<Eigen::Matrix<double, 6, 6, 0, 6, 6> >(Eigen::Transform<Eigen::Matrix<double, 6, 6, 0, 6, 6>::Scalar, 3, 1, 0> const&, Eigen::MatrixBase<Eigen::Matrix<double, 6, 6, 0, 6, 6> > const&)
00000000003146e8  w    O .data.rel.ro	0000000000000070              vtable for drake::systems::Context<drake::symbolic::Expression>
0000000000096800  w    F .text	0000000000000191              void std::vector<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg>, std::allocator<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg> > >::_M_emplace_back_aux<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg> >(std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg>&&)
0000000000310b78  w    O .data.rel.ro	0000000000000010              typeinfo for Eigen::internal::auto_diff_special_op<Eigen::Matrix<double, -1, 1, 0, -1, 1>, false>
0000000000090590  w    F .text	0000000000000131              drake::systems::System<double>::CalcUnrestrictedUpdate(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > const&, drake::systems::State<double>*) const
0000000000074910  w    F .text	0000000000000024              drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Parameters()
00000000000f48e0  w    O .rodata	00000000000000b1              typeinfo name for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>
00000000000f37c0  w    O .rodata	000000000000005e              typeinfo name for drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000d65b0  w    F .text	00000000000000c9              drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::~LeafEventCollection()
000000000008c120  w    F .text	000000000000003e              spdlog::details::m_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000000000       F *UND*	0000000000000000              std::ctype<char>::_M_widen_init() const@@GLIBCXX_3.4.11
0000000000312b98  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
00000000000a3fd0  w    F .text	0000000000000046              std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_insert_node(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >*)
00000000000b4f60  w    F .text	00000000000001fb              drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Parameters()
000000000007cb70  w    F .text	000000000000007a              drake::systems::internal::DiagramOutput<drake::symbolic::Expression>::get_mutable_port_value(int)
0000000000071f80  w    F .text	0000000000000006              spdlog::details::i_formatter::~i_formatter()
00000000000f3e40  w    O .rodata	000000000000003f              typeinfo name for drake::systems::DiagramOutputPort<drake::symbolic::Expression>
00000000000ed100  w    O .rodata	0000000000000033              typeinfo name for drake::systems::CompositeEventCollection<double> const& (int)
0000000000072ac0  w    F .text	000000000000004f              drake::systems::Parameters<double>::~Parameters()
00000000000c2390  w    F .text	0000000000000034              drake::systems::Value<drake::lcmt_iiwa_status>::GetNiceTypeName() const
00000000000ae8b0  w    F .text	000000000000003f              drake::systems::Value<drake::lcmt_iiwa_status>::~Value()
0000000000316ae8 g     O .bss	0000000000000008              fLS::FLAGS_urdf[abi:cxx11]
00000000000f49a0  w    O .rodata	00000000000000b5              typeinfo name for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>
00000000000ed7a0  w    O .rodata	00000000000000a2              typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > ()
00000000000ecda0  w    O .rodata	0000000000000086              typeinfo name for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)
00000000000f3a00  w    O .rodata	0000000000000052              typeinfo name for drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >
00000000000b80c0  w    F .text	00000000000001fb              drake::systems::Parameters<double>::Parameters()
0000000000072820  w    F .text	0000000000000012              drake::systems::System<drake::symbolic::Expression>::DoGetMutableTargetSystemCompositeEventCollection(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const
00000000000f5d60  w    O .rodata	0000000000000024              typeinfo name for drake::systems::LeafOutputPort<double>
000000000009b300  w    F .text	00000000000002bb              void spdlog::logger::log<char const*>(spdlog::level::level_enum, char const*, char const* const&)
0000000000096e80  w    F .text	000000000000006b              fmt::BasicWriter<char>::write(fmt::BasicCStringRef<char>, fmt::ArgList)
000000000009adf0  w    F .text	00000000000002ea              void spdlog::logger::log<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(spdlog::level::level_enum, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
000000000007ec90  w    F .text	000000000000007d              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::~DiagramEventCollection()
000000000008beb0  w    F .text	0000000000000085              spdlog::details::f_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000074420  w    F .text	000000000000000f              spdlog::details::T_formatter::~T_formatter()
00000000000d8570  w    F .text	00000000000000c9              std::_Function_base::_Base_manager<drake::systems::LeafSystem<double>::MaybeDeclareVectorBaseInequalityConstraint(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, drake::systems::VectorBase<double> const&, std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)> const&)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::LeafSystem<double>::MaybeDeclareVectorBaseInequalityConstraint(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, drake::systems::VectorBase<double> const&, std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)> const&)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}> const&, std::_Manager_operation)
0000000000000000       F *UND*	0000000000000000              operator delete(void*)@@GLIBCXX_3.4
0000000000316ba8 u     O .bss	0000000000000008              guard variable for drake::systems::internal::SystemMessageInterface::no_name()::dummy
00000000003116e0  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::Supervector<double>
0000000000310a48  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::State<double> const& (int)
0000000000312ee0  w    O .data.rel.ro	0000000000000020              vtable for fmt::BasicMemoryWriter<char, std::allocator<char> >
0000000000089940  w    F .text	000000000000003a              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~BasicVector()
0000000000310fd8  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::Context<drake::symbolic::Expression>& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000000eea80  w    O .rodata	0000000000000022              typeinfo name for drake::systems::SystemOutput<double>
0000000000313228  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::e_formatter
0000000000311258  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const
00000000000ed4e0  w    O .rodata	0000000000000042              typeinfo name for drake::systems::ContinuousState<drake::symbolic::Expression> const& (int)
000000000008a1a0  w    F .text	0000000000000033              drake::systems::CompositeEventCollection<double>::Clear()
00000000000e24b0  w    F .text	000000000000042f              drake::systems::Parameters<double>::Clone() const
00000000000f3de0  w    O .rodata	0000000000000041              typeinfo name for drake::systems::InputPortDescriptor<drake::symbolic::Expression>
0000000000074400  w    F .text	000000000000000f              spdlog::details::t_formatter::~t_formatter()
00000000000d8490  w    F .text	0000000000000043              drake::systems::LeafSystem<double>::AllocateCompositeEventCollection() const
00000000000ee320  w    O .rodata	000000000000006c              typeinfo name for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000310ee0  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::Value<drake::lcmt_iiwa_command>
0000000000311680  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>
0000000000000000       O *UND*	0000000000000000              typeinfo for int@@CXXABI_1.3
0000000000075d30  w    F .text	00000000000002b4              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetTargetSystemContext(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
00000000000efd40  w    O .rodata	000000000000006b              typeinfo name for std::_Simple_type_wrapper<drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const>
00000000000bddb0  w    F .text	0000000000000156              drake::systems::Value<drake::lcmt_iiwa_status>::Clone() const
0000000000312650  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::ContinuousState<double>
0000000000089540  w    F .text	0000000000000101              spdlog::logger::_set_pattern(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, spdlog::pattern_time_type)
00000000000f1a20  w    O .rodata	000000000000001b              typeinfo name for drake::systems::EventData
0000000000072080  w    F .text	0000000000000006              spdlog::details::d_formatter::~d_formatter()
00000000000c6640  w    F .text	0000000000000287              void std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >::_M_range_insert<__gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<double> const**, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > > >(__gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<double> const**, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > >, __gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<double> const**, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > >, __gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<double> const**, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > >, std::forward_iterator_tag)
00000000000c8120  w    F .text	000000000000018d              drake::systems::ContinuousState<drake::symbolic::Expression>::ContinuousState(std::unique_ptr<drake::systems::VectorBase<drake::symbolic::Expression>, std::default_delete<drake::systems::VectorBase<drake::symbolic::Expression> > >)
0000000000312408  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::State<double>
00000000000af9a0  w    F .text	0000000000000032              drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramCompositeEventCollection()
00000000000f1490  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::a_formatter
0000000000071fe0  w    F .text	0000000000000006              spdlog::details::r_formatter::~r_formatter()
00000000000b7d10  w    F .text	00000000000003a7              drake::systems::DiscreteValues<double>::DoClone() const
00000000000841b0  w    F .text	000000000000009f              drake::systems::VectorBase<double>::CopyToVector() const
0000000000311d68  w    O .data.rel.ro	0000000000000078              vtable for drake::systems::Subvector<double>
00000000003109a8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (int)
00000000000afb90  w    F .text	00000000000000b4              drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Subvector(drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, int, int)
0000000000084eb0  w    F .text	00000000000000a6              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)
0000000000075600  w    F .text	000000000000001b              drake::systems::Diagram<double>::GetParentPathname() const
000000000008d580  w    F .text	000000000000003f              std::_MakeUniq<drake::systems::Diagram<double>::Blueprint>::__single_object std::make_unique<drake::systems::Diagram<double>::Blueprint>()
00000000000d5780  w    F .text	0000000000000068              drake::systems::LeafSystem<double>::DoAllocateInputAbstract(drake::systems::InputPortDescriptor<double> const&) const
00000000000f3c20  w    O .rodata	000000000000007f              typeinfo name for drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000086bd0  w    F .text	0000000000000083              drake::symbolic::Expression::Expression()
00000000000a7190  w    F .text	000000000000009e              std::_Rb_tree<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_get_insert_unique_pos(std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&)
00000000000b3ed0  w    F .text	0000000000000153              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >()
0000000000077fb0  w    F .text	00000000000002b4              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetTargetSystemContinuousState(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
000000000008a370  w    F .text	00000000000000df              spdlog::details::Y_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000f61a0  w    O .rodata	00000000000000c6              typeinfo name for drake::systems::LeafSystem<double>::DeclareAbstractOutputPort<drake::examples::kuka_iiwa_arm::IiwaStatusSender, drake::lcmt_iiwa_status>(drake::lcmt_iiwa_status (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)() const, void (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)(drake::systems::Context<double> const&, drake::lcmt_iiwa_status*) const)::{lambda()#1}
00000000000d55e0  w    F .text	0000000000000037              drake::systems::Value<drake::systems::BasicVector<double> >::~Value()
000000000007d8e0  w    F .text	0000000000000124              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcConstraintErrorNorm(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&) const
00000000000d78f0  w    F .text	0000000000000018              drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::~IiwaCommandReceiver()
00000000000951e0  w    F .text	0000000000000145              std::pair<std::_Rb_tree_iterator<std::pair<drake::systems::System<double> const*, int> >, bool> std::_Rb_tree<std::pair<drake::systems::System<double> const*, int>, std::pair<drake::systems::System<double> const*, int>, std::_Identity<std::pair<drake::systems::System<double> const*, int> >, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > >::_M_insert_unique<std::pair<drake::systems::System<double> const*, int> const&>(std::pair<drake::systems::System<double> const*, int> const&)
000000000009cd20  w    F .text	000000000000005e              std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)>::function(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)> const&)
000000000007cbf0  w    F .text	000000000000007a              drake::systems::internal::DiagramOutput<drake::symbolic::Expression>::get_port_value(int) const
0000000000000000       F *UND*	0000000000000000              std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@GLIBCXX_3.4.21
00000000000c93c0  w    F .text	0000000000000312              drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Span(std::vector<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> > const&, std::function<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)>)
0000000000310928  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*)
00000000000746c0  w    F .text	0000000000000024              drake::systems::CompositeEventCollection<double>::~CompositeEventCollection()
0000000000315388  w    O .data.rel.ro	0000000000000218              vtable for drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque
0000000000073e10  w    F .text	000000000000007b              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::~DiagramEventCollection()
0000000000312778  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >
000000000007fd00  w    F .text	000000000000018f              drake::systems::Diagram<drake::symbolic::Expression>::SetRandomState(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
0000000000084fa0  w    F .text	0000000000000011              drake::systems::Context<drake::symbolic::Expression>::set_accuracy(stx::optional<double> const&)
000000000007af40  w    F .text	0000000000000079              std::_Function_base::_Base_manager<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Initialize(std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> >)::{lambda(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Initialize(std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> >)::{lambda(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>*)#1}> const&, std::_Manager_operation)
00000000000b25b0  w    F .text	0000000000000067              drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>::~DiagramDiscreteValues()
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@@GLIBCXX_3.4.21
0000000000074cd0  w    F .text	000000000000002a              std::_Function_handler<void* (void const*), drake::systems::SystemScalarConverter::Add<double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}>::_M_invoke(std::_Any_data const&, void const*&&)
0000000000000000       F *UND*	0000000000000000              google::ParseCommandLineFlags(int*, char***, bool)
00000000000744f0  w    F .text	000000000000000f              spdlog::details::m_formatter::~m_formatter()
00000000000c1ff0  w    F .text	000000000000023a              drake::lcmt_iiwa_status::_decodeNoHash(void const*, int, int)
00000000000aa050  w    F .text	00000000000009d4              std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> > drake::systems::Diagram<drake::symbolic::Expression>::ConvertScalarType<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >() const
0000000000312748  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramOutputPort<double>
0000000000078730  w    F .text	00000000000002b4              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetTargetSystemCompositeEventCollection(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
0000000000310ca0  w    O .data.rel.ro	0000000000000010              typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > ()
000000000007bcc0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000a1720  w    F .text	00000000000000f1              void std::vector<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::emplace_back<drake::systems::System<drake::symbolic::Expression> const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&>(drake::systems::System<drake::symbolic::Expression> const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&)
00000000000baa30  w    F .text	000000000000000a              drake::systems::BasicVector<drake::symbolic::Expression>::SetFromVector(Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)
00000000000cdf30  w    F .text	0000000000000d10              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoMakeContext() const
0000000000000000       F *UND*	0000000000000000              google::FlagRegisterer::FlagRegisterer(char const*, char const*, char const*, char const*, void*, void*)
0000000000000000       O *UND*	0000000000000000              stderr@@GLIBC_2.2.5
0000000000090cd0  w    F .text	00000000000000a8              drake::systems::BasicVector<double>::DoClone() const
00000000000cd9e0  w    F .text	0000000000000287              std::_MakeUniq<drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::__single_object std::make_unique<drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, int&>(int&)
0000000000083c30  w    F .text	00000000000001a2              spdlog::details::async_log_helper::push_msg(spdlog::details::async_log_helper::async_msg&&)
0000000000075250  w    F .text	0000000000000047              drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::get_subevent_collection(int) const
0000000000310f68  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramState<double>
00000000000a6090  w    F .text	0000000000000046              std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> > >::_M_insert_node(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >*)
000000000008e310  w    F .text	000000000000024f              drake::symbolic::Expression* Eigen::internal::conditional_aligned_new_auto<drake::symbolic::Expression, true>(unsigned long)
00000000000f2900  w    O .rodata	000000000000003f              typeinfo name for Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >
0000000000072a20  w    F .text	000000000000004f              drake::systems::Parameters<drake::symbolic::Expression>::~Parameters()
000000000007bea0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramState<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<double> const& (drake::systems::DiagramState<double>::*)(int) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
000000000008cce0  w    F .text	00000000000000ac              Eigen::PlainObjectBase<Eigen::Matrix<double, -1, 1, 0, -1, 1> >::resize(long, long)
00000000000ecb20  w    O .rodata	000000000000005d              typeinfo name for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (int)
0000000000078270  w    F .text	00000000000002b4              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetMutableTargetSystemCompositeEventCollection(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000f66c0  w    O .rodata	0000000000000073              typeinfo name for std::_Sp_counted_deleter<drake::systems::AbstractValue*, std::default_delete<drake::systems::AbstractValue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>
00000000003118a0  w    O .data.rel.ro	0000000000000028              vtable for drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@@GLIBCXX_3.4.21
00000000000eebb0  w    O .rodata	000000000000001e              typeinfo name for drake::systems::Subvector<double>
00000000000f4a60  w    O .rodata	0000000000000079              typeinfo name for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
0000000000000000       F *UND*	0000000000000000              isprint@@GLIBC_2.2.5
00000000000f19e0  w    O .rodata	000000000000001c              typeinfo name for drake::systems::Context<double>
000000000007efd0  w    F .text	00000000000002b3              drake::systems::Diagram<drake::symbolic::Expression>::DoGetInitializationEvents(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const
0000000000086a30  w    F .text	000000000000001a              std::shared_ptr<spdlog::sinks::stderr_sink<std::mutex> >::~shared_ptr()
00000000000e4800  w    F .text	00000000000000ee              std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<int>, int const&)
0000000000000000       F *UND*	0000000000000000              RigidBodyTree<double>::FindBody(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) const
00000000000ba120  w    F .text	000000000000001f              drake::systems::DiagramOutputPort<double>::DoAllocate() const
0000000000000000       F *UND*	0000000000000000              drake::systems::SystemBase::ThrowInputPortIndexOutOfRange(char const*, drake::TypeSafeIndex<drake::systems::InputPortTag>, int) const
00000000000f13a0  w    O .rodata	0000000000000022              typeinfo name for spdlog::details::flag_formatter
0000000000083400  w    F .text	0000000000000024              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramContext()
0000000000000000       F *UND*	0000000000000000              __cxa_throw@@CXXABI_1.3
00000000000db2b0  w    F .text	000000000000010d              drake::systems::DiscreteUpdateEvent<double>::add_to_composite(drake::systems::CompositeEventCollection<double>*) const
00000000000720b0  w    F .text	0000000000000006              spdlog::details::D_formatter::~D_formatter()
000000000008ae00  w    F .text	0000000000000368              void std::vector<RigidBodyFrame<double>, std::allocator<RigidBodyFrame<double> > >::_M_emplace_back_aux<RigidBodyFrame<double> >(RigidBodyFrame<double>&&)
00000000000743e0  w    F .text	000000000000000f              spdlog::details::i_formatter::~i_formatter()
00000000000a64e0  w    F .text	00000000000000d0              std::_Rb_tree_iterator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > std::_Rb_tree<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>&&, std::tuple<>&&)
00000000000a3170  w    F .text	00000000000000a6              drake::systems::Diagram<drake::symbolic::Expression>::AllocateForcedPublishEventCollection() const
00000000000a6130  w    F .text	0000000000000080              std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_get_insert_unique_pos(drake::systems::System<double> const* const&)
00000000000d7870  w    F .text	0000000000000032              drake::examples::kuka_iiwa_arm::IiwaStatusSender::~IiwaStatusSender()
0000000000311fa8  w    O .data.rel.ro	0000000000000018              typeinfo for fmt::SystemError
000000000007ca20  w    F .text	0000000000000069              drake::systems::Subvector<drake::symbolic::Expression>::GetAtIndex(int)
0000000000316840 u     O .bss	0000000000000008              guard variable for drake::NiceTypeName::Get<drake::lcmt_iiwa_status>()::canonical
0000000000084590  w    F .text	00000000000000ec              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::_Ios_Openmode)@@GLIBCXX_3.4.21
0000000000000000       F *UND*	0000000000000000              pow@@GLIBC_2.2.5
00000000000f6120  w    O .rodata	0000000000000024              typeinfo name for drake::systems::ContactResults<double>
000000000008b170  w    F .text	00000000000000f6              void std::vector<RigidBodyFrame<double>, std::allocator<RigidBodyFrame<double> > >::emplace_back<RigidBodyFrame<double> >(RigidBodyFrame<double>&&)
0000000000310a18  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::State<double>* (drake::systems::System<double> const&, drake::systems::State<double>*)
00000000000a2c20  w    F .text	000000000000004c              std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >*)
0000000000072890  w    F .text	0000000000000006              drake::systems::System<drake::symbolic::Expression>::DoGetWitnessFunctions(drake::systems::Context<drake::symbolic::Expression> const&, std::vector<drake::systems::WitnessFunction<drake::symbolic::Expression> const*, std::allocator<drake::systems::WitnessFunction<drake::symbolic::Expression> const*> >*) const
000000000007d3e0  w    F .text	00000000000000fd              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::DoMerge(drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > const&)
0000000000311570  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*) const>
0000000000097050  w    F .text	00000000000000c7              fmt::internal::require_numeric_argument(fmt::internal::Arg const&, char)
00000000003117f8  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::CompositeEventCollection<drake::symbolic::Expression>
00000000000babe0  w    F .text	00000000000002f5              drake::systems::Diagram<drake::symbolic::Expression>::DispatchDiscreteVariableUpdateHandler(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > const&, drake::systems::DiscreteValues<drake::symbolic::Expression>*) const
00000000000de5e0  w    F .text	0000000000000357              drake::systems::LeafSystem<double>::SetDefaultParameters(drake::systems::Context<double> const&, drake::systems::Parameters<double>*) const
00000000000d1b80  w    F .text	0000000000000555              drake::systems::DiagramContext<double>::DiagramContext(drake::systems::DiagramContext<double> const&)
00000000000f1590  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::m_formatter
0000000000071f50  w    F .text	0000000000000006              spdlog::details::full_formatter::~full_formatter()
00000000000f26c0  w    O .rodata	000000000000007c              typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > (drake::systems::System<double>::*)() const
00000000000a9430  w    F .text	0000000000000721              std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> > drake::systems::Diagram<drake::symbolic::Expression>::ConvertScalarType<double>() const
00000000000d5240  w    F .text	0000000000000010              drake::systems::LeafSystem<double>::DoHasDirectFeedthrough(int, int) const
00000000000745c0  w    F .text	000000000000000f              drake::systems::WitnessTriggeredEventData<double>::~WitnessTriggeredEventData()
0000000000314e60  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::UnrestrictedUpdateEvent<double>
00000000000ec760  w    O .rodata	000000000000004a              typeinfo name for drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (int)
000000000008a450  w    F .text	00000000000001af              void fmt::internal::format_decimal<unsigned int, char, fmt::internal::ThousandsSep>(char*, unsigned int, unsigned int, fmt::internal::ThousandsSep)
0000000000000000       F *UND*	0000000000000000              std::__throw_length_error(char const*)@@GLIBCXX_3.4
00000000000a7410  w    F .text	00000000000007f9              std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> > drake::systems::Diagram<double>::ConvertScalarType<drake::symbolic::Expression>() const
00000000000b9950  w    F .text	0000000000000021              drake::systems::Value<int>::SetFrom(drake::systems::AbstractValue const&)
00000000000728f0  w    F .text	000000000000000e              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetRandomParameters(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
0000000000311728  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::State<double> const& (drake::systems::DiagramState<double>::*)(int) const>
00000000000f0320  w    O .rodata	000000000000005f              typeinfo name for drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000743f0  w    F .text	000000000000000f              spdlog::details::pid_formatter::~pid_formatter()
0000000000310978  w    O .data.rel.ro	0000000000000010              typeinfo for __gnu_cxx::new_allocator<char>
00000000000f0800  w    O .rodata	00000000000000a6              typeinfo name for std::_Simple_type_wrapper<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>
00000000000c4690  w    F .text	00000000000003f5              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCheckValidContext(drake::systems::ContextBase const&) const
00000000000720c0  w    F .text	0000000000000006              spdlog::details::C_formatter::~C_formatter()
00000000000b0ba0  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > > > >::~vector()
000000000007c580  w    F .text	000000000000018c              drake::systems::BasicVector<double>::ScaleAndAddToVector(double const&, Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1>, 0, Eigen::InnerStride<1> >) const
00000000000f3e80  w    O .rodata	0000000000000059              typeinfo name for drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >
000000000007b780  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*), drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000a2740  w    F .text	000000000000004c              std::_Rb_tree<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_erase(std::_Rb_tree_node<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >*)
00000000000c1050  w    F .text	00000000000001ef              std::_Rb_tree<drake::systems::PeriodicEventData, std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >, std::_Select1st<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > >, drake::systems::PeriodicEventDataComparator, std::allocator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > >, drake::systems::PeriodicEventData const&)
0000000000316750  w    O .data	0000000000000008              .hidden DW.ref._ZTISt11logic_error
00000000000d0da0  w    F .text	000000000000066c              drake::systems::DiagramContext<drake::symbolic::Expression>::DiagramContext(drake::systems::DiagramContext<drake::symbolic::Expression> const&)
0000000000073480  w    F .text	0000000000000060              drake::systems::State<drake::symbolic::Expression>::~State()
00000000000d2270  w    F .text	00000000000008d2              drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ContinuousState(std::unique_ptr<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, int, int, int)
00000000000b4e80  w    F .text	000000000000006a              drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramDiscreteValues()
0000000000089650  w    F .text	000000000000011f              std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)
000000000007f4a0  w    F .text	0000000000000081              spdlog::pattern_formatter::~pattern_formatter()
00000000003123a0  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::sinks::base_sink<std::mutex>
00000000000d6680  w    F .text	0000000000000073              drake::systems::LeafSystemOutput<double>::~LeafSystemOutput()
00000000003141a8  w    O .data.rel.ro	0000000000000038              vtable for drake::systems::lcm::Serializer<drake::lcmt_iiwa_command>
00000000000b0a20  w    F .text	0000000000000032              drake::systems::DiagramCompositeEventCollection<double>::~DiagramCompositeEventCollection()
00000000000a8a30  w    F .text	00000000000007f9              std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> > drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ConvertScalarType<drake::symbolic::Expression>() const
0000000000314ad8  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000311768  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<double>& (drake::systems::DiagramCompositeEventCollection<double>::*)(int)>
00000000000a9e20  w    F .text	0000000000000025              std::_Function_handler<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&), drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const&)
0000000000074840  w    F .text	000000000000000f              drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramOutputPort()
00000000000c0a30  w    F .text	000000000000054f              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetDirectFeedthroughs() const
00000000000d20e0  w    F .text	0000000000000055              drake::systems::DiagramContext<double>::DoCloneWithoutPointers() const
0000000000312360  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::aggregate_formatter
00000000000b0aa0  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > > > >::~vector()
00000000000d8a50  w    F .text	000000000000005e              std::function<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > ()>::function(std::function<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > ()> const&)
00000000000effc0  w    O .rodata	0000000000000081              typeinfo name for std::_Simple_type_wrapper<drake::systems::ContinuousState<drake::symbolic::Expression> const& (drake::systems::DiagramContinuousState<drake::symbolic::Expression>::*)(int) const>
00000000000c86c0  w    F .text	0000000000000345              drake::systems::DiagramContinuousState<drake::symbolic::Expression>::DiagramContinuousState(std::vector<drake::systems::ContinuousState<drake::symbolic::Expression>*, std::allocator<drake::systems::ContinuousState<drake::symbolic::Expression>*> >)
000000000007acd0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<double> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > (drake::systems::System<double>::*)() const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000d5260  w    F .text	0000000000000012              drake::systems::LeafSystemOutput<double>::get_num_ports() const
00000000000747c0  w    F .text	000000000000000f              drake::systems::DiagramOutputPort<double>::~DiagramOutputPort()
0000000000310a88  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::CompositeEventCollection<double>& (int)
000000000007a9c0  w    F .text	000000000000007a              drake::systems::SystemBase::GetSystemName[abi:cxx11]() const
00000000000851b0  w    F .text	0000000000000091              std::vector<std::unique_ptr<drake::systems::DependencyTracker, std::default_delete<drake::systems::DependencyTracker> >, std::allocator<std::unique_ptr<drake::systems::DependencyTracker, std::default_delete<drake::systems::DependencyTracker> > > >::~vector()
000000000009d2d0  w    F .text	000000000000005e              std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)>::function(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)> const&)
00000000000721b0  w    F .text	0000000000000020              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcConservativePower(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
00000000003109b8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)
0000000000086ac0  w    F .text	0000000000000019              spdlog::logger::_set_formatter(std::shared_ptr<spdlog::formatter>)
00000000000f1980  w    O .rodata	0000000000000038              typeinfo name for drake::systems::internal::SystemParentServiceInterface
000000000007b8a0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000f2080  w    O .rodata	0000000000000046              typeinfo name for drake::systems::Value<drake::systems::BasicVector<drake::symbolic::Expression> >
0000000000000000       F *UND*	0000000000000000              _Unwind_Resume@@GCC_3.0
00000000000a1f70  w    F .text	00000000000000a6              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateForcedPublishEventCollection() const
0000000000310d58  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Parameters<drake::symbolic::Expression>
0000000000316820 u     O .bss	0000000000000020              drake::NiceTypeName::Get<drake::lcmt_iiwa_command>()::canonical[abi:cxx11]
0000000000317140 u     O .bss	0000000000000020              drake::NiceTypeName::Get<drake::systems::ContactResults<double> >()::canonical[abi:cxx11]
00000000000d8340  w    F .text	0000000000000141              drake::systems::LeafCompositeEventCollection<double>::LeafCompositeEventCollection()
0000000000090db0  w    F .text	000000000000003d              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcNextUpdateTime(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >*) const
000000000007ec10  w    F .text	000000000000007d              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::~DiagramEventCollection()
00000000000848e0  w    F .text	000000000000005e              std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::function(std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&)
000000000008d220  w    F .text	0000000000000098              std::_Hashtable<drake::systems::SystemScalarConverter::Key, std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> >, std::allocator<std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> > >, std::__detail::_Select1st, std::equal_to<drake::systems::SystemScalarConverter::Key>, drake::systems::SystemScalarConverter::KeyHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()
000000000007cfe0  w    F .text	00000000000000fd              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::DoMerge(drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > const&)
00000000000ef920  w    O .rodata	0000000000000037              typeinfo name for drake::systems::State<double> const& (drake::systems::DiagramState<double>::*)(int) const
0000000000099e20  w    F .text	0000000000000042              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fmt::format<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(fmt::BasicCStringRef<char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000d0c90  w    F .text	0000000000000108              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Clone() const
0000000000311670  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>
00000000000927b0  w    F .text	0000000000000338              drake::systems::IntegratorBase<double>::Initialize()
00000000000c2c50  w    F .text	0000000000000285              drake::systems::lcm::Serializer<drake::lcmt_iiwa_command>::Serialize(drake::systems::AbstractValue const&, std::vector<unsigned char, std::allocator<unsigned char> >*) const
00000000000b5160  w    F .text	000000000000086a              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetDefaultParameters(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000d6d30  w    F .text	0000000000000061              drake::systems::UnrestrictedUpdateEvent<double>::~UnrestrictedUpdateEvent()
00000000000a1310  w    F .text	0000000000000107              std::_Function_handler<void (double const&), drake::systems::Simulator<double>::IsolateWitnessTriggers(std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*)::{lambda(double const&)#1}>::_M_invoke(std::_Any_data const&, double const&)
00000000000d5250  w    F .text	000000000000000d              drake::systems::LeafContext<double>::get_state() const
0000000000072050  w    F .text	0000000000000006              spdlog::details::M_formatter::~M_formatter()
00000000000df350  w    F .text	000000000000016a              drake::systems::LeafSystem<double>::AllocateOutput(drake::systems::Context<double> const&) const
0000000000314388  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >
0000000000000000       F *UND*	0000000000000000              RigidBodyTree<double>::RigidBodyTree()
0000000000310998  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)
00000000000be7e0  w    F .text	0000000000000091              std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::equal_range(int const&)
00000000000f2980  w    O .rodata	000000000000003c              typeinfo name for drake::systems::DiagramContext<drake::symbolic::Expression>
00000000000b9920  w    F .text	0000000000000021              drake::systems::Value<int>::SetFromOrThrow(drake::systems::AbstractValue const&)
00000000000a7c10  w    F .text	0000000000000080              std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> > >::_M_get_insert_unique_pos(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&)
00000000000b4de0  w    F .text	0000000000000047              drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiscreteValues()
0000000000000000       F *UND*	0000000000000000              vsnprintf@@GLIBC_2.2.5
00000000003125f8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Event<double>
00000000000f0ee0  w    O .rodata	0000000000000076              typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<double>& (drake::systems::DiagramCompositeEventCollection<double>::*)(int)>
00000000000f1300  w    O .rodata	0000000000000022              typeinfo name for fmt::BasicMemoryWriter<char, std::allocator<char> >
0000000000312a50  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}
0000000000082f80  w    F .text	00000000000001fe              drake::systems::Diagram<double>::DoGetPerStepEvents(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*) const
00000000000d6c60  w    F .text	00000000000000c9              drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >::~LeafEventCollection()
0000000000310e80  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000efc20  w    O .rodata	000000000000006d              typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*) const>
0000000000072c00  w    F .text	000000000000002a              std::_Function_handler<drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*), drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*&&)
000000000009a9e0  w    F .text	00000000000002c3              void spdlog::logger::log<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(spdlog::level::level_enum, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000eec20  w    O .rodata	0000000000000052              typeinfo name for drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*) const
00000000000d5da0  w    F .text	000000000000007a              drake::systems::LeafSystemOutput<double>::get_mutable_port_value(int)
000000000007dea0  w    F .text	00000000000001ed              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DispatchPublishHandler(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > const&) const
00000000000ed440  w    O .rodata	0000000000000037              typeinfo name for drake::systems::State<drake::symbolic::Expression> const& (int)
00000000000bbd90  w    F .text	000000000000000c              non-virtual thunk to drake::systems::Diagram<drake::symbolic::Expression>::EvalConnectedSubsystemInputPort(drake::systems::ContextBase const&, drake::systems::InputPortBase const&) const
0000000000099e70  w    F .text	0000000000000051              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fmt::format<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(fmt::BasicCStringRef<char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000000000       O *UND*	0000000000000000              RigidBodyTreeConstants::kFirstNonWorldModelInstanceId
00000000003124b8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::VectorBase<double>
00000000000755b0  w    F .text	0000000000000047              drake::systems::DiagramState<double>::get_substate(int) const
0000000000073780  w    F .text	000000000000000d              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_mutable_state()
000000000007b4e0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramContext<drake::symbolic::Expression>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<drake::symbolic::Expression>& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000d7820  w    F .text	0000000000000024              drake::systems::LeafSystem<double>::~LeafSystem()
0000000000000000       F *UND*	0000000000000000              drake::systems::SystemBase::EvalAbstractInputImpl(char const*, drake::systems::ContextBase const&, drake::TypeSafeIndex<drake::systems::InputPortTag>) const
0000000000093810  w    F .text	000000000000010d              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::CopyToVector() const
0000000000311798  w    O .data.rel.ro	0000000000000020              typeinfo for drake::systems::VectorBase<drake::symbolic::Expression>& (*)(drake::systems::ContinuousState<drake::symbolic::Expression>*)
0000000000071650  w    F .text	0000000000000006              fmt::BasicWriter<char>::~BasicWriter()
00000000000e18b0  w    F .text	000000000000070b              drake::systems::LeafSystem<double>::GetDirectFeedthroughs() const
00000000000b7990  w    F .text	0000000000000144              void std::vector<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > > > >::emplace_back<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > > >(std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > >&&)
0000000000084350  w    F .text	0000000000000069              drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetZero()
00000000000ae4c0  w    F .text	0000000000000025              std::_Function_handler<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&), drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const&)
00000000000a7340  w    F .text	00000000000000d0              std::_Rb_tree_iterator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > std::_Rb_tree<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>&&, std::tuple<>&&)
0000000000312928  w    O .data.rel.ro	0000000000000038              typeinfo for drake::systems::Diagram<drake::symbolic::Expression>
00000000000718c0  w    F .text	0000000000000012              drake::systems::System<double>::DoCalcNextUpdateTime(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*, double*) const
00000000000953f0  w    F .text	00000000000002c6              std::_Rb_tree_node<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >* std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_copy<std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_Reuse_or_alloc_node>(std::_Rb_tree_node<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > const*, std::_Rb_tree_node<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >*, std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_Reuse_or_alloc_node&)
00000000000c6090  w    F .text	0000000000000287              void std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> >::_M_range_insert<__gnu_cxx::__normal_iterator<drake::systems::Event<double> const* const*, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > > >(__gnu_cxx::__normal_iterator<drake::systems::Event<double> const**, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > >, __gnu_cxx::__normal_iterator<drake::systems::Event<double> const* const*, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > >, __gnu_cxx::__normal_iterator<drake::systems::Event<double> const* const*, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > >, std::forward_iterator_tag)
00000000000f15b0  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::d_formatter
00000000000cc8e0  w    F .text	0000000000000cef              drake::systems::Diagram<drake::symbolic::Expression>::DoMakeContext() const
00000000003169c0 u     O .bss	0000000000000008              guard variable for drake::NiceTypeName::Get<drake::systems::Diagram<double> >()::canonical
00000000000f4220  w    O .rodata	00000000000000c0              typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const
00000000003136e0  w    O .data.rel.ro	00000000000001c8              vtable for drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000081060  w    F .text	00000000000002b3              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetPerStepEvents(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000316800 u     O .bss	0000000000000008              guard variable for drake::NiceTypeName::Get<drake::lcmt_iiwa_command>()::canonical
000000000009bb10  w    F .text	000000000000009e              std::_Rb_tree<std::pair<drake::systems::System<double> const*, int>, std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > >, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > > >::_M_get_insert_unique_pos(std::pair<drake::systems::System<double> const*, int> const&)
0000000000095180  w    F .text	0000000000000059              std::_Rb_tree<std::pair<drake::systems::System<double> const*, int>, std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > >, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > > >::_M_erase(std::_Rb_tree_node<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > >*)
0000000000072100  w    F .text	0000000000000006              spdlog::details::A_formatter::~A_formatter()
0000000000071e30  w    F .text	0000000000000012              drake::systems::System<drake::symbolic::Expression>::DoGetTargetSystemContext(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*) const
0000000000311550  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const>
0000000000314e48  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::Value<drake::systems::ContactResults<double> >
00000000000ef9c0  w    O .rodata	000000000000004c              typeinfo name for drake::systems::ContinuousState<double> const& (drake::systems::DiagramContinuousState<double>::*)(int) const
00000000000f27c0  w    O .rodata	000000000000005a              typeinfo name for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000e4650  w    F .text	0000000000000125              std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>&&, std::tuple<>&&)
0000000000311c98  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::DiagramCompositeEventCollection<double>
00000000000b0ba0  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > > > >::~vector()
00000000000867c0  w    F .text	000000000000001f              spdlog::details::aggregate_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000aaba0  w    F .text	0000000000001442              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Initialize(std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> >)
00000000000e3280  w    F .text	0000000000000224              void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_emplace_back_aux<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000072110  w    F .text	0000000000000006              spdlog::details::a_formatter::~a_formatter()
0000000000097120  w    F .text	00000000000000fa              void fmt::internal::check_sign<char>(char const*&, fmt::internal::Arg const&)
00000000000c9cb0  w    F .text	00000000000004a5              drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Finalize()
0000000000312638  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::lcm::Serializer<drake::lcmt_iiwa_status>
00000000000f02a0  w    O .rodata	000000000000006c              typeinfo name for drake::systems::Value<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000071e00  w    F .text	0000000000000012              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetTargetSystemContext(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
00000000000abff0  w    F .text	00000000000002c8              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Diagram(std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> >)
00000000000f3ca0  w    O .rodata	0000000000000086              typeinfo name for drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
00000000000f60e0  w    O .rodata	0000000000000031              typeinfo name for drake::systems::Value<drake::systems::ContactResults<double> >
00000000000b1460  w    F .text	0000000000000046              drake::systems::Context<drake::symbolic::Expression>::~Context()
00000000000ddf70  w    F .text	0000000000000353              void drake::systems::detail::CheckBasicVectorInvariants<double>(drake::systems::BasicVector<double> const*)
00000000000f4580  w    O .rodata	00000000000000cf              typeinfo name for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>
00000000000a3b50  w    F .text	0000000000000089              drake::systems::Diagram<drake::symbolic::Expression>::~Diagram()
000000000007b840  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*), drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000b9db0  w    F .text	0000000000000219              drake::systems::OutputPort<double>::GetPortIdString() const
00000000000e6f30  w    F .text	0000000000000821              Eigen::Matrix<Eigen::Matrix<double, 6, 6, 0, 6, 6>::Scalar, 6, 6, 0, 6, 6> transformSpatialInertia<Eigen::Matrix<double, 6, 6, 0, 6, 6> >(Eigen::Transform<Eigen::Matrix<double, 6, 6, 0, 6, 6>::Scalar, 3, 1, 0> const&, Eigen::MatrixBase<Eigen::Matrix<double, 6, 6, 0, 6, 6> > const&)
0000000000071610  w    F .text	0000000000000022              drake::systems::EventData::Clone() const
00000000000b96e0  w    F .text	0000000000000231              drake::systems::Value<int> const* drake::systems::AbstractValue::DownCastOrThrow<int>() const
00000000003121b0  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::H_formatter
00000000000e7760 g     F .text	0000000000000065              __libc_csu_init
0000000000071e50  w    F .text	0000000000000006              drake::systems::DiagramOutputPort<drake::symbolic::Expression>::~DiagramOutputPort()
000000000008a950  w    F .text	0000000000000035              drake::systems::BasicVector<drake::symbolic::Expression>::~BasicVector()
0000000000074eb0  w    F .text	000000000000006e              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetSubsystemContext(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const
000000000007dc20  w    F .text	0000000000000085              drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramState()
0000000000000000       F *UND*	0000000000000000              drake::systems::RungeKutta3Integrator<double>::DoInitialize()
0000000000094d80  w    F .text	0000000000000146              drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque* drake::systems::DiagramBuilder<double>::AddSystem<drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque, RigidBodyTree<double> const&, std::vector<int, std::allocator<int> >&>(RigidBodyTree<double> const&, std::vector<int, std::allocator<int> >&)
00000000003167a0 u     O .bss	0000000000000020              drake::NiceTypeName::Get<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >()::canonical[abi:cxx11]
00000000000a9fc0  w    F .text	000000000000008d              std::_Rb_tree_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<drake::symbolic::Expression> const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<drake::symbolic::Expression> const* const&>&&, std::tuple<>&&)
0000000000074c70  w    F .text	000000000000002a              std::_Function_handler<void* (void const*), drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}>::_M_invoke(std::_Any_data const&, void const*&&)
000000000009d7b0  w    F .text	000000000000005e              std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)>::function(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)
00000000000db860  w    F .text	0000000000000105              drake::systems::LeafSystem<double>::DeclareVectorOutputPort(drake::systems::BasicVector<double> const&, std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>)
000000000007b600  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*), drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000f28a0  w    O .rodata	000000000000005a              typeinfo name for drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000080fd0  w    F .text	0000000000000083              spdlog::pattern_formatter::~pattern_formatter()
000000000007bde0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramState<double>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<double>& (drake::systems::DiagramState<double>::*)(int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000074f90  w    F .text	0000000000000033              drake::systems::System<drake::symbolic::Expression>::DoCalcTimeDerivatives(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression>*) const
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@@GLIBCXX_3.4.21
000000000008d450  w    F .text	0000000000000065              std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::find(std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&) const
0000000000072020  w    F .text	0000000000000006              spdlog::details::f_formatter::~f_formatter()
00000000000edc60  w    O .rodata	0000000000000020              typeinfo name for drake::systems::Parameters<double>
00000000000be590  w    F .text	000000000000018d              drake::systems::ContinuousState<double>::ContinuousState(std::unique_ptr<drake::systems::VectorBase<double>, std::default_delete<drake::systems::VectorBase<double> > >)
0000000000099e70  w    F .text	0000000000000051              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fmt::format<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(fmt::BasicCStringRef<char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000b2350  w    F .text	00000000000000d3              void std::vector<drake::systems::AbstractValue*, std::allocator<drake::systems::AbstractValue*> >::emplace_back<drake::systems::AbstractValue*>(drake::systems::AbstractValue*&&)
0000000000310c90  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Context<double> const& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000000716e0  w    F .text	0000000000000006              drake::systems::PeriodicEventData::~PeriodicEventData()
0000000000312bb0  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
000000000007b310  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000000000       F *UND*	0000000000000000              drake::systems::RungeKutta3Integrator<double>::DoStep(double const&)
0000000000073b10  w    F .text	000000000000007b              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::~DiagramEventCollection()
0000000000310ce8  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::internal::DiagramOutput<drake::symbolic::Expression>
00000000000f0d20  w    O .rodata	0000000000000051              typeinfo name for std::_Simple_type_wrapper<drake::systems::State<double> const& (drake::systems::DiagramState<double>::*)(int) const>
00000000000ece40  w    O .rodata	0000000000000071              typeinfo name for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (int)
0000000000310f80  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::Subvector<double>
00000000003157b8  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >
00000000000b2540  w    F .text	000000000000006a              drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>::~DiagramDiscreteValues()
0000000000098f10  w    F .text	000000000000033e              void fmt::BasicWriter<char>::write_int<unsigned long, fmt::FormatSpec>(unsigned long, fmt::FormatSpec)
00000000000ed1a0  w    O .rodata	000000000000007d              typeinfo name for drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
00000000000f1460  w    O .rodata	0000000000000029              typeinfo name for spdlog::details::short_level_formatter
0000000000072740  w    F .text	0000000000000006              drake::systems::System<double>::GetGraphvizInputPortToken(drake::systems::InputPortDescriptor<double> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000b4c90  w    F .text	00000000000000d3              void std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> >::emplace_back<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*>(drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*&&)
00000000000ef060  w    O .rodata	0000000000000065              typeinfo name for drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*) const
0000000000000000       F *UND*	0000000000000000              gmtime_r@@GLIBC_2.2.5
00000000003120d8  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::A_formatter
000000000007a590  w    F .text	000000000000001f              drake::systems::System<drake::symbolic::Expression>::DoCalcKineticEnergy(drake::systems::Context<drake::symbolic::Expression> const&) const
0000000000311140  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*) const
0000000000316738 g     O .data	0000000000000001              fLB::FLAGS_novisualize_frames
00000000000969a0  w    F .text	0000000000000056              void std::vector<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg>, std::allocator<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg> > >::emplace_back<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg> >(std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg>&&)
00000000000978b0  w    F .text	000000000000031d              void fmt::BasicWriter<char>::write_int<unsigned int, fmt::FormatSpec>(unsigned int, fmt::FormatSpec)
00000000000dac70  w    F .text	000000000000014e              drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >::MakeForcedEventCollection()
0000000000074510  w    F .text	000000000000000f              spdlog::details::D_formatter::~D_formatter()
000000000008ab90  w    F .text	00000000000000e5              drake::systems::DiagramBuilder<double>::~DiagramBuilder()
0000000000073e90  w    F .text	000000000000007b              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::~DiagramEventCollection()
0000000000072eb0  w    F .text	0000000000000023              std::_Function_handler<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000000000       F *UND*	0000000000000000              std::basic_ostream<char, std::char_traits<char> >& std::basic_ostream<char, std::char_traits<char> >::_M_insert<double>(double)@@GLIBCXX_3.4.9
00000000000f1610  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::M_formatter
0000000000086810  w    F .text	000000000000002e              spdlog::details::p_formatter::format(spdlog::details::log_msg&, tm const&)
000000000008b430  w    F .text	0000000000000097              unsigned int fmt::internal::parse_nonnegative_int<char>(char const*&)
00000000003109f8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)
00000000000a29e0  w    F .text	000000000000000c              non-virtual thunk to drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Diagram()
00000000000732f0  w    F .text	000000000000000a              drake::systems::DiagramContinuousState<drake::symbolic::Expression>::q_selector(drake::systems::ContinuousState<drake::symbolic::Expression>*)
000000000008c050  w    F .text	0000000000000044              spdlog::details::I_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000310c40  w    O .data.rel.ro	0000000000000010              typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > ()
00000000000b1420  w    F .text	0000000000000039              drake::systems::Context<drake::symbolic::Expression>::~Context()
00000000000f2220  w    O .rodata	0000000000000027              typeinfo name for drake::systems::DiagramOutputPort<double>
000000000009d330  w    F .text	000000000000013c              void drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, double>(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)> const&)
00000000000edac0  w    O .rodata	000000000000004c              typeinfo name for drake::systems::Context<double>& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000000f36c0  w    O .rodata	0000000000000053              typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double> const*) const>
0000000000314ea8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::LeafSystem<double>::DeclareVectorOutputPort<drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque, drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&, void (drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::*)(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*) const)::{lambda(drake::systems::Context<double> const&)#2}
00000000000f4440  w    O .rodata	0000000000000096              typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const
00000000000a39e0  w    F .text	0000000000000109              std::vector<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > > >::~vector()
000000000007dac0  w    F .text	0000000000000031              drake::systems::VectorBase<double>::CalcInequalityConstraint(Eigen::Matrix<double, -1, 1, 0, -1, 1>*) const
0000000000074560  w    F .text	000000000000000f              spdlog::details::A_formatter::~A_formatter()
0000000000312960  w    O .data.rel.ro	0000000000000010              typeinfo for drake::symbolic::Expression
00000000000eea00  w    O .rodata	0000000000000030              typeinfo name for drake::systems::Value<drake::lcmt_iiwa_command>
000000000008a130  w    F .text	0000000000000024              drake::systems::IntegratorBase<double>::~IntegratorBase()
0000000000072760  w    F .text	0000000000000010              drake::systems::System<drake::symbolic::Expression>::AllocateTimeDerivatives() const
000000000007da10  w    F .text	0000000000000044              drake::systems::Value<drake::lcmt_iiwa_command>::~Value()
00000000000c3140  w    F .text	0000000000000166              void std::vector<std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > >, std::allocator<std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > > > >::emplace_back<std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > > >(std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > >&&)
00000000000f1220  w    O .rodata	0000000000000014              typeinfo name for fmt::FormatError
0000000000073690  w    F .text	0000000000000009              drake::systems::Subvector<double>::size() const
00000000003133b8  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::pid_formatter
000000000007bc60  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000f2320  w    O .rodata	000000000000004c              typeinfo name for drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >
0000000000072db0  w    F .text	000000000000002a              std::_Function_handler<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*), drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*&&)
00000000000a27e0  w    F .text	0000000000000109              std::vector<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
00000000000ed0a0  w    O .rodata	0000000000000046              typeinfo name for drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*)
0000000000073c10  w    F .text	000000000000007b              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::~DiagramEventCollection()
00000000000729a0  w    F .text	0000000000000012              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetTargetSystemCompositeEventCollection(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
00000000000d8f80  w    F .text	000000000000003d              std::_Function_handler<void (drake::systems::Context<double> const&, drake::systems::AbstractValue*), drake::systems::LeafSystem<double>::DeclareAbstractOutputPort<drake::examples::kuka_iiwa_arm::IiwaStatusSender, drake::lcmt_iiwa_status>(drake::lcmt_iiwa_status (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)() const, void (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)(drake::systems::Context<double> const&, drake::lcmt_iiwa_status*) const)::{lambda(drake::systems::Context<double> const&, drake::systems::AbstractValue*)#2}>::_M_invoke(std::_Any_data const&, drake::systems::Context<double> const&, drake::systems::AbstractValue*&&)
0000000000312b68  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000084b70  w    F .text	00000000000000ae              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000a4fe0  w    F .text	0000000000000046              std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_insert_node(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >*)
00000000000b3a60  w    F .text	00000000000002f3              drake::systems::DiagramContext<drake::symbolic::Expression>::MakeParameters()
0000000000074010  w    F .text	0000000000000047              drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Supervector()
00000000000a3d70  w    F .text	0000000000000096              drake::systems::Diagram<drake::symbolic::Expression>::~Diagram()
00000000000735f0  w    F .text	0000000000000037              std::_Function_base::_Base_manager<drake::systems::VectorBase<double>& (*)(drake::systems::ContinuousState<double>*)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000079ce0  w    F .text	0000000000000088              drake::systems::VectorBase<double>::SetFromVector(Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)
0000000000000000       O *UND*	0000000000000000              typeinfo for drake::systems::SystemBase
00000000000abff0  w    F .text	00000000000002c8              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Diagram(std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> >)
000000000008ecc0  w    F .text	00000000000000d0              std::_Rb_tree_iterator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>&&, std::tuple<>&&)
0000000000312348  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::ch_formatter
0000000000312b30  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >
00000000000847f0  w    F .text	000000000000005a              fmt::BasicWriter<char>::operator<<(char)
0000000000071ff0  w    F .text	0000000000000006              spdlog::details::p_formatter::~p_formatter()
00000000000da850  w    F .text	00000000000000a5              drake::systems::LeafSystem<double>::DeclareDiscreteState(int)
0000000000076370  w    F .text	00000000000000b3              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoValidateAllocatedContext(drake::systems::ContextBase const&) const
00000000003131d8  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::M_formatter
00000000000728d0  w    F .text	0000000000000010              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateDiscreteVariables() const
000000000007ba80  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000f4740  w    O .rodata	00000000000000da              typeinfo name for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>
0000000000071fd0  w    F .text	0000000000000006              spdlog::details::R_formatter::~R_formatter()
00000000000f4c00  w    O .rodata	0000000000000081              typeinfo name for drake::systems::Context<drake::symbolic::Expression> const& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const
00000000000a0480  w    F .text	0000000000000354              drake::systems::IntegratorBase<double>::IntegrateAtMost(double const&, double const&, double const&)
0000000000084250  w    F .text	00000000000000fe              std::_Function_handler<void (drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*), drake::systems::Diagram<double>::Initialize(std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> >)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}>::_M_invoke(std::_Any_data const&, drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*&&)
00000000000d59c0  w    F .text	0000000000000079              std::_Function_base::_Base_manager<drake::systems::LeafSystem<double>::DeclareAbstractOutputPort<drake::examples::kuka_iiwa_arm::IiwaStatusSender, drake::lcmt_iiwa_status>(drake::lcmt_iiwa_status (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)() const, void (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)(drake::systems::Context<double> const&, drake::lcmt_iiwa_status*) const)::{lambda(drake::systems::Context<double> const&, drake::systems::AbstractValue*)#2}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::LeafSystem<double>::DeclareAbstractOutputPort<drake::examples::kuka_iiwa_arm::IiwaStatusSender, drake::lcmt_iiwa_status>(drake::lcmt_iiwa_status (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)() const, void (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)(drake::systems::Context<double> const&, drake::lcmt_iiwa_status*) const)::{lambda(drake::systems::Context<double> const&, drake::systems::AbstractValue*)#2}> const&, std::_Manager_operation)
00000000000afad0  w    F .text	000000000000004d              drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramContinuousState()
0000000000096580  w    F .text	00000000000000e3              std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000d7150  w    F .text	000000000000015e              drake::systems::LeafSystem<double>::AllocateAbstractState() const
00000000000bda90  w    F .text	0000000000000086              std::vector<double, std::allocator<double> >::vector(std::vector<double, std::allocator<double> > const&)
00000000000b1610  w    F .text	00000000000001be              std::unique_ptr<drake::systems::Context<drake::symbolic::Expression>, std::default_delete<drake::systems::Context<drake::symbolic::Expression> > > drake::dynamic_pointer_cast_or_throw<drake::systems::Context<drake::symbolic::Expression>, drake::systems::ContextBase>(std::unique_ptr<drake::systems::ContextBase, std::default_delete<drake::systems::ContextBase> >&&)
00000000000730b0  w    F .text	0000000000000023              std::_Function_handler<drake::systems::State<double> const& (drake::systems::DiagramState<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<double> const& (drake::systems::DiagramState<double>::*)(int) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramState<double> const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000086f60  w    F .text	0000000000000209              drake::systems::VectorBase<drake::symbolic::Expression>::SetZero()
0000000000312b50  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000003118c8  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::State<drake::symbolic::Expression>
000000000008d2c0  w    F .text	000000000000015d              drake::systems::System<double>::~System()
0000000000314ca0  w    O .data.rel.ro	0000000000000070              vtable for drake::systems::LeafContext<double>
0000000000072cc0  w    F .text	000000000000002a              std::_Function_handler<drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*), drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*&&)
00000000000a9ed0  w    F .text	00000000000000ee              std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, drake::systems::System<drake::symbolic::Expression> const* const&)
0000000000000000       F *UND*	0000000000000000              std::out_of_range::~out_of_range()@@GLIBCXX_3.4
0000000000310bb8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)
00000000000edfe0  w    O .rodata	0000000000000046              typeinfo name for drake::systems::CompositeEventCollection<drake::symbolic::Expression>
0000000000312558  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramContext<double>
00000000000b4840  w    F .text	00000000000001a4              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateCompositeEventCollection() const
00000000000f1ae0  w    O .rodata	0000000000000033              typeinfo name for drake::systems::System<drake::symbolic::Expression>
000000000008fd00  w    F .text	0000000000000151              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::ContextBase>()
00000000000f2520  w    O .rodata	0000000000000068              typeinfo name for std::_Sp_counted_ptr_inplace<spdlog::sinks::stderr_sink<std::mutex>, std::allocator<spdlog::sinks::stderr_sink<std::mutex> >, (__gnu_cxx::_Lock_policy)2>
0000000000075650  w    F .text	0000000000000009              non-virtual thunk to drake::systems::Diagram<drake::symbolic::Expression>::GetParentPathname() const
0000000000089dd0  w    F .text	0000000000000090              drake::systems::System<double>::GetMemoryObjectName() const
00000000000c2760  w    F .text	0000000000000110              drake::systems::lcm::Serializer<drake::lcmt_iiwa_status>::Deserialize(void const*, int, drake::systems::AbstractValue*) const
0000000000315960  w    O .data.rel.ro	0000000000000018              typeinfo for std::_Sp_counted_ptr_inplace<RigidBodyFrame<double>, Eigen::aligned_allocator<RigidBodyFrame<double> >, (__gnu_cxx::_Lock_policy)2>
0000000000314e78  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::LeafSystem<double>::DeclareAbstractOutputPort<drake::examples::kuka_iiwa_arm::IiwaStatusSender, drake::lcmt_iiwa_status>(drake::lcmt_iiwa_status (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)() const, void (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)(drake::systems::Context<double> const&, drake::lcmt_iiwa_status*) const)::{lambda()#1}
00000000000ecaa0  w    O .rodata	0000000000000072              typeinfo name for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)
0000000000000000       O *UND*	0000000000000000              vtable for __cxxabiv1::__pointer_to_member_type_info@@CXXABI_1.3
0000000000071dc0  w    F .text	0000000000000036              std::_Function_handler<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&)
0000000000083610  w    F .text	0000000000000094              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoAllocateInputVector(drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
00000000000c3fb0  w    F .text	0000000000000153              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::BasicVector<double> >()
00000000000de4f0  w    F .text	00000000000000e4              drake::systems::LeafSystem<double>::DoAllocateInputVector(drake::systems::InputPortDescriptor<double> const&) const
0000000000075120  w    F .text	000000000000006e              drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_substate(int) const
0000000000078530  w    F .text	00000000000001f8              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AddTriggeredWitnessFunctionToCompositeEventCollection(drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000079880  w    F .text	00000000000002b4              drake::systems::Diagram<double>::DoGetTargetSystemCompositeEventCollection(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*) const
00000000000a8830  w    F .text	0000000000000080              std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_get_insert_unique_pos(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&)
00000000000ade60  w    F .text	000000000000039d              drake::systems::Diagram<drake::symbolic::Expression>::Diagram(std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> >)
00000000000ec9a0  w    O .rodata	0000000000000071              typeinfo name for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
000000000007a010  w    F .text	000000000000001e              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::add_event(std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > >)
000000000008c7e0  w    F .text	00000000000003ca              spdlog::details::full_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000dadf0  w    F .text	0000000000000156              void std::vector<std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > > > >::emplace_back<std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > > >(std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > >&&)
00000000000dec30  w    F .text	0000000000000142              drake::systems::LeafContext<double>::~LeafContext()
0000000000311708  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::State<double>& (drake::systems::DiagramState<double>::*)(int)>
00000000003126d0  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Sp_make_shared_tag
00000000000afa20  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
0000000000097020  w    F .text	000000000000002a              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fmt::format<char>(fmt::BasicCStringRef<char>, char const&)
00000000000dfa10  w    F .text	00000000000001d1              std::_MakeUniq<drake::systems::State<double> >::__single_object std::make_unique<drake::systems::State<double>>()
0000000000082c10  w    F .text	0000000000000169              spdlog::details::E_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000a3220  w    F .text	00000000000002da              std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > drake::systems::Diagram<drake::symbolic::Expression>::AllocateForcedEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >(std::function<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression> const*)>) const
0000000000000000       F *UND*	0000000000000000              std::logic_error::logic_error(char const*)@@GLIBCXX_3.4.21
00000000000f6360  w    O .rodata	00000000000000d5              typeinfo name for drake::systems::LeafSystem<double>::DeclareVectorOutputPort<drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque, drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&, void (drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::*)(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*) const)::{lambda(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)#1}
00000000000ca700  w    F .text	0000000000000345              drake::systems::DiagramContinuousState<double>::DiagramContinuousState(std::vector<drake::systems::ContinuousState<double>*, std::allocator<drake::systems::ContinuousState<double>*> >)
00000000000dbed0  w    F .text	000000000000005e              std::function<void (drake::systems::Context<double> const&, drake::systems::UnrestrictedUpdateEvent<double> const&, drake::systems::State<double>*)>::function(std::function<void (drake::systems::Context<double> const&, drake::systems::UnrestrictedUpdateEvent<double> const&, drake::systems::State<double>*)> const&)
0000000000085000  w    F .text	000000000000005d              drake::systems::DiagramContext<drake::symbolic::Expression>::set_accuracy(stx::optional<double> const&)
0000000000079680  w    F .text	00000000000001f8              drake::systems::Diagram<double>::AddTriggeredWitnessFunctionToCompositeEventCollection(drake::systems::Event<double>*, drake::systems::CompositeEventCollection<double>*) const
00000000000b05e0  w    F .text	00000000000000a6              drake::systems::Event<double>::Event(drake::systems::Event<double> const&)
00000000000c01c0  w    F .text	0000000000000870              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoHasDirectFeedthrough(int, int) const
000000000007ccf0  w    F .text	000000000000007a              drake::systems::internal::DiagramOutput<double>::get_port_value(int) const
00000000000be580  w    F .text	000000000000000c              non-virtual thunk to drake::systems::Diagram<double>::EvalConnectedSubsystemInputPort(drake::systems::ContextBase const&, drake::systems::InputPortBase const&) const
00000000000857e0  w    F .text	0000000000000068              drake::systems::System<double>::get_input_port(int) const
0000000000074130  w    F .text	0000000000000078              drake::systems::DiagramState<drake::symbolic::Expression>::~DiagramState()
00000000000b4ef0  w    F .text	0000000000000067              drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramDiscreteValues()
00000000000d54e0  w    F .text	000000000000000a              std::_Sp_counted_deleter<drake::systems::AbstractValue*, std::default_delete<drake::systems::AbstractValue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
00000000000f1530  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::C_formatter
0000000000314bb0  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >
000000000009b300  w    F .text	00000000000002bb              void spdlog::logger::log<char const*>(spdlog::level::level_enum, char const*, char const* const&)
0000000000310a38  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::State<double> const* (drake::systems::System<double> const&, drake::systems::State<double> const*)
0000000000314400  w    O .data.rel.ro	0000000000000070              vtable for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000ecc80  w    O .rodata	0000000000000085              typeinfo name for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
0000000000000000       F *UND*	0000000000000000              drake::systems::SystemBase::ThrowNegativeInputPortIndex(char const*, int) const
0000000000311748  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::ContinuousState<double> const& (drake::systems::DiagramContinuousState<double>::*)(int) const>
0000000000000000       F *UND*	0000000000000000              __cxa_atexit@@GLIBC_2.2.5
0000000000312270  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::p_formatter
0000000000000000       F *UND*	0000000000000000              drake::systems::AbstractValue::~AbstractValue()
00000000000f2040  w    O .rodata	000000000000002f              typeinfo name for drake::systems::WitnessTriggeredEventData<double>
00000000000f1a40  w    O .rodata	0000000000000024              typeinfo name for drake::systems::PeriodicEventData
000000000008bd90  w    F .text	00000000000000a4              void fmt::BasicWriter<char>::write_int<int, fmt::IntFormatSpec<int, fmt::AlignTypeSpec<(char)0>, char> >(int, fmt::IntFormatSpec<int, fmt::AlignTypeSpec<(char)0>, char>)
0000000000312c10  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >
0000000000073790  w    F .text	000000000000000d              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_parameters() const
0000000000079fb0  w    F .text	000000000000001e              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::add_event(std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > >)
00000000000dc0e0  w    F .text	00000000000005ec              drake::systems::LeafSystem<double>::LeafSystem(drake::systems::SystemScalarConverter)
00000000000bda80  w    F .text	000000000000000c              non-virtual thunk to drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::EvalConnectedSubsystemInputPort(drake::systems::ContextBase const&, drake::systems::InputPortBase const&) const
000000000007b0a0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000e1fc0  w    F .text	00000000000000a1              std::_MakeUniq<drake::systems::ContinuousState<double> >::__single_object std::make_unique<drake::systems::ContinuousState<double>, std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, int, int, int>(std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >&&, int&&, int&&, int&&)
00000000000e4270  w    F .text	00000000000000f0              void std::vector<float, std::allocator<float> >::_M_emplace_back_aux<float>(float&&)
0000000000311738  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::ContinuousState<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*) const>
0000000000316788 u     O .bss	0000000000000008              guard variable for drake::NiceTypeName::Get<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >()::canonical
0000000000312ae0  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000088880  w    F .text	00000000000000e6              drake::systems::VectorBase<drake::symbolic::Expression>::SetFrom(drake::systems::VectorBase<drake::symbolic::Expression> const&)
00000000000d8a50  w    F .text	000000000000005e              std::function<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > ()>::function(std::function<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > ()> const&)
0000000000311c18  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::Value<drake::lcmt_iiwa_status>
0000000000311818  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>
00000000000866e0  w    F .text	000000000000006e              std::_Hashtable<drake::systems::WitnessFunction<double> const*, std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, std::allocator<std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > > >, std::__detail::_Select1st, std::equal_to<drake::systems::WitnessFunction<double> const*>, std::hash<drake::systems::WitnessFunction<double> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::~_Hashtable()
00000000003127a8  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::Context<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double>*) const>
00000000000ae870  w    F .text	0000000000000032              drake::systems::Value<drake::lcmt_iiwa_status>::~Value()
00000000000f2fe0  w    O .rodata	00000000000000dd              typeinfo name for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}
0000000000074ba0  w    F .text	000000000000003a              spdlog::sinks::stderr_sink<std::mutex>::_sink_it(spdlog::details::log_msg const&)
0000000000312240  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::F_formatter
00000000000f20d0  w    O .rodata	0000000000000018              typeinfo name for std::_Sp_make_shared_tag
00000000000f1950  w    O .rodata	0000000000000018              typeinfo name for spdlog::async_logger
000000000009e340  w    F .text	0000000000001368              drake::systems::Diagram<double>::Initialize(std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> >)
0000000000086940  w    F .text	0000000000000039              spdlog::details::level_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000071990  w    F .text	0000000000000006              drake::systems::WitnessTriggeredEventData<double>::~WitnessTriggeredEventData()
0000000000312a28  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::Context<double> const& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const
0000000000310a78  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::CompositeEventCollection<double>* (drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*)
000000000008e560  w    F .text	000000000000015f              drake::systems::BasicVector<drake::symbolic::Expression>::CopyToVector() const
00000000000b77e0  w    F .text	00000000000001a4              drake::systems::Diagram<double>::AllocateCompositeEventCollection() const
00000000000af080  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > > > >::~vector()
0000000000073d10  w    F .text	000000000000007b              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::~DiagramEventCollection()
0000000000072e50  w    F .text	0000000000000023              std::_Function_handler<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)>::_M_invoke(std::_Any_data const&, drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
00000000000b7ae0  w    F .text	0000000000000144              void std::vector<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > > > >::emplace_back<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > > >(std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >&&)
00000000000f1840  w    O .rodata	0000000000000027              typeinfo name for spdlog::details::aggregate_formatter
00000000000c32b0  w    F .text	00000000000000d3              void std::vector<drake::systems::PublishEvent<double> const*, std::allocator<drake::systems::PublishEvent<double> const*> >::emplace_back<drake::systems::PublishEvent<double> const*>(drake::systems::PublishEvent<double> const*&&)
00000000000a7e10  w    F .text	0000000000000721              std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> > drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ConvertScalarType<double>() const
00000000000c4530  w    F .text	0000000000000153              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >()
0000000000079b40  w    F .text	000000000000000e              drake::systems::BasicVector<double>::~BasicVector()
00000000000ee0a0  w    O .rodata	0000000000000044              typeinfo name for drake::systems::internal::DiagramOutput<drake::symbolic::Expression>
00000000000ee280  w    O .rodata	0000000000000047              typeinfo name for drake::systems::WitnessTriggeredEventData<drake::symbolic::Expression>
00000000000a5430  w    F .text	0000000000000bbf              drake::systems::Diagram<drake::symbolic::Expression>::GetGraphvizFragment(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
0000000000072010  w    F .text	0000000000000006              spdlog::details::F_formatter::~F_formatter()
00000000000a93a0  w    F .text	000000000000008d              std::_Rb_tree_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> > std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<drake::symbolic::Expression> const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<drake::symbolic::Expression> const* const&>&&, std::tuple<>&&)
00000000000cc330  w    F .text	000000000000005f              drake::systems::BasicVector<drake::symbolic::Expression>::DoClone() const
00000000000d60c0  w    F .text	0000000000000044              drake::systems::Value<drake::systems::BasicVector<double> >::~Value()
0000000000312ad0  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000073c10  w    F .text	000000000000007b              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::~DiagramEventCollection()
0000000000311650  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)>
00000000000f5ee0  w    O .rodata	0000000000000045              typeinfo name for drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >
0000000000312548  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::CompositeEventCollection<double>
000000000008bc30  w    F .text	0000000000000094              void fmt::BasicWriter<char>::write_int<unsigned int, fmt::IntFormatSpec<unsigned int, fmt::AlignTypeSpec<(char)0>, char> >(unsigned int, fmt::IntFormatSpec<unsigned int, fmt::AlignTypeSpec<(char)0>, char>)
0000000000000000       F *UND*	0000000000000000              drake::systems::detail::ModelValues::size() const
00000000000f1b60  w    O .rodata	0000000000000021              typeinfo name for drake::systems::BasicVector<double>
00000000000d3570  w    F .text	000000000000013f              drake::systems::ContinuousState<drake::symbolic::Expression>::DoClone() const
00000000000d4f10  w    F .text	0000000000000018              drake::systems::LeafCompositeEventCollection<double>::~LeafCompositeEventCollection()
00000000000a9e50  w    F .text	0000000000000080              std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_get_insert_unique_pos(drake::systems::System<drake::symbolic::Expression> const* const&)
000000000008fe60  w    F .text	0000000000000153              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::Context<double> >()
00000000003116f8  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::State<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double>*) const>
00000000000f2a00  w    O .rodata	000000000000001e              typeinfo name for drake::symbolic::Expression
00000000000b2620  w    F .text	00000000000001fb              drake::systems::Parameters<drake::symbolic::Expression>::Parameters()
0000000000075cd0  w    F .text	000000000000005a              drake::systems::Diagram<double>::DoCalcWitnessValue(drake::systems::Context<double> const&, drake::systems::WitnessFunction<double> const&) const
0000000000084a20  w    F .text	00000000000000a7              spdlog::async_logger::set_error_handler(std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>)
0000000000310b68  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*)
00000000000cf5d0  w    F .text	00000000000003f7              drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ScaleAndAddToVector(Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > const&, Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>, 0, Eigen::InnerStride<1> >) const
00000000000b6700  w    F .text	0000000000000065              std::_Rb_tree<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::find(std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&) const
000000000008d420  w    F .text	0000000000000024              drake::systems::System<double>::~System()
00000000000b4d70  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
0000000000312eb8  w    O .data.rel.ro	0000000000000028              vtable for fmt::internal::MemoryBuffer<char, 500ul, std::allocator<char> >
000000000008ecc0  w    F .text	00000000000000d0              std::_Rb_tree_iterator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>&&, std::tuple<>&&)
0000000000075200  w    F .text	0000000000000047              drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::get_mutable_subevent_collection(int)
000000000008bfd0  w    F .text	000000000000003b              spdlog::details::S_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000752f0  w    F .text	0000000000000047              drake::systems::DiagramState<drake::symbolic::Expression>::get_substate(int) const
00000000000a6040  w    F .text	0000000000000046              std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_insert_node(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >*)
00000000000b2270  w    F .text	00000000000000d3              void std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> >::emplace_back<drake::systems::BasicVector<drake::symbolic::Expression>*>(drake::systems::BasicVector<drake::symbolic::Expression>*&&)
000000000008db40  w    F .text	00000000000000b3              void std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >::_M_emplace_back_aux<drake::systems::WitnessFunction<double> const* const&>(drake::systems::WitnessFunction<double> const* const&)
00000000000be030  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::Context<double>, std::default_delete<drake::systems::Context<double> > >, std::allocator<std::unique_ptr<drake::systems::Context<double>, std::default_delete<drake::systems::Context<double> > > > >::~vector()
0000000000313318  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::R_formatter
0000000000072130  w    F .text	0000000000000006              spdlog::details::level_formatter::~level_formatter()
0000000000312a60  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, double>(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}
00000000000b1020  w    F .text	0000000000000260              drake::systems::Diagram<double>::DoMapQDotToVelocity(drake::systems::Context<double> const&, Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<double>*) const
00000000000b09b0  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<double>, std::default_delete<drake::systems::CompositeEventCollection<double> > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<double>, std::default_delete<drake::systems::CompositeEventCollection<double> > > > >::~vector()
0000000000073260  w    F .text	000000000000007b              drake::systems::ContinuousState<drake::symbolic::Expression>::~ContinuousState()
0000000000316bf8 u     O .bss	0000000000000008              drake::lcmt_iiwa_command::getHash()::hash
00000000000b49f0  w    F .text	0000000000000144              void std::vector<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::emplace_back<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > >(std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >&&)
00000000000ae9c0  w    F .text	00000000000001f9              drake::systems::DiagramOutputPort<drake::symbolic::Expression>::DoCalc(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::AbstractValue*) const
0000000000312ff8  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::a_formatter
0000000000074440  w    F .text	000000000000000f              spdlog::details::r_formatter::~r_formatter()
0000000000000000       F *UND*	0000000000000000              drake::manipulation::util::SimDiagramBuilder<double>::AddVisualizer(drake::lcm::DrakeLcmInterface*)
00000000000ed9e0  w    O .rodata	000000000000008b              typeinfo name for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000000f0bc0  w    O .rodata	0000000000000021              typeinfo name for drake::systems::Supervector<double>
00000000000b82c0  w    F .text	00000000000007bd              drake::systems::Diagram<double>::SetDefaultParameters(drake::systems::Context<double> const&, drake::systems::Parameters<double>*) const
00000000000718e0  w    F .text	0000000000000012              drake::systems::Context<double>::set_time(double const&)
000000000008cd90  w    F .text	0000000000000036              std::__shared_ptr<drake::symbolic::ExpressionCell, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<drake::symbolic::ExpressionCell, (__gnu_cxx::_Lock_policy)2> const&)
00000000000ef4a0  w    O .rodata	0000000000000082              typeinfo name for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
00000000000ed060  w    O .rodata	0000000000000032              typeinfo name for drake::systems::CompositeEventCollection<double>& (int)
00000000000c0100  w    F .text	00000000000000b6              std::_Rb_tree<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::_Identity<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::less<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::equal_range(std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&)
0000000000073380  w    F .text	000000000000007b              drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~ContinuousState()
00000000000cd6b0  w    F .text	0000000000000122              void Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> >, Eigen::internal::assign_op<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >(Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>&, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> > const&, Eigen::internal::assign_op<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)
0000000000072960  w    F .text	0000000000000012              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetTargetSystemContinuousState(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
0000000000000000       F *UND*	0000000000000000              __cxa_pure_virtual@@CXXABI_1.3
00000000000cbce0  w    F .text	0000000000000272              drake::systems::DiagramContinuousState<double>::DoClone() const
0000000000073050  w    F .text	0000000000000023              std::_Function_handler<drake::systems::State<double>& (drake::systems::DiagramState<double>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<double>& (drake::systems::DiagramState<double>::*)(int)>::_M_invoke(std::_Any_data const&, drake::systems::DiagramState<double>*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
000000000007b190  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000728b0  w    F .text	0000000000000006              drake::systems::System<drake::symbolic::Expression>::DoGetInitializationEvents(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const
0000000000000000       O *UND*	0000000000000000              typeinfo for drake::systems::ContextBase
0000000000310b18  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::State<drake::symbolic::Expression>& (int)
0000000000000000  w    F *UND*	0000000000000000              __pthread_key_create@@GLIBC_2.2.5
00000000000d0ba0  w    F .text	000000000000004d              drake::systems::Value<drake::lcmt_iiwa_command>::SetFrom(drake::systems::AbstractValue const&)
00000000000f04e0  w    O .rodata	0000000000000090              typeinfo name for std::_Simple_type_wrapper<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>
000000000008a600  w    F .text	00000000000001cf              void fmt::internal::format_decimal<unsigned long, char, fmt::internal::ThousandsSep>(char*, unsigned long, unsigned int, fmt::internal::ThousandsSep)
0000000000072150  w    F .text	0000000000000006              drake::systems::Subvector<drake::symbolic::Expression>::~Subvector()
00000000000d5020  w    F .text	000000000000006f              drake::systems::LeafOutputPort<double>::~LeafOutputPort()
0000000000314098  w    O .data.rel.ro	0000000000000050              vtable for drake::systems::IntegratorBase<double>
0000000000000000       F *UND*	0000000000000000              drake::systems::SystemSymbolicInspector::SystemSymbolicInspector(drake::systems::System<drake::symbolic::Expression> const&)
000000000008a860  w    F .text	000000000000001f              drake::systems::BasicVector<double>::CopyToVector() const
00000000000ded80  w    F .text	000000000000012f              drake::systems::LeafContext<double>::~LeafContext()
0000000000311280  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
0000000000311320  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
0000000000095aa0  w    F .text	0000000000000462              char* fmt::BasicWriter<char>::prepare_int_buffer<fmt::FormatSpec>(unsigned int, fmt::FormatSpec const&, char const*, unsigned int)
00000000000e2dc0  w    F .text	000000000000000f              std::_Sp_counted_ptr_inplace<RigidBodyFrame<double>, Eigen::aligned_allocator<RigidBodyFrame<double> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
00000000000ec7c0  w    O .rodata	0000000000000060              typeinfo name for drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*)
0000000000072c60  w    F .text	000000000000002a              std::_Function_handler<drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*), drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*&&)
0000000000000000       F *UND*	0000000000000000              drake::systems::SystemScalarConverter::Find(std::type_info const&, std::type_info const&) const
0000000000074490  w    F .text	000000000000000f              spdlog::details::e_formatter::~e_formatter()
00000000000db080  w    F .text	000000000000022c              drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >::DoMerge(drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > const&)
00000000000da900  w    F .text	000000000000005a              drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >::add_event(std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > >)
00000000000d7710  w    F .text	0000000000000107              drake::systems::LeafSystem<double>::~LeafSystem()
00000000003119c0  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000f1750  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::z_formatter
0000000000073530  w    F .text	0000000000000060              drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~State()
00000000000efbe0  w    O .rodata	0000000000000039              typeinfo name for drake::systems::Supervector<drake::symbolic::Expression>
00000000000f2460  w    O .rodata	00000000000000a5              typeinfo name for drake::systems::Simulator<double>::IsolateWitnessTriggers(std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*)::{lambda(double const&)#1}
00000000000b4e30  w    F .text	0000000000000045              drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiscreteValues()
00000000000b0b50  w    F .text	000000000000004d              drake::systems::DiagramContinuousState<double>::~DiagramContinuousState()
00000000000eef60  w    O .rodata	0000000000000064              typeinfo name for drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const
00000000000efae0  w    O .rodata	000000000000004b              typeinfo name for drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*) const
0000000000312168  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::Y_formatter
0000000000310d98  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000312800  w    O .data.rel.ro	0000000000000028              typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > (drake::systems::System<double>::*)() const
0000000000311518  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::Supervector<drake::symbolic::Expression>
00000000000dfa10  w    F .text	00000000000001d1              std::_MakeUniq<drake::systems::State<double> >::__single_object std::make_unique<drake::systems::State<double>>()
00000000000904c0  w    F .text	000000000000000a              drake::systems::BasicVector<double>::SetFromVector(Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)
0000000000311660  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>
0000000000099ed0  w    F .text	00000000000001be              std::unique_ptr<drake::systems::Context<double>, std::default_delete<drake::systems::Context<double> > > drake::dynamic_pointer_cast_or_throw<drake::systems::Context<double>, drake::systems::ContextBase>(std::unique_ptr<drake::systems::ContextBase, std::default_delete<drake::systems::ContextBase> >&&)
0000000000316b60 u     O .bss	0000000000000048              drake::systems::CacheEntryValue::dummy()::dummy
00000000000744c0  w    F .text	000000000000000f              spdlog::details::I_formatter::~I_formatter()
00000000000f12a0  w    O .rodata	0000000000000011              typeinfo name for fmt::Buffer<char>
0000000000316580 u     O .data	00000000000000c9              fmt::internal::BasicData<void>::DIGITS
0000000000313110  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::Y_formatter
000000000009d810  w    F .text	000000000000013c              void drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)
0000000000316a40 u     O .bss	0000000000000008              guard variable for drake::NiceTypeName::Get<drake::systems::Context<double> >()::canonical
00000000000f1c80  w    O .rodata	0000000000000024              typeinfo name for drake::systems::DiagramContext<double>
0000000000312e70  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*) const>
000000000008e6c0  w    F .text	00000000000000f0              std::_Function_handler<void (drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>*), drake::systems::Diagram<drake::symbolic::Expression>::Initialize(std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> >)::{lambda(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>*)#1}>::_M_invoke(std::_Any_data const&, drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>*&&)
0000000000000000       O *UND*	0000000000000000              typeinfo for std::runtime_error@@GLIBCXX_3.4
0000000000080450  w    F .text	00000000000002df              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::Clear()
0000000000311630  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>
0000000000312a90  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::SystemScalarConverter::Add<double, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}
00000000000ecfc0  w    O .rodata	000000000000002a              typeinfo name for drake::systems::ContinuousState<double> const& (int)
0000000000310a68  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::ContinuousState<double> const& (int)
0000000000072020  w    F .text	0000000000000006              spdlog::details::f_formatter::~f_formatter()
0000000000073900  w    F .text	0000000000000042              fmt::BasicMemoryWriter<char, std::allocator<char> >::~BasicMemoryWriter()
00000000000853e0  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> >, std::allocator<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > > >::~vector()
00000000000727a0  w    F .text	0000000000000012              drake::systems::System<drake::symbolic::Expression>::DoGetMutableTargetSystemContext(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*) const
0000000000072a00  w    F .text	0000000000000006              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetPerStepEvents(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000316560 g     O .data	0000000000000000              .hidden __dso_handle
000000000007cf90  w    F .text	0000000000000049              drake::systems::Supervector<drake::symbolic::Expression>::~Supervector()
0000000000310cc0  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::CompositeEventCollection<drake::symbolic::Expression>
0000000000312850  w    O .data.rel.ro	0000000000000028              typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > (drake::systems::System<double>::*)() const
0000000000311d48  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::DiagramState<double>
000000000007bae0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000a7c90  w    F .text	00000000000000ee              std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&)
00000000003116b0  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)>
00000000000d6e20 g     F .text	00000000000001dd              drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::set_initial_position(drake::systems::Context<double>*, Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> >) const
0000000000311488  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::CompositeEventCollection<double>& (drake::systems::DiagramCompositeEventCollection<double>::*)(int)
00000000000a07e0  w    F .text	0000000000000633              drake::systems::Simulator<double>::IntegrateContinuousState(double const&, double const&, double const&, double const&, drake::systems::CompositeEventCollection<double>*)
00000000000aef00  w    F .text	0000000000000032              drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::~DiagramCompositeEventCollection()
00000000000bc320  w    F .text	00000000000003e3              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DispatchDiscreteVariableUpdateHandler(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > const&, drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
000000000008d8d0  w    F .text	0000000000000047              drake::systems::DiscreteValues<double>::~DiscreteValues()
00000000000a3e70  w    F .text	000000000000004c              std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >*)
000000000008be40  w    F .text	0000000000000067              spdlog::details::F_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000086670  w    F .text	000000000000006b              std::vector<RigidBodyFrame<double>, std::allocator<RigidBodyFrame<double> > >::~vector()
00000000000c3810  w    F .text	00000000000000b6              std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::_Identity<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::equal_range(std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&)
0000000000072220  w    F .text	0000000000000006              std::_Sp_counted_ptr_inplace<spdlog::sinks::stderr_sink<std::mutex>, std::allocator<spdlog::sinks::stderr_sink<std::mutex> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
0000000000000000       O *UND*	0000000000000000              typeinfo for drake::systems::lcm::SerializerInterface
00000000000e3160  w    F .text	0000000000000115              std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const
0000000000074480  w    F .text	000000000000000f              spdlog::details::f_formatter::~f_formatter()
0000000000076310  w    F .text	000000000000005d              drake::systems::Diagram<drake::symbolic::Expression>::DoCalcWitnessValue(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::WitnessFunction<drake::symbolic::Expression> const&) const
00000000000a6330  w    F .text	000000000000009e              std::_Rb_tree<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_get_insert_unique_pos(std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&)
00000000000ee760  w    O .rodata	0000000000000060              typeinfo name for drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000f2a20  w    O .rodata	000000000000008f              typeinfo name for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > (drake::systems::System<double>::*)() const>
00000000000f2940  w    O .rodata	0000000000000034              typeinfo name for drake::systems::Context<drake::symbolic::Expression>
0000000000000000       F *UND*	0000000000000000              std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@@GLIBCXX_3.4
000000000007a5f0  w    F .text	0000000000000032              drake::systems::lcm::Serializer<drake::lcmt_iiwa_command>::~Serializer()
00000000000f0a40  w    O .rodata	00000000000000a5              typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>
0000000000314a60  w    O .data.rel.ro	0000000000000038              vtable for drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000312878  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000315170  w    O .data.rel.ro	0000000000000218              vtable for drake::examples::kuka_iiwa_arm::IiwaStatusSender
00000000000f1da0  w    O .rodata	000000000000002b              typeinfo name for drake::systems::RungeKutta3Integrator<double>
00000000000b3910  w    F .text	0000000000000148              drake::systems::DiscreteValues<drake::symbolic::Expression>::DiscreteValues(std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> > const&)
0000000000312470  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000079ef0  w    F .text	000000000000005d              drake::systems::System<drake::symbolic::Expression>::DoMapVelocityToQDot(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<drake::symbolic::Expression>*) const
0000000000073950  w    F .text	0000000000000032              spdlog::details::aggregate_formatter::~aggregate_formatter()
00000000000c3cf0  w    F .text	00000000000000c9              std::_Rb_tree<drake::systems::PeriodicEventData, std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > >, std::_Select1st<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > > >, drake::systems::PeriodicEventDataComparator, std::allocator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > > > >::_M_get_insert_unique_pos(drake::systems::PeriodicEventData const&)
00000000000752a0  w    F .text	0000000000000047              drake::systems::DiagramState<drake::symbolic::Expression>::get_mutable_substate(int)
0000000000071d80  w    F .text	0000000000000036              std::_Function_handler<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&)
00000000000724a0  w    F .text	0000000000000012              drake::systems::System<double>::DoGetTargetSystemState(drake::systems::System<double> const&, drake::systems::State<double> const*) const
000000000007e890  w    F .text	000000000000007d              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::~DiagramEventCollection()
0000000000000000       F *UND*	0000000000000000              std::logic_error::what() const@@GLIBCXX_3.4
00000000000ed640  w    O .rodata	000000000000004e              typeinfo name for drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*)
0000000000076ff0  w    F .text	00000000000002b4              drake::systems::Diagram<drake::symbolic::Expression>::DoGetMutableTargetSystemCompositeEventCollection(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const
0000000000071a80  w    F .text	0000000000000006              drake::systems::DiagramOutputPort<double>::~DiagramOutputPort()
00000000000b0b10  w    F .text	0000000000000040              drake::systems::DiagramContinuousState<double>::~DiagramContinuousState()
0000000000073530  w    F .text	0000000000000060              drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~State()
00000000000edba0  w    O .rodata	0000000000000034              typeinfo name for drake::systems::Context<double> const* (drake::systems::System<double> const&, drake::systems::Context<double> const*)
000000000008d580  w    F .text	000000000000003f              std::_MakeUniq<drake::systems::Diagram<double>::Blueprint>::__single_object std::make_unique<drake::systems::Diagram<double>::Blueprint>()
0000000000311758  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*) const>
00000000000ee8e0  w    O .rodata	000000000000006d              typeinfo name for drake::systems::WitnessTriggeredEventData<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000000000       F *UND*	0000000000000000              std::runtime_error::runtime_error(char const*)@@GLIBCXX_3.4.21
0000000000092e60  w    F .text	0000000000000261              drake::systems::IntegratorBase<double>::CalcAdjustedStepSize(double const&, double const&, bool*) const
0000000000000000       F *UND*	0000000000000000              std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9
00000000000e0f90  w    F .text	00000000000004af              drake::systems::LeafSystem<double>::AllocateParameters() const
00000000000f16b0  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::E_formatter
0000000000000000       F *UND*	0000000000000000              drake::manipulation::util::SimDiagramBuilder<double>::ConnectControllersAndVisualizer()
0000000000072660  w    F .text	00000000000000c8              drake::systems::VectorBase<double>::DoPlusEqScaled(std::initializer_list<std::pair<double, drake::systems::VectorBase<double> const&> > const&)
0000000000072110  w    F .text	0000000000000006              spdlog::details::a_formatter::~a_formatter()
0000000000000000  w      *UND*	0000000000000000              _ITM_registerTMCloneTable
00000000000f65c0  w    O .rodata	00000000000000f0              typeinfo name for drake::systems::LeafSystem<double>::MaybeDeclareVectorBaseInequalityConstraint(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, drake::systems::VectorBase<double> const&, std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)> const&)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}
0000000000312970  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > (drake::systems::System<double>::*)() const>
00000000000f1ec0  w    O .rodata	0000000000000025              typeinfo name for drake::systems::ContinuousState<double>
0000000000072d80  w    F .text	000000000000000a              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::size() const
00000000000dfbf0  w    F .text	00000000000000eb              std::_Rb_tree<drake::symbolic::Formula, drake::symbolic::Formula, std::_Identity<drake::symbolic::Formula>, std::less<drake::symbolic::Formula>, std::allocator<drake::symbolic::Formula> >::_M_erase(std::_Rb_tree_node<drake::symbolic::Formula>*)
00000000000f3ba0  w    O .rodata	0000000000000065              typeinfo name for drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000f1670  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::f_formatter
0000000000073000  w    F .text	0000000000000012              drake::systems::internal::DiagramOutput<double>::get_num_ports() const
0000000000077770  w    F .text	00000000000002b4              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetMutableTargetSystemContext(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000f1690  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::F_formatter
00000000000cc390  w    F .text	0000000000000287              std::_MakeUniq<drake::systems::DiagramState<drake::symbolic::Expression> >::__single_object std::make_unique<drake::systems::DiagramState<drake::symbolic::Expression>, int&>(int&)
000000000008fc50  w    F .text	0000000000000096              drake::systems::Diagram<double>::~Diagram()
000000000009de30  w    F .text	00000000000002cb              drake::systems::SystemScalarConverter::SystemScalarConverter<drake::systems::Diagram>(drake::systems::SystemTypeTag<drake::systems::Diagram>, drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)
0000000000075630  w    F .text	000000000000001b              drake::systems::Diagram<drake::symbolic::Expression>::GetParentPathname() const
0000000000072430  w    F .text	000000000000000a              drake::systems::System<double>::DoCalcNonConservativePower(drake::systems::Context<double> const&) const
000000000009d6e0  w    F .text	00000000000000c9              std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}> const&, std::_Manager_operation)
0000000000000000       F *UND*	0000000000000000              ceil@@GLIBC_2.2.5
0000000000086430  w    F .text	00000000000000a5              std::unique_ptr<drake::systems::lcm::LcmPublisherSystem, std::default_delete<drake::systems::lcm::LcmPublisherSystem> > drake::systems::lcm::LcmPublisherSystem::Make<drake::lcmt_iiwa_status>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, drake::lcm::DrakeLcmInterface*)
0000000000097690  w    F .text	0000000000000219              fmt::internal::ArgFormatterBase<fmt::ArgFormatter<char>, char, fmt::FormatSpec>::visit_char(int)
000000000007b900  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*), drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000090b50  w    F .text	0000000000000059              drake::systems::Simulator<double>::HandleDiscreteUpdate(drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > const&)
0000000000072000  w    F .text	0000000000000006              spdlog::details::E_formatter::~E_formatter()
0000000000073320  w    F .text	0000000000000060              drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~CompositeEventCollection()
00000000000720a0  w    F .text	0000000000000006              spdlog::details::Y_formatter::~Y_formatter()
00000000000ecc00  w    O .rodata	0000000000000068              typeinfo name for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (int)
0000000000083bf0  w    F .text	000000000000003f              spdlog::details::async_log_helper::async_msg::~async_msg()
0000000000072230  w    F .text	000000000000002f              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::Clear()
00000000000f1350  w    O .rodata	0000000000000014              typeinfo name for spdlog::formatter
0000000000313278  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::F_formatter
00000000000ed2c0  w    O .rodata	0000000000000064              typeinfo name for drake::systems::Context<drake::symbolic::Expression>& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
0000000000312aa0  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}
00000000000866e0  w    F .text	000000000000006e              std::_Hashtable<drake::systems::WitnessFunction<double> const*, std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, std::allocator<std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > > >, std::__detail::_Select1st, std::equal_to<drake::systems::WitnessFunction<double> const*>, std::hash<drake::systems::WitnessFunction<double> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::~_Hashtable()
00000000000750b0  w    F .text	000000000000006e              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetMutableSubsystemContext(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
000000000008f390  w    F .text	00000000000000a6              drake::systems::Diagram<double>::AllocateForcedPublishEventCollection() const
0000000000074e70  w    F .text	0000000000000033              drake::systems::System<double>::DoCalcTimeDerivatives(drake::systems::Context<double> const&, drake::systems::ContinuousState<double>*) const
0000000000072860  w    F .text	0000000000000006              drake::systems::System<drake::symbolic::Expression>::GetGraphvizFragment(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000dcc70  w    F .text	00000000000002c5              drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::DoMerge(drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > const&)
00000000000c9a30  w    F .text	000000000000027a              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateTimeDerivatives() const
0000000000000000       F *UND*	0000000000000000              nanosleep@@GLIBC_2.2.5
0000000000074410  w    F .text	000000000000000f              spdlog::details::z_formatter::~z_formatter()
0000000000000000       F *UND*	0000000000000000              memcmp@@GLIBC_2.2.5
00000000003110c8  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::ContinuousState<drake::symbolic::Expression> const& (drake::systems::DiagramContinuousState<drake::symbolic::Expression>::*)(int) const
0000000000086bd0  w    F .text	0000000000000083              drake::symbolic::Expression::Expression()
0000000000310eb0  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000081320  w    F .text	0000000000000324              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::HasEvents() const
000000000009a8f0  w    F .text	00000000000000e2              spdlog::pattern_formatter::format(spdlog::details::log_msg&)
00000000000b1e20  w    F .text	00000000000001a4              drake::systems::Diagram<drake::symbolic::Expression>::AllocateCompositeEventCollection() const
000000000009ca00  w    F .text	0000000000000153              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >()
0000000000085060  w    F .text	000000000000005d              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::set_accuracy(stx::optional<double> const&)
00000000000be240  w    F .text	0000000000000104              __gnu_cxx::__normal_iterator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > > std::__find_if<__gnu_cxx::__normal_iterator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > >, __gnu_cxx::__ops::_Iter_equals_val<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const> >(__gnu_cxx::__normal_iterator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > >, __gnu_cxx::__normal_iterator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > >, __gnu_cxx::__ops::_Iter_equals_val<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const>, std::random_access_iterator_tag)
0000000000074b40  w    F .text	0000000000000032              fmt::SystemError::~SystemError()
0000000000000000       F *UND*	0000000000000000              std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@@GLIBCXX_3.4
00000000000f1280  w    O .rodata	0000000000000017              typeinfo name for fmt::BasicWriter<char>
00000000000f1510  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::c_formatter
0000000000072d50  w    F .text	0000000000000023              std::_Function_handler<drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression> const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
000000000008ac80  w    F .text	0000000000000024              drake::systems::DiagramBuilder<double>::~DiagramBuilder()
0000000000313188  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::H_formatter
0000000000000000       F *UND*	0000000000000000              std::_Rb_tree_increment(std::_Rb_tree_node_base*)@@GLIBCXX_3.4
0000000000000000       F *UND*	0000000000000000              fwrite@@GLIBC_2.2.5
00000000000743a0  w    F .text	000000000000000f              fmt::BasicWriter<char>::~BasicWriter()
00000000003168a0 u     O .bss	0000000000000020              drake::NiceTypeName::Get<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >()::canonical[abi:cxx11]
00000000000c56b0  w    F .text	0000000000000149              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateDiscreteVariables() const
00000000000720d0  w    F .text	0000000000000006              spdlog::details::c_formatter::~c_formatter()
00000000000bc020  w    F .text	00000000000002e1              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::set_value(Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)
00000000000bdb20  w    F .text	00000000000000f3              drake::systems::lcm::Serializer<drake::lcmt_iiwa_command>::CreateDefaultValue() const
00000000000cfd10  w    F .text	0000000000000018              drake::systems::Supervector<drake::symbolic::Expression>::GetAtIndex(int)
00000000000e48f0  w    F .text	00000000000002d0              std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator=(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)
0000000000074660  w    F .text	0000000000000024              drake::systems::PublishEvent<double>::~PublishEvent()
0000000000072190  w    F .text	0000000000000020              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcKineticEnergy(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
00000000000aeff0  w    F .text	0000000000000040              drake::systems::DiagramContinuousState<drake::symbolic::Expression>::~DiagramContinuousState()
0000000000314078  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::InputPortDescriptor<double>
0000000000000000       F *UND*	0000000000000000              RigidBody<double>::get_model_instance_id() const
0000000000311398  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::State<double>& (drake::systems::DiagramState<double>::*)(int)
0000000000314308  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >
00000000000ee960  w    O .rodata	000000000000005c              typeinfo name for drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000d51d0  w    F .text	0000000000000011              drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >::HasEvents() const
00000000000d7ae0  w    F .text	00000000000000bc              void Eigen::internal::call_assignment<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, 1, 0, -1, 1>, -1, 1, false>, -1, 1, false>, Eigen::Matrix<double, -1, 1, 0, -1, 1> >(Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, 1, 0, -1, 1>, -1, 1, false>, -1, 1, false>&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&)
00000000000f14d0  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::b_formatter
00000000000f1770  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::t_formatter
00000000000a7100  w    F .text	000000000000008d              std::_Rb_tree_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> > std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<double> const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<double> const* const&>&&, std::tuple<>&&)
00000000000f0fe0  w    O .rodata	0000000000000078              typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<double> const& (drake::systems::DiagramCompositeEventCollection<double>::*)(int) const>
00000000000ef1e0  w    O .rodata	00000000000000a5              typeinfo name for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
0000000000314c70  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::LeafContext<double>
0000000000314c88  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::LeafSystemOutput<double>
0000000000312e00  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*) const
000000000008dd50  w    F .text	00000000000005b3              drake::systems::Simulator<double>::IsolateWitnessTriggers(std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*)
00000000000b9c40  w    F .text	000000000000014b              drake::systems::OutputPort<drake::symbolic::Expression>::Allocate() const
00000000000ade60  w    F .text	000000000000039d              drake::systems::Diagram<drake::symbolic::Expression>::Diagram(std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> >)
00000000000f2e60  w    O .rodata	00000000000000dd              typeinfo name for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}
00000000000dcc40  w    F .text	0000000000000026              drake::systems::LeafSystem<double>::AllocateForcedUnrestrictedUpdateEventCollection() const
00000000003109d8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
000000000009f6b0  w    F .text	0000000000000270              drake::systems::Diagram<double>::Diagram(std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> >)
0000000000073900  w    F .text	0000000000000042              fmt::BasicMemoryWriter<char, std::allocator<char> >::~BasicMemoryWriter()
00000000000be030  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::Context<double>, std::default_delete<drake::systems::Context<double> > >, std::allocator<std::unique_ptr<drake::systems::Context<double>, std::default_delete<drake::systems::Context<double> > > > >::~vector()
0000000000083b00  w    F .text	000000000000008b              spdlog::details::log_msg::~log_msg()
0000000000073fc0  w    F .text	0000000000000047              drake::systems::Supervector<drake::symbolic::Expression>::~Supervector()
000000000008c5a0  w    F .text	0000000000000025              spdlog::details::T_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000db500  w    F .text	0000000000000156              void std::vector<std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > >, std::allocator<std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > > > >::emplace_back<std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > > >(std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > >&&)
0000000000000000       F *UND*	0000000000000000              std::__throw_bad_function_call()@@GLIBCXX_3.4.14
00000000000f4d40  w    O .rodata	00000000000000c2              typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>
00000000000a3bf0  w    F .text	0000000000000171              void std::vector<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > > >::emplace_back<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > >(std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > >&&)
00000000000f0200  w    O .rodata	0000000000000093              typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int) const>
000000000008aae0  w    F .text	000000000000004c              std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_erase(std::_Rb_tree_node<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >*)
000000000008b740  w    F .text	0000000000000063              fmt::BasicWriter<char>::fill_padding(char*, unsigned int, unsigned long, wchar_t)
00000000000f21c0  w    O .rodata	000000000000005e              typeinfo name for std::_Sp_counted_ptr_inplace<spdlog::pattern_formatter, std::allocator<spdlog::pattern_formatter>, (__gnu_cxx::_Lock_policy)2>
00000000000c50c0  w    F .text	0000000000000141              drake::systems::DiagramDiscreteValues<double>::DoClone() const
00000000000908f0  w    F .text	000000000000025f              drake::systems::Diagram<double>::DispatchDiscreteVariableUpdateHandler(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > const&, drake::systems::DiscreteValues<double>*) const
00000000000868d0  w    F .text	0000000000000030              spdlog::details::a_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000826d0  w    F .text	0000000000000137              drake::systems::BasicVector<double>::NormInf() const
0000000000311f48  w    O .data.rel.ro	0000000000000018              typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>
000000000008c4e0  w    F .text	0000000000000041              spdlog::details::D_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000bba50  w    F .text	0000000000000104              __gnu_cxx::__normal_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > > std::__find_if<__gnu_cxx::__normal_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > >, __gnu_cxx::__ops::_Iter_equals_val<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const> >(__gnu_cxx::__normal_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > >, __gnu_cxx::__normal_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > >, __gnu_cxx::__ops::_Iter_equals_val<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const>, std::random_access_iterator_tag)
00000000000aebc0  w    F .text	00000000000000c4              drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Calc(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::AbstractValue*) const
00000000000b17d0  w    F .text	0000000000000648              drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::DiagramCompositeEventCollection(std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, std::default_delete<drake::systems::CompositeEventCollection<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, std::default_delete<drake::systems::CompositeEventCollection<drake::symbolic::Expression> > > > >)
0000000000074270  w    F .text	0000000000000057              drake::systems::WitnessTriggeredEventData<double>::DoClone() const
00000000000f0980  w    O .rodata	00000000000000b6              typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)>
00000000003130e8  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::D_formatter
0000000000311580  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::State<drake::symbolic::Expression> const& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int) const>
000000000007dcb0  w    F .text	00000000000001ed              drake::systems::Diagram<drake::symbolic::Expression>::DispatchPublishHandler(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > const&) const
00000000000e1440  w    F .text	0000000000000468              drake::systems::SystemSymbolicInspector::~SystemSymbolicInspector()
00000000000db970  w    F .text	000000000000003f              drake::systems::Value<drake::systems::BasicVector<double> >::SetFrom(drake::systems::AbstractValue const&)
0000000000073760  w    F .text	000000000000000d              drake::systems::DiagramContext<drake::symbolic::Expression>::get_mutable_parameters()
0000000000074970  w    F .text	0000000000000024              drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~ContinuousState()
0000000000313408  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::v_formatter
000000000007c4a0  w    F .text	0000000000000061              drake::systems::BasicVector<double>::GetAtIndex(int) const
0000000000072a70  w    F .text	000000000000004f              drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Parameters()
00000000000c9140  w    F .text	0000000000000272              drake::systems::DiagramContinuousState<drake::symbolic::Expression>::DoClone() const
000000000009bcc0  w    F .text	00000000000000f0              std::_Rb_tree_iterator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > > std::_Rb_tree<std::pair<drake::systems::System<double> const*, int>, std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > >, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<double> const*, int> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > >, std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<double> const*, int> const&>&&, std::tuple<>&&)
0000000000000000       F *UND*	0000000000000000              drake::manipulation::util::SimDiagramBuilder<double>::AddPlant(std::unique_ptr<RigidBodyTree<double>, std::default_delete<RigidBodyTree<double> > >)
00000000000f23e0  w    O .rodata	0000000000000080              typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<double>& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>
00000000000f6520  w    O .rodata	00000000000000a0              typeinfo name for drake::systems::LeafSystem<double>::MakeAllocCallback<drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&)::{lambda()#1}
0000000000000000       F *UND*	0000000000000000              std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@@GLIBCXX_3.4
000000000007e630  w    F .text	0000000000000124              drake::systems::System<drake::symbolic::Expression>::DoCalcConstraintErrorNorm(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&) const
000000000009dc90  w    F .text	000000000000005e              std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)>::function(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)
000000000007b370  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*), drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
000000000008a290  w    F .text	00000000000000df              spdlog::details::pid_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000312670  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >
0000000000072d20  w    F .text	000000000000002a              std::_Function_handler<drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*), drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*&&)
00000000000ee580  w    O .rodata	000000000000006a              typeinfo name for drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000edd00  w    O .rodata	000000000000006f              typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > ()
0000000000311230  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
0000000000311b20  w    O .data.rel.ro	0000000000000080              vtable for drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000ba4d0  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::SystemOutput<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemOutput<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::SystemOutput<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemOutput<drake::symbolic::Expression> > > > >::~vector()
0000000000313670  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::Value<int>
0000000000083b00  w    F .text	000000000000008b              spdlog::details::log_msg::~log_msg()
00000000000f3b20  w    O .rodata	0000000000000067              typeinfo name for drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000071fc0  w    F .text	0000000000000006              spdlog::details::T_formatter::~T_formatter()
0000000000311d20  w    O .data.rel.ro	0000000000000028              vtable for drake::systems::DiagramDiscreteValues<double>
00000000000a3be0  w    F .text	000000000000000c              non-virtual thunk to drake::systems::Diagram<drake::symbolic::Expression>::~Diagram()
00000000000720f0  w    F .text	0000000000000006              spdlog::details::b_formatter::~b_formatter()
0000000000084fc0  w    F .text	0000000000000011              drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::set_accuracy(stx::optional<double> const&)
0000000000089f80  w    F .text	000000000000011e              drake::systems::Simulator<double>::~Simulator()
00000000000cf090  w    F .text	0000000000000318              drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetSubvectorAndOffset(int) const
00000000000a7d80  w    F .text	000000000000008d              std::_Rb_tree_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> > std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&>&&, std::tuple<>&&)
0000000000074d60  w    F .text	000000000000002a              std::_Function_handler<void* (void const*), drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}>::_M_invoke(std::_Any_data const&, void const*&&)
00000000000cb180  w    F .text	0000000000000122              drake::systems::DiagramContext<double>::MakeState()
00000000000728c0  w    F .text	0000000000000010              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateTimeDerivatives() const
0000000000312680  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >
00000000000d4fb0  w    F .text	0000000000000067              drake::systems::DiscreteUpdateEvent<double>::~DiscreteUpdateEvent()
00000000000f5ca0  w    O .rodata	0000000000000034              typeinfo name for std::default_delete<drake::systems::AbstractValue>
000000000007e090  w    F .text	00000000000001df              drake::systems::Diagram<drake::symbolic::Expression>::DoCalcTimeDerivatives(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression>*) const
00000000000b9a20  w    F .text	0000000000000219              drake::systems::OutputPort<drake::symbolic::Expression>::GetPortIdString() const
00000000000d5170  w    F .text	0000000000000008              drake::systems::UnrestrictedUpdateEvent<double>::is_discrete_update() const
0000000000071fa0  w    F .text	0000000000000006              spdlog::details::t_formatter::~t_formatter()
00000000000d5570  w    F .text	000000000000006f              drake::systems::LeafSystemOutput<double>::~LeafSystemOutput()
0000000000072f40  w    F .text	000000000000002a              std::_Function_handler<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*), drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*&&)
0000000000000000       F *UND*	0000000000000000              drake::systems::Simulator<double>::ResetStatistics()
00000000000f0c00  w    O .rodata	0000000000000050              typeinfo name for std::_Simple_type_wrapper<drake::systems::State<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double>*) const>
00000000000d5a40  w    F .text	0000000000000079              std::_Function_base::_Base_manager<drake::systems::LeafSystem<double>::DeclareVectorOutputPort<drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque, drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&, void (drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::*)(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*) const)::{lambda(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::LeafSystem<double>::DeclareVectorOutputPort<drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque, drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&, void (drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::*)(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*) const)::{lambda(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)#1}> const&, std::_Manager_operation)
00000000000dadf0  w    F .text	0000000000000156              void std::vector<std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > > > >::emplace_back<std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > > >(std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > >&&)
0000000000084870  w    F .text	0000000000000063              std::vector<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >, std::allocator<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > > >::~vector()
0000000000086290  w    F .text	000000000000003e              drake::systems::Diagram<double>::DoAllocateInputVector(drake::systems::InputPortDescriptor<double> const&) const
000000000007b9c0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*), drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000e23e0  w    F .text	00000000000000cd              drake::systems::LeafSystem<double>::AllocateContinuousState() const
000000000007ea10  w    F .text	000000000000007d              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::~DiagramEventCollection()
0000000000073f10  w    F .text	000000000000000a              std::_Sp_counted_ptr_inplace<spdlog::sinks::stderr_sink<std::mutex>, std::allocator<spdlog::sinks::stderr_sink<std::mutex> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
00000000000862d0  w    F .text	000000000000003e              drake::systems::Diagram<double>::DoAllocateInputAbstract(drake::systems::InputPortDescriptor<double> const&) const
00000000000d78b0  w    F .text	0000000000000039              drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::~IiwaContactResultsToExternalTorque()
00000000000d5140  w    F .text	0000000000000022              std::_Sp_counted_deleter<drake::systems::AbstractValue*, std::default_delete<drake::systems::AbstractValue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
000000000007b480  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*), drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000310ba8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Context<drake::symbolic::Expression> const& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000000deeb0  w    F .text	00000000000000f9              std::vector<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > > >::reserve(unsigned long)
00000000000cc780  w    F .text	000000000000015a              drake::systems::DiagramContext<drake::symbolic::Expression>::MakeState()
0000000000314e30  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiscreteUpdateEvent<double>
0000000000310f38  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramContinuousState<double>
0000000000314d10  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::LeafSystemOutput<double>
0000000000093f50  w    F .text	00000000000000e3              drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetFromVector(Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)
00000000000f5ce0  w    O .rodata	0000000000000021              typeinfo name for drake::systems::LeafContext<double>
00000000000bdfc0  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::SystemOutput<double>, std::default_delete<drake::systems::SystemOutput<double> > >, std::allocator<std::unique_ptr<drake::systems::SystemOutput<double>, std::default_delete<drake::systems::SystemOutput<double> > > > >::~vector()
00000000003124f0  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::DiscreteValues<drake::symbolic::Expression>
00000000000debf0  w    F .text	0000000000000014              drake::systems::LeafSystem<double>::DoGetInitializationEvents(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*) const
000000000007fb70  w    F .text	000000000000018f              drake::systems::Diagram<double>::SetRandomState(drake::systems::Context<double> const&, drake::systems::State<double>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@GLIBCXX_3.4.21
0000000000074010  w    F .text	0000000000000047              drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Supervector()
00000000000e30f0  w    F .text	0000000000000063              std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()
0000000000000000       F *UND*	0000000000000000              drake::systems::lcm::LcmPublisherSystem::set_publish_period(double)
00000000000717a0  w    F .text	0000000000000060              drake::systems::State<double>::~State()
0000000000314b18  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000313430  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::ch_formatter
0000000000310a98  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*)
0000000000097340  w    F .text	000000000000034d              void fmt::BasicWriter<char>::write_int<int, fmt::FormatSpec>(int, fmt::FormatSpec)
00000000000c1b80  w    F .text	000000000000032d              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateOutput(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
00000000000bbb60  w    F .text	0000000000000226              drake::systems::Diagram<drake::symbolic::Expression>::EvalConnectedSubsystemInputPort(drake::systems::ContextBase const&, drake::systems::InputPortBase const&) const
00000000000843c0  w    F .text	00000000000001c7              drake::lcmt_iiwa_status::_encodeNoHash(void*, int, int) const
0000000000316940 u     O .bss	0000000000000008              guard variable for drake::NiceTypeName::Get<drake::systems::Diagram<drake::symbolic::Expression> >()::canonical
00000000000729e0  w    F .text	0000000000000006              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetGraphvizOutputPortToken(drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000d7910  w    F .text	0000000000000032              drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::~IiwaCommandReceiver()
0000000000071d40  w    F .text	0000000000000036              std::_Function_handler<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&)
0000000000311928  w    O .data.rel.ro	0000000000000078              vtable for drake::systems::Subvector<drake::symbolic::Expression>
00000000003115e0  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int) const>
000000000009dcf0  w    F .text	000000000000013c              void drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)
0000000000072440  w    F .text	0000000000000006              drake::systems::Subvector<double>::~Subvector()
00000000000f16f0  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::r_formatter
00000000000ddd50  w    F .text	0000000000000080              drake::systems::UnrestrictedUpdateEvent<double>::DoClone() const
0000000000000000       F *UND*	0000000000000000              drake::systems::DrakeVisualizer::set_publish_period(double)
0000000000312d00  w    O .data.rel.ro	0000000000000028              typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const
00000000000c4d60  w    F .text	0000000000000201              drake::systems::DiagramDiscreteValues<double>::DiagramDiscreteValues(std::vector<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > > > >)
0000000000313138  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::m_formatter
00000000000e3030  w    F .text	00000000000000b7              KinematicsCache<double>::~KinematicsCache()
00000000000efa80  w    O .rodata	000000000000005c              typeinfo name for drake::systems::CompositeEventCollection<double>& (drake::systems::DiagramCompositeEventCollection<double>::*)(int)
00000000000d5830  w    F .text	0000000000000065              drake::systems::LeafSystem<double>::GetGraphvizOutputPortToken(drake::systems::OutputPort<double> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000e3f70  w    F .text	00000000000002fa              std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)
00000000000daf50  w    F .text	00000000000000cb              void std::vector<drake::systems::DiscreteUpdateEvent<double> const*, std::allocator<drake::systems::DiscreteUpdateEvent<double> const*> >::emplace_back<drake::systems::DiscreteUpdateEvent<double> const*>(drake::systems::DiscreteUpdateEvent<double> const*&&)
00000000003133e0  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::i_formatter
0000000000090d80  w    F .text	000000000000002b              drake::systems::BasicVector<double>::SetZero()
0000000000312db0  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
0000000000316740 g     O .data	0000000000000008              fLD::FLAGS_nosimulation_sec
0000000000071990  w    F .text	0000000000000006              drake::systems::WitnessTriggeredEventData<double>::~WitnessTriggeredEventData()
00000000000d52a0  w    F .text	000000000000000d              drake::systems::LeafContext<double>::get_mutable_parameters()
00000000000af9e0  w    F .text	000000000000003f              drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramCompositeEventCollection()
0000000000310968  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
0000000000071e90  w    F .text	0000000000000035              std::_Function_handler<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000074590  w    F .text	000000000000000f              spdlog::details::level_formatter::~level_formatter()
0000000000073170  w    F .text	0000000000000023              std::_Function_handler<drake::systems::CompositeEventCollection<double>& (drake::systems::DiagramCompositeEventCollection<double>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<double>& (drake::systems::DiagramCompositeEventCollection<double>::*)(int)>::_M_invoke(std::_Any_data const&, drake::systems::DiagramCompositeEventCollection<double>*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
00000000000ba5b0  w    F .text	000000000000004c              std::_Rb_tree<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::_Identity<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::less<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >*)
00000000000ed3e0  w    O .rodata	000000000000004c              typeinfo name for drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*)
0000000000312f28  w    O .data.rel.ro	0000000000000028              vtable for fmt::FormatError
0000000000312c50  w    O .data.rel.ro	0000000000000028              typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const
0000000000310d80  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::Subvector<drake::symbolic::Expression>
00000000000c82b0  w    F .text	00000000000000e8              void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)
0000000000316a60 u     O .bss	0000000000000020              drake::NiceTypeName::Get<drake::systems::Context<double> >()::canonical[abi:cxx11]
000000000008a7d0  w    F .text	0000000000000089              Eigen::DenseStorage<double, -1, -1, 1, 0>::DenseStorage(Eigen::DenseStorage<double, -1, -1, 1, 0> const&)
000000000008fcf0  w    F .text	000000000000000c              non-virtual thunk to drake::systems::Diagram<double>::~Diagram()
0000000000086870  w    F .text	0000000000000030              spdlog::details::b_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000ac870  w    F .text	0000000000000025              std::_Function_handler<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&), drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const&)
00000000000d8510  w    F .text	000000000000005e              std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)>::function(std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)> const&)
00000000000f1c20  w    O .rodata	0000000000000020              typeinfo name for drake::systems::OutputPort<double>
0000000000083430  w    F .text	0000000000000094              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoAllocateInputAbstract(drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
0000000000073d90  w    F .text	000000000000007b              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::~DiagramEventCollection()
0000000000072500  w    F .text	0000000000000012              drake::systems::System<double>::DoGetTargetSystemCompositeEventCollection(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*) const
00000000000b7990  w    F .text	0000000000000144              void std::vector<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > > > >::emplace_back<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > > >(std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > >&&)
0000000000312d90  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>
00000000000f2140  w    O .rodata	0000000000000065              typeinfo name for drake::systems::Context<double>& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000003142d0  w    O .data.rel.ro	0000000000000038              vtable for drake::systems::DiagramOutputPort<double>
000000000007a770  w    F .text	0000000000000032              drake::systems::InputPortDescriptor<double>::~InputPortDescriptor()
0000000000312a70  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::SystemScalarConverter::Add<double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}
00000000000f3ac0  w    O .rodata	000000000000005d              typeinfo name for drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >
00000000000f19c0  w    O .rodata	000000000000001a              typeinfo name for drake::systems::State<double>
00000000000efec0  w    O .rodata	000000000000006c              typeinfo name for std::_Simple_type_wrapper<drake::systems::State<drake::symbolic::Expression> const& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int) const>
0000000000000000       F *UND*	0000000000000000              drake::systems::ContextBase::GetSystemPathname[abi:cxx11]() const
000000000007a1c0  w    F .text	0000000000000088              drake::systems::Diagram<double>::GetGraphvizInputPortToken(drake::systems::InputPortDescriptor<double> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
000000000007c860  w    F .text	0000000000000069              drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetAtIndex(int)
00000000000ef3a0  w    O .rodata	0000000000000077              typeinfo name for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
00000000000f3500  w    O .rodata	00000000000000a6              typeinfo name for drake::systems::SystemScalarConverter::Add<double, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}
00000000000c5210  w    F .text	0000000000000287              void std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> >::_M_range_insert<__gnu_cxx::__normal_iterator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* const*, std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> > > >(__gnu_cxx::__normal_iterator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >**, std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> > >, __gnu_cxx::__normal_iterator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* const*, std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> > >, __gnu_cxx::__normal_iterator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* const*, std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> > >, std::forward_iterator_tag)
0000000000312430  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::Value<int>
0000000000314a98  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000310b08  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*)
00000000000748e0  w    F .text	0000000000000024              drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~State()
00000000000f3720  w    O .rodata	0000000000000082              typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<double> const& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>
0000000000072030  w    F .text	0000000000000006              spdlog::details::e_formatter::~e_formatter()
0000000000317120 u     O .bss	0000000000000008              guard variable for drake::NiceTypeName::Get<drake::systems::ContactResults<double> >()::canonical
00000000000e4360  w    F .text	000000000000002e              void std::vector<float, std::allocator<float> >::emplace_back<float>(float&&)
00000000000b6770  w    F .text	00000000000008d2              drake::systems::ContinuousState<double>::ContinuousState(std::unique_ptr<drake::systems::VectorBase<double>, std::default_delete<drake::systems::VectorBase<double> > >, int, int, int)
00000000000917a0  w    F .text	000000000000049e              drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::NormInf() const
00000000000b6250  w    F .text	0000000000000148              drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiscreteValues(std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> > const&)
0000000000072f70  w    F .text	0000000000000023              std::_Function_handler<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)>::_M_invoke(std::_Any_data const&, drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000073a90  w    F .text	000000000000007b              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::~DiagramEventCollection()
0000000000312090  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::level_formatter
00000000003132f0  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::r_formatter
00000000000d5740  w    F .text	000000000000003f              drake::systems::LeafSystem<double>::DoCalcWitnessValue(drake::systems::Context<double> const&, drake::systems::WitnessFunction<double> const&) const
000000000007a490  w    F .text	0000000000000018              stx::bad_optional_access::~bad_optional_access()
0000000000312f78  w    O .data.rel.ro	0000000000000030              vtable for spdlog::sinks::sink
000000000007a030  w    F .text	000000000000001e              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::add_event(std::unique_ptr<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > >)
00000000000a2e90  w    F .text	00000000000002da              std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > drake::systems::Diagram<drake::symbolic::Expression>::AllocateForcedEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >(std::function<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression> const*)>) const
0000000000312d50  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>
00000000000a0130  w    F .text	000000000000034c              drake::systems::IntegratorBase<double>::StepOnceErrorControlledAtMost(double const&)
0000000000074b80  w    F .text	0000000000000014              spdlog::sinks::stderr_sink<std::mutex>::_flush()
00000000000749e0  w    F .text	000000000000003b              drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramOutput()
0000000000076050  w    F .text	00000000000002b4              drake::systems::Diagram<drake::symbolic::Expression>::DoGetTargetSystemContext(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*) const
00000000000b1280  w    F .text	0000000000000151              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<int>()
00000000000d6700  w    F .text	0000000000000351              drake::systems::LeafSystem<double>::GetGraphvizFragment(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
0000000000314470  w    O .data.rel.ro	0000000000000070              vtable for drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000f14f0  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::B_formatter
0000000000089f80  w    F .text	000000000000011e              drake::systems::Simulator<double>::~Simulator()
0000000000000000       F *UND*	0000000000000000              std::__throw_logic_error(char const*)@@GLIBCXX_3.4
0000000000076430  w    F .text	00000000000000b3              drake::systems::Diagram<drake::symbolic::Expression>::DoValidateAllocatedContext(drake::systems::ContextBase const&) const
0000000000071980  w    F .text	0000000000000006              drake::systems::System<double>::DoGetWitnessFunctions(drake::systems::Context<double> const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*) const
0000000000072b60  w    F .text	0000000000000035              std::_Function_handler<drake::systems::Context<drake::symbolic::Expression>& (drake::systems::DiagramContext<drake::symbolic::Expression>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<drake::symbolic::Expression>& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>::_M_invoke(std::_Any_data const&, drake::systems::DiagramContext<drake::symbolic::Expression>*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
00000000000db790  w    F .text	00000000000000cf              std::function<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > ()> drake::systems::LeafSystem<double>::MakeAllocCallback<drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&)
0000000000314348  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >
0000000000073420  w    F .text	000000000000000a              drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::v_selector(drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
0000000000312040  w    O .data.rel.ro	0000000000000010              typeinfo for spdlog::formatter
00000000003132c8  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::p_formatter
000000000007cb00  w    F .text	0000000000000061              drake::systems::BasicVector<drake::symbolic::Expression>::GetAtIndex(int)
0000000000081650  w    F .text	0000000000000324              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::HasEvents() const
000000000007db90  w    F .text	0000000000000085              drake::systems::DiagramState<double>::~DiagramState()
00000000000ee480  w    O .rodata	000000000000006a              typeinfo name for drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000000000       F *UND*	0000000000000000              localeconv@@GLIBC_2.2.5
00000000000f3180  w    O .rodata	00000000000000cc              typeinfo name for drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}
00000000000d51b0  w    F .text	0000000000000011              drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >::HasEvents() const
0000000000074520  w    F .text	000000000000000f              spdlog::details::C_formatter::~C_formatter()
0000000000313458  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::aggregate_formatter
000000000007a570  w    F .text	000000000000001f              drake::systems::System<drake::symbolic::Expression>::DoCalcConservativePower(drake::systems::Context<drake::symbolic::Expression> const&) const
00000000000f5d20  w    O .rodata	0000000000000026              typeinfo name for drake::systems::LeafSystemOutput<double>
0000000000000000       F *UND*	0000000000000000              drake::systems::controllers::InverseDynamicsController<double>::InverseDynamicsController(std::unique_ptr<RigidBodyTree<double>, std::default_delete<RigidBodyTree<double> > >, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, bool)
00000000003112a8  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const
00000000000f2640  w    O .rodata	0000000000000075              typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > (drake::systems::System<double>::*)() const
00000000000e44f0  w    F .text	0000000000000153              std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000073460  w    F .text	000000000000000a              drake::systems::DiagramContinuousState<double>::v_selector(drake::systems::ContinuousState<double>*)
00000000003131b0  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::I_formatter
000000000008cdd0  w    F .text	0000000000000450              drake::systems::BasicVector<drake::symbolic::Expression>::ScaleAndAddToVector(drake::symbolic::Expression const&, Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>, 0, Eigen::InnerStride<1> >) const
0000000000316768 g     O .data	0000000000000000              .hidden __TMC_END__
0000000000000000       F *UND*	0000000000000000              memcpy@@GLIBC_2.14
00000000000e4bc0  w    F .text	000000000000015a              std::vector<float, std::allocator<float> >::operator=(std::vector<float, std::allocator<float> > const&)
0000000000074620  w    F .text	000000000000003f              fmt::internal::MemoryBuffer<char, 500ul, std::allocator<char> >::~MemoryBuffer()
0000000000000000       F *UND*	0000000000000000              drake::NiceTypeName::Canonicalize(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000000008 u       .tbss	0000000000000008              spdlog::details::os::thread_id()::tid
0000000000084870  w    F .text	0000000000000063              std::vector<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >, std::allocator<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > > >::~vector()
00000000000ede60  w    O .rodata	0000000000000084              typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > ()
00000000000ed140  w    O .rodata	0000000000000057              typeinfo name for drake::systems::VectorBase<drake::symbolic::Expression>& (drake::systems::ContinuousState<drake::symbolic::Expression>*)
00000000000729d0  w    F .text	0000000000000006              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetGraphvizInputPortToken(drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
0000000000000000       F *UND*	0000000000000000              std::bad_alloc::~bad_alloc()@@GLIBCXX_3.4
0000000000312458  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::PeriodicEventData
0000000000314f58  w    O .data.rel.ro	0000000000000218              vtable for drake::systems::LeafSystem<double>
0000000000096060  w    F .text	000000000000010f              std::_Hashtable<int, std::pair<int const, drake::systems::controllers::StateFeedbackControllerInterface<double>*>, std::allocator<std::pair<int const, drake::systems::controllers::StateFeedbackControllerInterface<double>*> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)
000000000008b7b0  w    F .text	0000000000000478              char* fmt::BasicWriter<char>::prepare_int_buffer<fmt::AlignSpec>(unsigned int, fmt::AlignSpec const&, char const*, unsigned int)
00000000000c0f80  w    F .text	00000000000000c9              std::_Rb_tree<drake::systems::PeriodicEventData, std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >, std::_Select1st<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > >, drake::systems::PeriodicEventDataComparator, std::allocator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > > >::_M_get_insert_unique_pos(drake::systems::PeriodicEventData const&)
00000000000d7320  w    F .text	00000000000002b4              drake::systems::System<double>::DeclareInputPort(drake::systems::PortDataType, int, stx::optional<drake::RandomDistribution>)
0000000000071700  w    F .text	0000000000000010              drake::systems::System<double>::AllocateTimeDerivatives() const
0000000000314268  w    O .data.rel.ro	0000000000000030              vtable for drake::systems::WitnessTriggeredEventData<double>
00000000000d1470  w    F .text	00000000000006a2              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiagramContext(drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)
00000000000749a0  w    F .text	000000000000003b              drake::systems::internal::DiagramOutput<drake::symbolic::Expression>::~DiagramOutput()
00000000000f1570  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::Y_formatter
000000000008d2c0  w    F .text	000000000000015d              drake::systems::System<double>::~System()
00000000000c5800  w    F .text	0000000000000141              drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoClone() const
00000000000d51f0  w    F .text	000000000000001f              drake::systems::LeafSystem<double>::AllocateTimeDerivatives() const
0000000000074810  w    F .text	0000000000000024              drake::systems::CompositeEventCollection<drake::symbolic::Expression>::~CompositeEventCollection()
0000000000084980  w    F .text	0000000000000099              std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator=(std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&)
000000000008acb0  w    F .text	0000000000000144              void std::vector<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > >, std::allocator<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > > >::emplace_back<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > >(std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > >&&)
000000000009d7b0  w    F .text	000000000000005e              std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)>::function(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)
00000000000d72b0  w    F .text	000000000000006b              Eigen::Matrix<double, -1, 1, 0, -1, 1>::Matrix<int>(int const&)
0000000000311a98  w    O .data.rel.ro	0000000000000028              vtable for drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000312980  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > (drake::systems::System<double>::*)() const>
00000000000c1850  w    F .text	000000000000032d              drake::systems::Diagram<drake::symbolic::Expression>::AllocateOutput(drake::systems::Context<drake::symbolic::Expression> const&) const
00000000003113c0  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::State<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double> const*) const
0000000000083b90  w    F .text	0000000000000053              spdlog::details::async_log_helper::async_msg::operator=(spdlog::details::async_log_helper::async_msg&&)
00000000000f18e0  w    O .rodata	0000000000000024              typeinfo name for spdlog::sinks::base_sink<std::mutex>
00000000000c3390  w    F .text	000000000000018a              drake::systems::PublishEvent<double>::add_to_composite(drake::systems::CompositeEventCollection<double>*) const
0000000000074a80  w    F .text	0000000000000032              fmt::FormatError::~FormatError()
000000000007ad30  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<double> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > (drake::systems::System<double>::*)() const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000959d0  w    F .text	00000000000000c2              std::__detail::_Map_base<drake::systems::WitnessFunction<double> const*, std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, std::allocator<std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > > >, std::__detail::_Select1st, std::equal_to<drake::systems::WitnessFunction<double> const*>, std::hash<drake::systems::WitnessFunction<double> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](drake::systems::WitnessFunction<double> const* const&)
00000000000f0420  w    O .rodata	00000000000000c0              typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>
00000000000df200  w    F .text	0000000000000143              void std::vector<std::unique_ptr<drake::systems::OutputPortValue, std::default_delete<drake::systems::OutputPortValue> >, std::allocator<std::unique_ptr<drake::systems::OutputPortValue, std::default_delete<drake::systems::OutputPortValue> > > >::emplace_back<std::unique_ptr<drake::systems::OutputPortValue, std::default_delete<drake::systems::OutputPortValue> > >(std::unique_ptr<drake::systems::OutputPortValue, std::default_delete<drake::systems::OutputPortValue> >&&)
0000000000071e20  w    F .text	0000000000000006              drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramOutputPort()
00000000000b4d70  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
00000000000cbb80  w    F .text	0000000000000160              drake::systems::DiagramContext<double>::DoCloneState() const
0000000000072780  w    F .text	000000000000000e              drake::systems::System<drake::symbolic::Expression>::SetRandomState(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
00000000000f1b40  w    O .rodata	0000000000000020              typeinfo name for drake::systems::VectorBase<double>
0000000000000000       F *UND*	0000000000000000              std::__throw_bad_alloc()@@GLIBCXX_3.4
0000000000000000       F *UND*	0000000000000000              operator new(unsigned long)@@GLIBCXX_3.4
0000000000073260  w    F .text	000000000000007b              drake::systems::ContinuousState<drake::symbolic::Expression>::~ContinuousState()
00000000000a27e0  w    F .text	0000000000000109              std::vector<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
00000000000ef720  w    O .rodata	000000000000008b              typeinfo name for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
00000000000ef8a0  w    O .rodata	0000000000000035              typeinfo name for drake::systems::State<double>& (drake::systems::DiagramState<double>::*)(int)
0000000000073f60  w    F .text	000000000000002a              drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramOutput()
00000000000f3f40  w    O .rodata	0000000000000064              typeinfo name for drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >
00000000000be0a0  w    F .text	000000000000004c              std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::_Identity<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >*)
0000000000072330  w    F .text	000000000000002f              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::Clear()
00000000000edc80  w    O .rodata	000000000000006b              typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > ()
0000000000313200  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::S_formatter
00000000000728e0  w    F .text	000000000000000e              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetRandomState(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
000000000009de30  w    F .text	00000000000002cb              drake::systems::SystemScalarConverter::SystemScalarConverter<drake::systems::Diagram>(drake::systems::SystemTypeTag<drake::systems::Diagram>, drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)
00000000000b2620  w    F .text	00000000000001fb              drake::systems::Parameters<drake::symbolic::Expression>::Parameters()
00000000000906d0  w    F .text	000000000000021f              drake::systems::Diagram<double>::DispatchUnrestrictedUpdateHandler(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > const&, drake::systems::State<double>*) const
00000000000f1e80  w    O .rodata	0000000000000039              typeinfo name for drake::systems::lcm::Serializer<drake::lcmt_iiwa_status>
00000000000da960  w    F .text	0000000000000303              drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >::DoMerge(drake::systems::EventCollection<drake::systems::PublishEvent<double> > const&)
0000000000000000  w      *UND*	0000000000000000              _ITM_deregisterTMCloneTable
00000000000747a0  w    F .text	000000000000000f              std::_Sp_counted_ptr_inplace<spdlog::pattern_formatter, std::allocator<spdlog::pattern_formatter>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
00000000000e77d0 g     F .text	0000000000000002              __libc_csu_fini
00000000003134a8  w    O .data.rel.ro	0000000000000028              vtable for spdlog::pattern_formatter
00000000000c4a90  w    F .text	000000000000003a              drake::systems::BasicVector<double>** std::move_backward<drake::systems::BasicVector<double>**, drake::systems::BasicVector<double>**>(drake::systems::BasicVector<double>**, drake::systems::BasicVector<double>**, drake::systems::BasicVector<double>**)
00000000000f2d80  w    O .rodata	00000000000000c5              typeinfo name for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}
00000000000834d0  w    F .text	0000000000000094              drake::systems::Diagram<drake::symbolic::Expression>::DoAllocateInputVector(drake::systems::InputPortDescriptor<drake::symbolic::Expression> const&) const
000000000007bf60  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramContinuousState<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::ContinuousState<double> const& (drake::systems::DiagramContinuousState<double>::*)(int) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000f12c0  w    O .rodata	000000000000002c              typeinfo name for fmt::internal::MemoryBuffer<char, 500ul, std::allocator<char> >
0000000000310be0  w    O .data.rel.ro	0000000000000010              typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > ()
0000000000000000       F *UND*	0000000000000000              free@@GLIBC_2.2.5
0000000000313d08  w    O .data.rel.ro	0000000000000080              vtable for drake::systems::BasicVector<drake::symbolic::Expression>
00000000000c32b0  w    F .text	00000000000000d3              void std::vector<drake::systems::PublishEvent<double> const*, std::allocator<drake::systems::PublishEvent<double> const*> >::emplace_back<drake::systems::PublishEvent<double> const*>(drake::systems::PublishEvent<double> const*&&)
00000000000a7100  w    F .text	000000000000008d              std::_Rb_tree_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> > std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<double> const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<double> const* const&>&&, std::tuple<>&&)
00000000000d5fd0  w    F .text	00000000000000e3              drake::systems::LeafSystem<double>::DispatchUnrestrictedUpdateHandler(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > const&, drake::systems::State<double>*) const
0000000000072060  w    F .text	0000000000000006              spdlog::details::I_formatter::~I_formatter()
00000000000ed540  w    O .rodata	000000000000005f              typeinfo name for drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*)
0000000000312300  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::pid_formatter
00000000000e4650  w    F .text	0000000000000125              std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>&&, std::tuple<>&&)
0000000000073380  w    F .text	000000000000007b              drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~ContinuousState()
0000000000311ed0  w    O .data.rel.ro	0000000000000078              vtable for drake::systems::Supervector<double>
0000000000312228  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::f_formatter
000000000009d540  w    F .text	000000000000005e              std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)>::function(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)
00000000003123f8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Parameters<double>
0000000000073140  w    F .text	000000000000002a              std::_Function_handler<drake::systems::CompositeEventCollection<double>* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*), drake::systems::CompositeEventCollection<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&, drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*&&)
0000000000073820  w    F .text	000000000000000d              drake::systems::DiagramContext<double>::get_mutable_state()
00000000000dc970 g     F .text	00000000000002ce              drake::examples::kuka_iiwa_arm::IiwaStatusSender::IiwaStatusSender(int)
0000000000071f40  w    F .text	0000000000000006              spdlog::sinks::stderr_sink<std::mutex>::~stderr_sink()
00000000000f1820  w    O .rodata	0000000000000020              typeinfo name for spdlog::details::ch_formatter
0000000000311438  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::ContinuousState<double> const& (drake::systems::DiagramContinuousState<double>::*)(int) const
0000000000312fa8  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::level_formatter
0000000000074850  w    F .text	000000000000000f              drake::systems::DiagramOutputPort<drake::symbolic::Expression>::~DiagramOutputPort()
0000000000312dd8  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const
00000000000d8640  w    F .text	000000000000029f              drake::systems::LeafOutputPort<double>::DoAllocate() const
00000000000ee2e0  w    O .rodata	0000000000000036              typeinfo name for drake::systems::Subvector<drake::symbolic::Expression>
0000000000314e88  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::LeafSystem<double>::DeclareAbstractOutputPort<drake::examples::kuka_iiwa_arm::IiwaStatusSender, drake::lcmt_iiwa_status>(drake::lcmt_iiwa_status (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)() const, void (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)(drake::systems::Context<double> const&, drake::lcmt_iiwa_status*) const)::{lambda(drake::systems::Context<double> const&, drake::systems::AbstractValue*)#2}
00000000000b0230  w    F .text	00000000000000c4              drake::systems::OutputPort<double>::Calc(drake::systems::Context<double> const&, drake::systems::AbstractValue*) const
00000000000af5a0  w    F .text	000000000000038e              drake::systems::Diagram<drake::symbolic::Expression>::DoMapQDotToVelocity(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<drake::symbolic::Expression>*) const
00000000000c4f70  w    F .text	0000000000000149              drake::systems::Diagram<double>::AllocateDiscreteVariables() const
00000000000f0b00  w    O .rodata	00000000000000b8              typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>
00000000000a62a0  w    F .text	000000000000008d              std::_Rb_tree_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<double> const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<double> const* const&>&&, std::tuple<>&&)
0000000000098a60  w    F .text	00000000000004ab              void fmt::BasicWriter<char>::write_double<long double, fmt::FormatSpec>(long double, fmt::FormatSpec const&)
00000000000a4420  w    F .text	0000000000000bbf              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetGraphvizFragment(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000ecd20  w    O .rodata	0000000000000070              typeinfo name for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (int)
000000000007e450  w    F .text	00000000000001df              drake::systems::Diagram<double>::DoCalcTimeDerivatives(drake::systems::Context<double> const&, drake::systems::ContinuousState<double>*) const
0000000000000000       F *UND*	0000000000000000              drake::systems::SystemSymbolicInspector::IsConnectedInputToOutput(int, int) const
0000000000000000       F *UND*	0000000000000000              drake::log()
0000000000088000  w    F .text	0000000000000117              spdlog::logger::~logger()
00000000000eebe0  w    O .rodata	000000000000003e              typeinfo name for drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >
000000000007c350  w    F .text	000000000000006b              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoEvalConstraintEquationsDot(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
00000000000f4ea0  w    O .rodata	000000000000009d              typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<drake::symbolic::Expression> const& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>
00000000000ee600  w    O .rodata	0000000000000062              typeinfo name for drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000312890  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000893d0  w    F .text	0000000000000164              spdlog::async_logger::_set_pattern(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, spdlog::pattern_time_type)
0000000000000000  w    F *UND*	0000000000000000              __cxa_finalize@@GLIBC_2.2.5
0000000000073f30  w    F .text	000000000000002a              drake::systems::internal::DiagramOutput<drake::symbolic::Expression>::~DiagramOutput()
0000000000079b40  w    F .text	000000000000000e              drake::systems::BasicVector<double>::~BasicVector()
000000000007c940  w    F .text	0000000000000069              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetAtIndex(int)
00000000003129d0  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}
00000000003122e8  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::t_formatter
0000000000084c20  w    F .text	0000000000000281              spdlog::async_logger::_sink_it(spdlog::details::log_msg&)
0000000000073950  w    F .text	0000000000000032              spdlog::details::aggregate_formatter::~aggregate_formatter()
0000000000310e60  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000d5020  w    F .text	000000000000006f              drake::systems::LeafOutputPort<double>::~LeafOutputPort()
0000000000074f20  w    F .text	000000000000006e              drake::systems::DiagramContext<drake::symbolic::Expression>::GetSubsystemContext(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const
00000000000e3690  w    F .text	0000000000000139              bool isRegularInertiaMatrix<Eigen::Matrix<double, 6, 6, 0, 6, 6> >(Eigen::MatrixBase<Eigen::Matrix<double, 6, 6, 0, 6, 6> > const&)
0000000000079fd0  w    F .text	000000000000001e              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::add_event(std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > >)
0000000000075340  w    F .text	0000000000000047              drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_mutable_subevent_collection(int)
00000000000f2f40  w    O .rodata	000000000000009f              typeinfo name for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}
0000000000073080  w    F .text	000000000000002a              std::_Function_handler<drake::systems::State<double> const* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::State<double> const*), drake::systems::State<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double> const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&, drake::systems::System<double> const&, drake::systems::State<double> const*&&)
0000000000084ad0  w    F .text	0000000000000098              spdlog::logger::set_error_handler(std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>)
00000000000f2740  w    O .rodata	0000000000000080              typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > (drake::systems::System<double>::*)() const
00000000000cf3d0  w    F .text	0000000000000018              drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetAtIndex(int)
0000000000072a10  w    F .text	0000000000000006              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetInitializationEvents(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000949b0  w    F .text	00000000000000e5              std::_Hashtable<drake::systems::System<double> const*, drake::systems::System<double> const*, std::allocator<drake::systems::System<double> const*>, std::__detail::_Identity, std::equal_to<drake::systems::System<double> const*>, std::hash<drake::systems::System<double> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<drake::systems::System<double> const*, false>*)
00000000000d7710  w    F .text	0000000000000107              drake::systems::LeafSystem<double>::~LeafSystem()
000000000008ab90  w    F .text	00000000000000e5              drake::systems::DiagramBuilder<double>::~DiagramBuilder()
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@@GLIBCXX_3.4.21
00000000000b2120  w    F .text	0000000000000144              void std::vector<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > > > >::emplace_back<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > > >(std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > >&&)
0000000000311000  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const
00000000000b9fd0  w    F .text	000000000000014b              drake::systems::OutputPort<double>::Allocate() const
0000000000000000       F *UND*	0000000000000000              drake::systems::lcm::SerializerInterface::~SerializerInterface()
00000000000d5290  w    F .text	000000000000000d              drake::systems::LeafContext<double>::get_parameters() const
000000000007a0b0  w    F .text	000000000000001e              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::add_event(std::unique_ptr<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >)
0000000000071c80  w    F .text	0000000000000036              std::_Function_handler<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&)
00000000000efba0  w    O .rodata	000000000000002e              typeinfo name for drake::systems::Value<drake::systems::BasicVector<double> >
00000000000efdc0  w    O .rodata	000000000000006a              typeinfo name for std::_Simple_type_wrapper<drake::systems::State<drake::symbolic::Expression>& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int)>
00000000000948a0  w    F .text	000000000000010f              std::_Hashtable<drake::systems::System<double> const*, drake::systems::System<double> const*, std::allocator<drake::systems::System<double> const*>, std::__detail::_Identity, std::equal_to<drake::systems::System<double> const*>, std::hash<drake::systems::System<double> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_rehash(unsigned long, unsigned long const&)
0000000000074a20  w    F .text	000000000000003b              drake::systems::internal::DiagramOutput<double>::~DiagramOutput()
0000000000090c40  w    F .text	0000000000000085              void Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<double, -1, 1, 0, -1, 1>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1, 0, -1, 1> >, Eigen::internal::assign_op<double, double> >(Eigen::Matrix<double, -1, 1, 0, -1, 1>&, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1, 0, -1, 1> > const&, Eigen::internal::assign_op<double, double> const&)
000000000007a2e0  w    F .text	0000000000000088              drake::systems::Diagram<drake::symbolic::Expression>::GetGraphvizInputPortToken(drake::systems::InputPortDescriptor<drake::symbolic::Expression> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000c7a60  w    F .text	0000000000000287              void std::vector<drake::systems::WitnessFunction<drake::symbolic::Expression> const*, std::allocator<drake::systems::WitnessFunction<drake::symbolic::Expression> const*> >::_M_range_insert<__gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<drake::symbolic::Expression> const**, std::vector<drake::systems::WitnessFunction<drake::symbolic::Expression> const*, std::allocator<drake::systems::WitnessFunction<drake::symbolic::Expression> const*> > > >(__gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<drake::symbolic::Expression> const**, std::vector<drake::systems::WitnessFunction<drake::symbolic::Expression> const*, std::allocator<drake::systems::WitnessFunction<drake::symbolic::Expression> const*> > >, __gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<drake::symbolic::Expression> const**, std::vector<drake::systems::WitnessFunction<drake::symbolic::Expression> const*, std::allocator<drake::systems::WitnessFunction<drake::symbolic::Expression> const*> > >, __gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<drake::symbolic::Expression> const**, std::vector<drake::systems::WitnessFunction<drake::symbolic::Expression> const*, std::allocator<drake::systems::WitnessFunction<drake::symbolic::Expression> const*> > >, std::forward_iterator_tag)
00000000000a1820  w    F .text	00000000000000f1              void std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::emplace_back<drake::systems::System<double> const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&>(drake::systems::System<double> const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&)
0000000000071640  w    F .text	000000000000000e              drake::systems::SystemBase::ThrowIfContextNotCompatible(drake::systems::ContextBase const&) const
00000000000a1420  w    F .text	00000000000000f1              void std::vector<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::emplace_back<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&>(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&)
0000000000071650  w    F .text	0000000000000006              fmt::BasicWriter<char>::~BasicWriter()
0000000000079b80  w    F .text	00000000000000c3              drake::systems::VectorBase<double>::ScaleAndAddToVector(double const&, Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1>, 0, Eigen::InnerStride<1> >) const
0000000000313048  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::b_formatter
00000000000748b0  w    F .text	0000000000000024              drake::systems::State<drake::symbolic::Expression>::~State()
00000000003121f8  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::S_formatter
00000000000747e0  w    F .text	0000000000000024              drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~CompositeEventCollection()
00000000000f1630  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::S_formatter
000000000007ac70  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<double> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > (drake::systems::System<double>::*)() const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000074450  w    F .text	000000000000000f              spdlog::details::p_formatter::~p_formatter()
0000000000314a40  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000f42e0  w    O .rodata	00000000000000bb              typeinfo name for drake::systems::Diagram<drake::symbolic::Expression>::Initialize(std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> >)::{lambda(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>*)#1}
00000000000f2820  w    O .rodata	0000000000000062              typeinfo name for drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000072ac0  w    F .text	000000000000004f              drake::systems::Parameters<double>::~Parameters()
0000000000080170  w    F .text	00000000000002df              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::Clear()
0000000000314ed8  w    O .data.rel.ro	0000000000000018              typeinfo for std::_Sp_counted_deleter<drake::systems::AbstractValue*, std::default_delete<drake::systems::AbstractValue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>
0000000000071800  w    F .text	000000000000007b              drake::systems::ContinuousState<double>::~ContinuousState()
000000000007d4e0  w    F .text	00000000000000fd              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::DoMerge(drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > const&)
0000000000000000       O *UND*	0000000000000000              typeinfo for double@@CXXABI_1.3
00000000000af080  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > > > >::~vector()
000000000007f9e0  w    F .text	000000000000018f              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetRandomState(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
0000000000312068  w    O .data.rel.ro	0000000000000010              typeinfo for spdlog::details::flag_formatter
00000000003126b8  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::Value<drake::systems::BasicVector<drake::symbolic::Expression> >
000000000007b250  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000cd5d0  w    F .text	00000000000000d9              drake::systems::BasicVector<drake::symbolic::Expression>::SetZero()
00000000000a63d0  w    F .text	000000000000010a              std::_Rb_tree<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&)
000000000009da20  w    F .text	000000000000005e              std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)>::function(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)
0000000000310dd0  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000744d0  w    F .text	000000000000000f              spdlog::details::H_formatter::~H_formatter()
0000000000086670  w    F .text	000000000000006b              std::vector<RigidBodyFrame<double>, std::allocator<RigidBodyFrame<double> > >::~vector()
0000000000086310  w    F .text	000000000000006e              std::_Hashtable<int, std::pair<int const, drake::systems::controllers::StateFeedbackControllerInterface<double>*>, std::allocator<std::pair<int const, drake::systems::controllers::StateFeedbackControllerInterface<double>*> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::~_Hashtable()
000000000009cb60  w    F .text	000000000000018d              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~System()
00000000000af0f0  w    F .text	0000000000000055              std::_MakeUniq<drake::systems::AbstractValues>::__single_object std::make_unique<drake::systems::AbstractValues, std::vector<drake::systems::AbstractValue*, std::allocator<drake::systems::AbstractValue*> >&>(std::vector<drake::systems::AbstractValue*, std::allocator<drake::systems::AbstractValue*> >&)
0000000000075040  w    F .text	000000000000006e              drake::systems::DiagramContinuousState<drake::symbolic::Expression>::get_substate(int) const
00000000000ed000  w    O .rodata	0000000000000045              typeinfo name for drake::systems::CompositeEventCollection<double>* (drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*)
00000000000eff40  w    O .rodata	0000000000000077              typeinfo name for std::_Simple_type_wrapper<drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*) const>
00000000000f1880  w    O .rodata	0000000000000022              typeinfo name for spdlog::details::full_formatter
0000000000085120  w    F .text	0000000000000089              std::vector<drake::copyable_unique_ptr<drake::systems::CacheEntryValue>, std::allocator<drake::copyable_unique_ptr<drake::systems::CacheEntryValue> > >::~vector()
0000000000312418  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::Context<double>
00000000000853e0  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> >, std::allocator<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > > >::~vector()
000000000008d8d0  w    F .text	0000000000000047              drake::systems::DiscreteValues<double>::~DiscreteValues()
000000000007a750  w    F .text	0000000000000018              drake::systems::InputPortDescriptor<double>::~InputPortDescriptor()
0000000000314d68  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::LeafCompositeEventCollection<double>
0000000000000000       F *UND*	0000000000000000              drake::FindResourceOrThrow(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
0000000000083f60  w    F .text	0000000000000181              spdlog::details::async_log_helper::flush(bool)
0000000000000000       O *UND*	0000000000000000              vtable for __cxxabiv1::__vmi_class_type_info@@CXXABI_1.3
0000000000072050  w    F .text	0000000000000006              spdlog::details::M_formatter::~M_formatter()
0000000000000000  w    F *UND*	0000000000000000              pthread_mutex_unlock@@GLIBC_2.2.5
0000000000089770  w    F .text	0000000000000144              void std::vector<std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> >, std::allocator<std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> > > >::emplace_back<std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> > >(std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> >&&)
00000000000cacd0  w    F .text	00000000000004a5              drake::systems::DiagramState<double>::Finalize()
0000000000316b48 u     O .bss	0000000000000008              guard variable for drake::systems::CacheEntryValue::dummy()::dummy
000000000007f410  w    F .text	0000000000000083              std::_Sp_counted_ptr_inplace<spdlog::pattern_formatter, std::allocator<spdlog::pattern_formatter>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
000000000009cec0  w    F .text	00000000000000c9              std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}> const&, std::_Manager_operation)
00000000000730e0  w    F .text	000000000000002a              std::_Function_handler<drake::systems::ContinuousState<double> const* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*), drake::systems::ContinuousState<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&, drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*&&)
0000000000073a90  w    F .text	000000000000007b              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::~DiagramEventCollection()
0000000000311cb8  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::internal::DiagramOutput<double>
00000000000f1710  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::R_formatter
00000000000c2870  w    F .text	0000000000000153              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::lcmt_iiwa_command>()
0000000000072040  w    F .text	0000000000000006              spdlog::details::S_formatter::~S_formatter()
0000000000000000       F *UND*	0000000000000000              std::out_of_range::out_of_range(char const*)@@GLIBCXX_3.4.21
0000000000071740  w    F .text	0000000000000060              drake::systems::CompositeEventCollection<double>::~CompositeEventCollection()
0000000000000000       F *UND*	0000000000000000              std::runtime_error::what() const@@GLIBCXX_3.4
00000000000daf50  w    F .text	00000000000000cb              void std::vector<drake::systems::DiscreteUpdateEvent<double> const*, std::allocator<drake::systems::DiscreteUpdateEvent<double> const*> >::emplace_back<drake::systems::DiscreteUpdateEvent<double> const*>(drake::systems::DiscreteUpdateEvent<double> const*&&)
00000000000ee200  w    O .rodata	000000000000003a              typeinfo name for drake::systems::DiagramState<drake::symbolic::Expression>
00000000000f1330  w    O .rodata	0000000000000015              typeinfo name for spdlog::sinks::sink
0000000000096260  w    F .text	00000000000002b2              drake::systems::controllers::InverseDynamicsController<double>* drake::manipulation::util::SimDiagramBuilder<double>::AddController<drake::systems::controllers::InverseDynamicsController<double>, std::unique_ptr<RigidBodyTree<double>, std::default_delete<RigidBodyTree<double> > >, Eigen::Matrix<double, -1, 1, 0, -1, 1>&, Eigen::Matrix<double, -1, 1, 0, -1, 1>&, Eigen::Matrix<double, -1, 1, 0, -1, 1>&, bool>(int, std::unique_ptr<RigidBodyTree<double>, std::default_delete<RigidBodyTree<double> > >&&, Eigen::Matrix<double, -1, 1, 0, -1, 1>&, Eigen::Matrix<double, -1, 1, 0, -1, 1>&, Eigen::Matrix<double, -1, 1, 0, -1, 1>&, bool&&)
00000000000d6340  w    F .text	00000000000000c7              drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::~LeafEventCollection()
0000000000086c60  w    F .text	0000000000000294              drake::systems::VectorBase<drake::symbolic::Expression>::NormInf() const
000000000007a130  w    F .text	0000000000000088              drake::systems::Diagram<double>::GetGraphvizOutputPortToken(drake::systems::OutputPort<double> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000732e0  w    F .text	000000000000000a              drake::systems::DiagramContinuousState<drake::symbolic::Expression>::x_selector(drake::systems::ContinuousState<drake::symbolic::Expression>*)
00000000000985a0  w    F .text	00000000000004bb              void fmt::BasicWriter<char>::write_double<double, fmt::FormatSpec>(double, fmt::FormatSpec const&)
00000000000b4de0  w    F .text	0000000000000047              drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiscreteValues()
00000000000df4c0  w    F .text	00000000000000ba              drake::systems::LeafSystemOutput<double>::DoClone() const
0000000000071f90  w    F .text	0000000000000006              spdlog::details::pid_formatter::~pid_formatter()
0000000000075a10  w    F .text	00000000000002b4              drake::systems::Diagram<double>::DoGetTargetSystemContext(drake::systems::System<double> const&, drake::systems::Context<double> const*) const
0000000000072de0  w    F .text	0000000000000035              std::_Function_handler<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>::_M_invoke(std::_Any_data const&, drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
00000000000d65b0  w    F .text	00000000000000c9              drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::~LeafEventCollection()
000000000007aa70  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::Context<double>*), drake::systems::Context<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double>*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000cb2b0  w    F .text	00000000000008cf              drake::systems::Diagram<double>::DoMakeContext() const
00000000000db500  w    F .text	0000000000000156              void std::vector<std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > >, std::allocator<std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > > > >::emplace_back<std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > > >(std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > >&&)
00000000000f00e0  w    O .rodata	0000000000000091              typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int)>
0000000000093230  w    F .text	00000000000003f5              drake::systems::System<drake::symbolic::Expression>::DoCheckValidContext(drake::systems::ContextBase const&) const
00000000000736b0  w    F .text	000000000000006b              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoPlusEqScaled(std::initializer_list<std::pair<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&> > const&)
0000000000071910  w    F .text	000000000000002a              std::_Function_handler<drake::systems::Context<double>* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::Context<double>*), drake::systems::Context<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double>*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&, drake::systems::System<double> const&, drake::systems::Context<double>*&&)
0000000000316730 g     O .data	0000000000000008              fLD::FLAGS_target_realtime_rate
0000000000316ac0 u     O .bss	0000000000000008              guard variable for spdlog::sinks::stderr_sink<std::mutex>::instance()::instance
0000000000314dc8  w    O .data.rel.ro	0000000000000018              typeinfo for drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque
00000000000ef160  w    O .rodata	0000000000000078              typeinfo name for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000074570  w    F .text	000000000000000f              spdlog::details::a_formatter::~a_formatter()
00000000000d0980  w    F .text	0000000000000125              std::vector<double, std::allocator<double> >::operator=(std::vector<double, std::allocator<double> > const&)
0000000000087170  w    F .text	0000000000000241              drake::systems::VectorBase<drake::symbolic::Expression>::SetFromVector(Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)
0000000000097bd0  w    F .text	000000000000036e              void fmt::BasicWriter<char>::write_int<long long, fmt::FormatSpec>(long long, fmt::FormatSpec)
00000000000722b0  w    F .text	000000000000002f              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::Clear()
00000000000a3990  w    F .text	000000000000004c              std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> >, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >*)
00000000000f5f40  w    O .rodata	0000000000000049              typeinfo name for drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >
00000000000af150  w    F .text	00000000000000b4              drake::systems::Subvector<drake::symbolic::Expression>::Subvector(drake::systems::VectorBase<drake::symbolic::Expression>*, int, int)
00000000000ee040  w    O .rodata	000000000000004d              typeinfo name for drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>
0000000000312be0  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramOutputPort<drake::symbolic::Expression>
00000000000f3260  w    O .rodata	00000000000000a6              typeinfo name for drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, double>(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}
00000000003129a0  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}
0000000000071670  w    F .text	0000000000000067              drake::systems::PublishEvent<double>::~PublishEvent()
00000000000d6b90  w    F .text	00000000000000c7              drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >::~LeafEventCollection()
0000000000312018  w    O .data.rel.ro	0000000000000018              typeinfo for fmt::BasicMemoryWriter<char, std::allocator<char> >
00000000000cf3b0  w    F .text	0000000000000018              drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetAtIndex(int) const
00000000000f0760  w    O .rodata	000000000000009c              typeinfo name for std::_Simple_type_wrapper<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>
0000000000312030  w    O .data.rel.ro	0000000000000010              typeinfo for spdlog::sinks::sink
00000000000a1c90  w    F .text	00000000000002da              std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateForcedEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >(std::function<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)>) const
00000000000b0760  w    F .text	000000000000024b              void drake::systems::LeafSystem<double>::DeclarePeriodicEvent<drake::systems::PublishEvent<double> >(double, double)
0000000000316980 u     O .bss	0000000000000008              guard variable for drake::NiceTypeName::Get<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >()::canonical
00000000000743b0  w    F .text	000000000000000f              spdlog::details::full_formatter::~full_formatter()
0000000000079100  w    F .text	00000000000002b4              drake::systems::Diagram<double>::DoGetTargetSystemContinuousState(drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*) const
0000000000087950  w    F .text	0000000000000137              drake::systems::DiagramContext<drake::symbolic::Expression>::~DiagramContext()
0000000000311fe0  w    O .data.rel.ro	0000000000000038              typeinfo for fmt::internal::MemoryBuffer<char, 500ul, std::allocator<char> >
00000000000d58a0  w    F .text	0000000000000065              drake::systems::LeafSystem<double>::GetGraphvizInputPortToken(drake::systems::InputPortDescriptor<double> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000e3ca0  w    F .text	00000000000002c4              decltype(auto) transformSpatialForce<Eigen::Transpose<Eigen::Matrix<double, 6, 6, 0, 6, 6> > >(Eigen::Transform<Eigen::Transpose<Eigen::Matrix<double, 6, 6, 0, 6, 6> >::Scalar, 3, 1, 0> const&, Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<double, 6, 6, 0, 6, 6> > > const&)
0000000000311a70  w    O .data.rel.ro	0000000000000028              vtable for drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000000000       F *UND*	0000000000000000              std::basic_ostream<char, std::char_traits<char> >::operator<<(int)@@GLIBCXX_3.4
0000000000310ae8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*)
0000000000313e50  w    O .data.rel.ro	0000000000000208              vtable for drake::systems::Diagram<double>
00000000000e0190  w    F .text	0000000000000594              drake::systems::LeafSystem<double>::DoMakeLeafContext() const
0000000000094c40  w    F .text	000000000000013c              drake::examples::kuka_iiwa_arm::IiwaCommandReceiver* drake::systems::DiagramBuilder<double>::AddSystem<drake::examples::kuka_iiwa_arm::IiwaCommandReceiver, int const&>(int const&)
000000000007aad0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramContext<double>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<double>& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000c3140  w    F .text	0000000000000166              void std::vector<std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > >, std::allocator<std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > > > >::emplace_back<std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > > >(std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > >&&)
0000000000074860  w    F .text	000000000000000f              drake::systems::Subvector<drake::symbolic::Expression>::~Subvector()
0000000000074b20  w    F .text	0000000000000018              fmt::SystemError::~SystemError()
0000000000072880  w    F .text	0000000000000006              drake::systems::System<drake::symbolic::Expression>::GetGraphvizOutputPortToken(drake::systems::OutputPort<drake::symbolic::Expression> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
0000000000312150  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::D_formatter
00000000000754c0  w    F .text	0000000000000047              drake::systems::DiagramCompositeEventCollection<double>::get_mutable_subevent_collection(int)
00000000000746f0  w    F .text	000000000000000f              drake::systems::Subvector<double>::~Subvector()
0000000000072730  w    F .text	0000000000000006              drake::systems::System<double>::GetGraphvizFragment(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000721f0  w    F .text	0000000000000006              drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Subvector()
00000000000f2b60  w    O .rodata	000000000000009a              typeinfo name for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > (drake::systems::System<double>::*)() const>
0000000000312d70  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>
0000000000316a20 u     O .bss	0000000000000020              drake::NiceTypeName::Get<drake::systems::BasicVector<drake::symbolic::Expression> >()::canonical[abi:cxx11]
0000000000092af0  w    F .text	00000000000001ac              drake::systems::Simulator<double>::Initialize()
0000000000071bd0  w    F .text	0000000000000037              std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}> const&, std::_Manager_operation)
00000000000b6770  w    F .text	00000000000008d2              drake::systems::ContinuousState<double>::ContinuousState(std::unique_ptr<drake::systems::VectorBase<double>, std::default_delete<drake::systems::VectorBase<double> > >, int, int, int)
00000000000f1be0  w    O .rodata	0000000000000039              typeinfo name for drake::systems::BasicVector<drake::symbolic::Expression>
00000000000a1a70  w    F .text	0000000000000220              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::NamesAreUniqueAndNonEmpty() const
00000000000ee880  w    O .rodata	000000000000005f              typeinfo name for drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000310988  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (int)
0000000000000000  w    F *UND*	0000000000000000              pthread_mutex_lock@@GLIBC_2.2.5
000000000008a0a0  w    F .text	000000000000008e              drake::systems::RungeKutta3Integrator<double>::~RungeKutta3Integrator()
00000000000741b0  w    F .text	0000000000000078              drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramState()
00000000000eed00  w    O .rodata	0000000000000050              typeinfo name for drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const
000000000007c080  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*), drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000312a00  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::Context<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double> const*) const
00000000003111e0  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000000000       F *UND*	0000000000000000              __cxa_guard_acquire@@CXXABI_1.3
00000000000936b0  w    F .text	0000000000000028              drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::set_time(Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > const&)
0000000000310e70  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000d8fc0  w    F .text	000000000000005e              std::function<void (drake::systems::Context<double> const&, drake::systems::AbstractValue*)>::function(std::function<void (drake::systems::Context<double> const&, drake::systems::AbstractValue*)> const&)
0000000000087950  w    F .text	0000000000000137              drake::systems::DiagramContext<drake::symbolic::Expression>::~DiagramContext()
0000000000310bc8  w    O .data.rel.ro	0000000000000018              typeinfo for std::allocator<char>
00000000000a1620  w    F .text	00000000000000f1              void std::vector<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::emplace_back<drake::systems::System<drake::symbolic::Expression> const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&>(drake::systems::System<drake::symbolic::Expression> const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&)
00000000000d5940  w    F .text	0000000000000079              std::_Function_base::_Base_manager<drake::systems::LeafSystem<double>::DeclareAbstractOutputPort<drake::examples::kuka_iiwa_arm::IiwaStatusSender, drake::lcmt_iiwa_status>(drake::lcmt_iiwa_status (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)() const, void (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)(drake::systems::Context<double> const&, drake::lcmt_iiwa_status*) const)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::LeafSystem<double>::DeclareAbstractOutputPort<drake::examples::kuka_iiwa_arm::IiwaStatusSender, drake::lcmt_iiwa_status>(drake::lcmt_iiwa_status (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)() const, void (drake::examples::kuka_iiwa_arm::IiwaStatusSender::*)(drake::systems::Context<double> const&, drake::lcmt_iiwa_status*) const)::{lambda()#1}> const&, std::_Manager_operation)
0000000000089770  w    F .text	0000000000000144              void std::vector<std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> >, std::allocator<std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> > > >::emplace_back<std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> > >(std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> >&&)
00000000000d5130  w    F .text	0000000000000006              std::_Sp_counted_deleter<drake::systems::AbstractValue*, std::default_delete<drake::systems::AbstractValue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()
00000000000839b0  w    F .text	000000000000014b              fmt::internal::FormatterBase::do_get_arg(unsigned int, char const*&)
0000000000072d90  w    F .text	0000000000000012              drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_num_ports() const
0000000000000000       F *UND*	0000000000000000              RigidBodyTree<double>::Clone() const
00000000000a50a0  w    F .text	0000000000000388              drake::systems::System<drake::symbolic::Expression>::get_output_port(int) const
00000000003119e0  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
000000000009e100  w    F .text	00000000000000c9              std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}> const&, std::_Manager_operation)
0000000000313a70  w    O .data.rel.ro	00000000000001c8              vtable for drake::systems::System<double>
000000000007ea90  w    F .text	000000000000007d              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::~DiagramEventCollection()
0000000000000000       F *UND*	0000000000000000              drake::systems::AbstractValues::AbstractValues()
00000000000b9980  w    F .text	0000000000000099              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > drake::NiceTypeName::Get<drake::systems::internal::SystemMessageInterface>(drake::systems::internal::SystemMessageInterface const&)
00000000000db9b0  w    F .text	000000000000003f              drake::systems::Value<drake::systems::BasicVector<double> >::SetFromOrThrow(drake::systems::AbstractValue const&)
00000000000a0e20  w    F .text	00000000000004e2              drake::systems::Simulator<double>::StepTo(double const&)
0000000000314db0  w    O .data.rel.ro	0000000000000018              typeinfo for drake::examples::kuka_iiwa_arm::IiwaStatusSender
0000000000000000       F *UND*	0000000000000000              __cxa_bad_cast@@CXXABI_1.3
00000000000f3400  w    O .rodata	00000000000000e4              typeinfo name for drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}
00000000000d50c0  w    F .text	0000000000000067              drake::systems::UnrestrictedUpdateEvent<double>::~UnrestrictedUpdateEvent()
0000000000074550  w    F .text	000000000000000f              spdlog::details::b_formatter::~b_formatter()
0000000000072a70  w    F .text	000000000000004f              drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Parameters()
00000000000ef420  w    O .rodata	0000000000000077              typeinfo name for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const
00000000000bda90  w    F .text	0000000000000086              std::vector<double, std::allocator<double> >::vector(std::vector<double, std::allocator<double> > const&)
00000000000930d0  w    F .text	0000000000000153              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::BasicVector<drake::symbolic::Expression> >()
00000000000a9fc0  w    F .text	000000000000008d              std::_Rb_tree_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<drake::symbolic::Expression> const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<drake::symbolic::Expression> const* const&>&&, std::tuple<>&&)
0000000000073320  w    F .text	0000000000000060              drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~CompositeEventCollection()
0000000000075560  w    F .text	0000000000000047              drake::systems::DiagramState<double>::get_mutable_substate(int)
00000000000d8fc0  w    F .text	000000000000005e              std::function<void (drake::systems::Context<double> const&, drake::systems::AbstractValue*)>::function(std::function<void (drake::systems::Context<double> const&, drake::systems::AbstractValue*)> const&)
00000000000ee240  w    O .rodata	0000000000000038              typeinfo name for drake::systems::Parameters<drake::symbolic::Expression>
00000000000d1b20  w    F .text	0000000000000055              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCloneWithoutPointers() const
0000000000000000  w      *UND*	0000000000000000              __gmon_start__
0000000000312258  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::E_formatter
0000000000073830  w    F .text	000000000000000d              drake::systems::DiagramContext<double>::get_parameters() const
00000000003129f0  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}
0000000000311fd0  w    O .data.rel.ro	0000000000000010              typeinfo for fmt::Buffer<char>
00000000000c1eb0  w    F .text	00000000000000fc              std::vector<double, std::allocator<double> >::_M_default_append(unsigned long)
0000000000000000       O *UND*	0000000000000000              typeinfo for drake::systems::AbstractValue
00000000000ed260  w    O .rodata	000000000000004d              typeinfo name for drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*)
00000000000f35c0  w    O .rodata	00000000000000e4              typeinfo name for drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}
00000000000724e0  w    F .text	0000000000000012              drake::systems::System<double>::DoGetMutableTargetSystemCompositeEventCollection(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*) const
00000000003143c8  w    O .data.rel.ro	0000000000000038              vtable for std::_Sp_counted_ptr_inplace<spdlog::sinks::stderr_sink<std::mutex>, std::allocator<spdlog::sinks::stderr_sink<std::mutex> >, (__gnu_cxx::_Lock_policy)2>
00000000000d7000 g     F .text	0000000000000110              drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::CopyStateToOutput(drake::systems::Context<double> const&, int, int, drake::systems::BasicVector<double>*) const
0000000000314a08  w    O .data.rel.ro	0000000000000038              vtable for drake::systems::OutputPort<drake::symbolic::Expression>
00000000000ec900  w    O .rodata	000000000000008a              typeinfo name for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000000d84e0  w    F .text	0000000000000029              drake::systems::DiscreteUpdateEvent<double>::DiscreteUpdateEvent(drake::systems::Event<double>::TriggerType const&)
0000000000072170  w    F .text	0000000000000020              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcPotentialEnergy(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
00000000000b0a60  w    F .text	000000000000003f              drake::systems::DiagramCompositeEventCollection<double>::~DiagramCompositeEventCollection()
00000000000f2100  w    O .rodata	0000000000000038              typeinfo name for drake::systems::Context<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double>*) const
00000000000734f0  w    F .text	0000000000000037              std::_Function_base::_Base_manager<drake::systems::VectorBase<drake::symbolic::Expression>& (*)(drake::systems::ContinuousState<drake::symbolic::Expression>*)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000ee500  w    O .rodata	0000000000000063              typeinfo name for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000d57f0  w    F .text	000000000000003a              drake::systems::LeafOutputPort<double>::DoEval(drake::systems::Context<double> const&) const
00000000003114d8  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::CompositeEventCollection<double> const& (drake::systems::DiagramCompositeEventCollection<double>::*)(int) const
00000000000d91c0  w    F .text	0000000000000049              std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_M_check_len(unsigned long, char const*) const
00000000000a3b50  w    F .text	0000000000000089              drake::systems::Diagram<drake::symbolic::Expression>::~Diagram()
00000000000dd9b0 g     F .text	00000000000003a0              drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::IiwaContactResultsToExternalTorque(RigidBodyTree<double> const&, std::vector<int, std::allocator<int> > const&)
0000000000071f00  w    F .text	0000000000000035              std::_Function_handler<drake::systems::Context<drake::symbolic::Expression> const& (drake::systems::DiagramContext<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<drake::symbolic::Expression> const& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramContext<drake::symbolic::Expression> const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000072420  w    F .text	000000000000000a              drake::systems::System<double>::DoCalcConservativePower(drake::systems::Context<double> const&) const
00000000000e0730  w    F .text	000000000000019d              drake::systems::Parameters<double>::Parameters(std::vector<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > > >&&, std::vector<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> >, std::allocator<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > > >&&)
0000000000312620  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::lcm::Serializer<drake::lcmt_iiwa_command>
00000000000d1410  w    F .text	0000000000000055              drake::systems::DiagramContext<drake::symbolic::Expression>::DoCloneWithoutPointers() const
00000000003169e0 u     O .bss	0000000000000020              drake::NiceTypeName::Get<drake::systems::Diagram<double> >()::canonical[abi:cxx11]
0000000000074b20  w    F .text	0000000000000018              fmt::SystemError::~SystemError()
00000000000af930  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
00000000000f1260  w    O .rodata	0000000000000014              typeinfo name for fmt::SystemError
0000000000071a90  w    F .text	0000000000000037              std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}> const&, std::_Manager_operation)
00000000000edde0  w    O .rodata	000000000000003d              typeinfo name for drake::systems::ContinuousState<drake::symbolic::Expression>
00000000000cc240  w    F .text	00000000000000e7              drake::systems::BasicVector<drake::symbolic::Expression>::BasicVector(int)
00000000000ba600  w    F .text	0000000000000145              std::pair<std::_Rb_tree_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, bool> std::_Rb_tree<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::_Identity<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::less<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::_M_insert_unique<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&>(std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&)
0000000000000000       F *UND*	0000000000000000              std::basic_ostream<char, std::char_traits<char> >& std::basic_ostream<char, std::char_traits<char> >::_M_insert<long>(long)@@GLIBCXX_3.4.9
0000000000313250  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::f_formatter
00000000000f16d0  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::p_formatter
00000000000ef8e0  w    O .rodata	0000000000000037              typeinfo name for drake::systems::State<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double> const*) const
0000000000072980  w    F .text	0000000000000012              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetMutableTargetSystemCompositeEventCollection(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000079f50  w    F .text	000000000000005d              drake::systems::System<drake::symbolic::Expression>::DoMapQDotToVelocity(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<drake::symbolic::Expression>*) const
00000000000d9850  w    F .text	0000000000000282              drake::systems::LeafOutputPort<double>::set_calculation_function(std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>)::{lambda(drake::systems::Context<double> const&, drake::systems::AbstractValue*)#1}::operator()(drake::systems::Context<double> const&, drake::systems::AbstractValue*) const
0000000000000000       F *UND*	0000000000000000              __cxa_allocate_exception@@CXXABI_1.3
000000000007b7e0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000d1470  w    F .text	00000000000006a2              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiagramContext(drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)
00000000000eed60  w    O .rodata	000000000000004f              typeinfo name for drake::systems::State<drake::symbolic::Expression>& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int)
00000000003111b8  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000000a1720  w    F .text	00000000000000f1              void std::vector<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::emplace_back<drake::systems::System<drake::symbolic::Expression> const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&>(drake::systems::System<drake::symbolic::Expression> const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&)
00000000000a35b0  w    F .text	00000000000002da              std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > drake::systems::Diagram<drake::symbolic::Expression>::AllocateForcedEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >(std::function<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression> const*)>) const
0000000000316be0 u     O .bss	0000000000000008              guard variable for drake::lcmt_iiwa_status::getHash()::hash
0000000000312138  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::C_formatter
00000000000d5910  w    F .text	000000000000002d              std::_Sp_counted_deleter<drake::systems::AbstractValue*, std::default_delete<drake::systems::AbstractValue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
0000000000000000       F *UND*	0000000000000000              drake::symbolic::operator+=(drake::symbolic::Expression&, drake::symbolic::Expression const&)
00000000000d88e0  w    F .text	000000000000016e              drake::systems::LeafOutputPort<double>::DoCalc(drake::systems::Context<double> const&, drake::systems::AbstractValue*) const
0000000000316728 g     O .data	0000000000000008              fLD::FLAGS_notarget_realtime_rate
0000000000096ef0  w    F .text	000000000000012e              fmt::format[abi:cxx11](fmt::BasicCStringRef<char>, fmt::ArgList)
00000000003123d0  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::async_logger
00000000000767b0  w    F .text	00000000000002b4              drake::systems::Diagram<drake::symbolic::Expression>::DoGetMutableTargetSystemState(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const
00000000000f18b0  w    O .rodata	0000000000000011              typeinfo name for spdlog::logger
00000000000a2790  w    F .text	000000000000004c              std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> >, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >*)
00000000000cf070  w    F .text	0000000000000018              drake::systems::Supervector<double>::GetAtIndex(int)
00000000000cd9e0  w    F .text	0000000000000287              std::_MakeUniq<drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::__single_object std::make_unique<drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, int&>(int&)
00000000000ae8f0  w    F .text	00000000000000c4              drake::systems::OutputPort<drake::symbolic::Expression>::Calc(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::AbstractValue*) const
0000000000072150  w    F .text	0000000000000006              drake::systems::Subvector<drake::symbolic::Expression>::~Subvector()
0000000000073d10  w    F .text	000000000000007b              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::~DiagramEventCollection()
00000000000d2270  w    F .text	00000000000008d2              drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ContinuousState(std::unique_ptr<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, int, int, int)
00000000000a23b0  w    F .text	00000000000002da              std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateForcedEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >(std::function<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)>) const
00000000000bfe40  w    F .text	00000000000000c9              std::_Rb_tree<drake::systems::PeriodicEventData, std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > >, std::_Select1st<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > > >, drake::systems::PeriodicEventDataComparator, std::allocator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > > > >::_M_get_insert_unique_pos(drake::systems::PeriodicEventData const&)
00000000000c3520  w    F .text	00000000000001ac              drake::systems::State<double>::State()
0000000000071730  w    F .text	0000000000000006              drake::systems::IntegratorBase<double>::DoInitialize()
0000000000074d90  w    F .text	000000000000006e              drake::systems::DiagramContext<double>::GetMutableSubsystemContext(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000000d5e20  w    F .text	000000000000007a              drake::systems::LeafSystemOutput<double>::get_port_value(int) const
00000000000dadc0  w    F .text	0000000000000026              drake::systems::LeafSystem<double>::AllocateForcedPublishEventCollection() const
00000000000bbda0  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
000000000008a160  w    F .text	000000000000003e              drake::systems::Simulator<double>::HandlePublish(drake::systems::EventCollection<drake::systems::PublishEvent<double> > const&)
0000000000078b80  w    F .text	00000000000002b4              drake::systems::Diagram<double>::DoGetMutableTargetSystemState(drake::systems::System<double> const&, drake::systems::State<double>*) const
00000000000d5300  w    F .text	0000000000000066              drake::systems::LeafSystem<double>::DoCalcUnrestrictedUpdate(drake::systems::Context<double> const&, std::vector<drake::systems::UnrestrictedUpdateEvent<double> const*, std::allocator<drake::systems::UnrestrictedUpdateEvent<double> const*> > const&, drake::systems::State<double>*) const
0000000000096800  w    F .text	0000000000000191              void std::vector<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg>, std::allocator<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg> > >::_M_emplace_back_aux<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg> >(std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg>&&)
00000000000dfce0  w    F .text	00000000000002b6              drake::systems::LeafSystem<double>::DoGetPeriodicEvents() const
00000000000ac8a0  w    F .text	0000000000000080              std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> >, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > > >::_M_get_insert_unique_pos(drake::systems::System<drake::symbolic::Expression> const* const&)
00000000000d7850  w    F .text	0000000000000018              drake::examples::kuka_iiwa_arm::IiwaStatusSender::~IiwaStatusSender()
00000000003115b0  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const>
00000000000df940  w    F .text	00000000000000cc              drake::systems::ContinuousState<double>::ContinuousState()
0000000000072400  w    F .text	000000000000000a              drake::systems::System<double>::DoCalcPotentialEnergy(drake::systems::Context<double> const&) const
00000000000852d0  w    F .text	0000000000000103              drake::systems::ContextBase::ContextBase()
00000000000b09b0  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<double>, std::default_delete<drake::systems::CompositeEventCollection<double> > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<double>, std::default_delete<drake::systems::CompositeEventCollection<double> > > > >::~vector()
0000000000072790  w    F .text	000000000000000e              drake::systems::System<drake::symbolic::Expression>::SetRandomParameters(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::Parameters<drake::symbolic::Expression>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
000000000007b430  w    F .text	0000000000000023              drake::systems::Diagram<drake::symbolic::Expression>::DoCalcNextUpdateTime(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*, drake::symbolic::Expression*) const
0000000000071880  w    F .text	0000000000000006              drake::systems::System<double>::DoGetInitializationEvents(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*) const
00000000000f3320  w    O .rodata	00000000000000cc              typeinfo name for drake::systems::SystemScalarConverter::Add<double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}
000000000007c270  w    F .text	000000000000006b              drake::systems::System<drake::symbolic::Expression>::DoEvalConstraintEquationsDot(drake::systems::Context<drake::symbolic::Expression> const&) const
00000000000eeb80  w    O .rodata	0000000000000022              typeinfo name for drake::systems::DiagramState<double>
00000000000b7c30  w    F .text	00000000000000d3              void std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> >::emplace_back<drake::systems::BasicVector<double>*>(drake::systems::BasicVector<double>*&&)
0000000000310b58  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::ContinuousState<drake::symbolic::Expression> const& (int)
00000000000a61b0  w    F .text	00000000000000ee              std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, drake::systems::System<double> const* const&)
00000000000df630  w    F .text	0000000000000302              drake::systems::LeafSystem<double>::DoCalcNextUpdateTime(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*, double*) const
0000000000310c50  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Context<double> const* (drake::systems::System<double> const&, drake::systems::Context<double> const*)
000000000007ed10  w    F .text	00000000000002b3              drake::systems::Diagram<drake::symbolic::Expression>::DoGetPerStepEvents(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const
00000000003129b0  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}
00000000000f15d0  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::H_formatter
0000000000311cf8  w    O .data.rel.ro	0000000000000028              vtable for drake::systems::DiagramContinuousState<double>
0000000000071fc0  w    F .text	0000000000000006              spdlog::details::T_formatter::~T_formatter()
0000000000000000       F *UND*	0000000000000000              std::basic_ostream<char, std::char_traits<char> >::flush()@@GLIBCXX_3.4
00000000000e2070  w    F .text	000000000000036d              drake::systems::LeafContext<double>::DoCloneState() const
000000000009e250  w    F .text	00000000000000ee              std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> >, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, drake::systems::System<double> const* const&)
00000000003121c8  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::I_formatter
0000000000074130  w    F .text	0000000000000078              drake::systems::DiagramState<drake::symbolic::Expression>::~DiagramState()
00000000000cc620  w    F .text	0000000000000160              drake::systems::DiagramContext<drake::symbolic::Expression>::DoCloneState() const
000000000007a690  w    F .text	0000000000000018              drake::systems::InputPortDescriptor<drake::symbolic::Expression>::~InputPortDescriptor()
0000000000000000       F *UND*	0000000000000000              __tls_get_addr@@GLIBC_2.3
00000000000c4ad0  w    F .text	0000000000000287              void std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> >::_M_range_insert<__gnu_cxx::__normal_iterator<drake::systems::BasicVector<double>* const*, std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> > > >(__gnu_cxx::__normal_iterator<drake::systems::BasicVector<double>**, std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> > >, __gnu_cxx::__normal_iterator<drake::systems::BasicVector<double>* const*, std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> > >, __gnu_cxx::__normal_iterator<drake::systems::BasicVector<double>* const*, std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> > >, std::forward_iterator_tag)
0000000000073fc0  w    F .text	0000000000000047              drake::systems::Supervector<drake::symbolic::Expression>::~Supervector()
000000000008c670  w    F .text	0000000000000076              spdlog::details::z_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000a3f60  w    F .text	0000000000000063              Eigen::internal::copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<double, 4, 4, 0, 4, 4> >, Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>, Eigen::Matrix<double, 4, 4, 0, 4, 4> > >, Eigen::internal::assign_op<double, double>, 0>, 1, 16>::run(Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<double, 4, 4, 0, 4, 4> >, Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>, Eigen::Matrix<double, 4, 4, 0, 4, 4> > >, Eigen::internal::assign_op<double, double>, 0>&)
0000000000310c00  w    O .data.rel.ro	0000000000000010              typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > ()
00000000000851b0  w    F .text	0000000000000091              std::vector<std::unique_ptr<drake::systems::DependencyTracker, std::default_delete<drake::systems::DependencyTracker> >, std::allocator<std::unique_ptr<drake::systems::DependencyTracker, std::default_delete<drake::systems::DependencyTracker> > > >::~vector()
00000000000e2ec0 g     F .text	000000000000016a              drake::examples::kuka_iiwa_arm::SetPositionControlledIiwaGains(Eigen::Matrix<double, -1, 1, 0, -1, 1>*, Eigen::Matrix<double, -1, 1, 0, -1, 1>*, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)
0000000000313c38  w    O .data.rel.ro	0000000000000080              vtable for drake::systems::BasicVector<double>
00000000000f1ba0  w    O .rodata	0000000000000038              typeinfo name for drake::systems::VectorBase<drake::symbolic::Expression>
00000000000736a0  w    F .text	0000000000000009              drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::size() const
00000000000dc0e0  w    F .text	00000000000005ec              drake::systems::LeafSystem<double>::LeafSystem(drake::systems::SystemScalarConverter)
0000000000310de8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000737b0  w    F .text	0000000000000055              drake::systems::DiagramContext<double>::set_time(double const&)
0000000000000000       F *UND*	0000000000000000              drake::symbolic::Expression::NaN()
00000000000f0f60  w    O .rodata	0000000000000065              typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*) const>
0000000000312b40  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >
0000000000071ed0  w    F .text	000000000000002a              std::_Function_handler<drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*), drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*&&)
00000000000ac920  w    F .text	00000000000000ee              std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> >, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, drake::systems::System<drake::symbolic::Expression> const* const&)
0000000000313528  w    O .data.rel.ro	0000000000000040              vtable for spdlog::sinks::stderr_sink<std::mutex>
00000000000d50c0  w    F .text	0000000000000067              drake::systems::UnrestrictedUpdateEvent<double>::~UnrestrictedUpdateEvent()
00000000000b05e0  w    F .text	00000000000000a6              drake::systems::Event<double>::Event(drake::systems::Event<double> const&)
0000000000079e90  w    F .text	000000000000005d              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoMapQDotToVelocity(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000096bb0  w    F .text	0000000000000167              fmt::BasicFormatter<char, fmt::ArgFormatter<char> >::parse_arg_name(char const*&)
0000000000075950  w    F .text	00000000000000b3              drake::systems::Diagram<double>::DoValidateAllocatedContext(drake::systems::ContextBase const&) const
00000000000ecf80  w    O .rodata	000000000000003d              typeinfo name for drake::systems::ContinuousState<double> const* (drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*)
00000000000efb40  w    O .rodata	000000000000005e              typeinfo name for drake::systems::CompositeEventCollection<double> const& (drake::systems::DiagramCompositeEventCollection<double>::*)(int) const
00000000000bdfc0  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::SystemOutput<double>, std::default_delete<drake::systems::SystemOutput<double> > >, std::allocator<std::unique_ptr<drake::systems::SystemOutput<double>, std::default_delete<drake::systems::SystemOutput<double> > > > >::~vector()
0000000000000000       F *UND*	0000000000000000              snprintf@@GLIBC_2.2.5
0000000000316ad0 u     O .bss	0000000000000010              spdlog::sinks::stderr_sink<std::mutex>::instance()::instance
00000000000719a0  w    F .text	0000000000000036              std::_Function_handler<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > (drake::systems::System<double> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > (drake::systems::System<double>::*)() const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&)
00000000000a3ec0  w    F .text	000000000000004c              std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >*)
00000000000cfd30  w    F .text	0000000000000c4f              drake::systems::ContextBase::ContextBase(drake::systems::ContextBase const&)
00000000000b0690  w    F .text	00000000000000cb              drake::systems::PublishEvent<double>::DoClone() const
00000000000aef80  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > > > >::~vector()
00000000000a1920  w    F .text	00000000000000f1              void std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::emplace_back<drake::systems::System<double> const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&>(drake::systems::System<double> const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&)
00000000000cc0f0  w    F .text	0000000000000145              void Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<drake::symbolic::Expression>, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> >, Eigen::internal::assign_op<drake::symbolic::Expression, drake::symbolic::Expression> >(Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>&, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<drake::symbolic::Expression>, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> > const&, Eigen::internal::assign_op<drake::symbolic::Expression, drake::symbolic::Expression> const&)
000000000007b6c0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*), drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000a60e0  w    F .text	0000000000000046              std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_insert_node(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >*)
00000000000d6a60  w    F .text	0000000000000072              drake::systems::LeafOutputPort<double>::~LeafOutputPort()
000000000009bcc0  w    F .text	00000000000000f0              std::_Rb_tree_iterator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > > std::_Rb_tree<std::pair<drake::systems::System<double> const*, int>, std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > >, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<double> const*, int> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > >, std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<double> const*, int> const&>&&, std::tuple<>&&)
00000000000d9af0  w    F .text	00000000000001b9              void std::vector<std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > >, std::allocator<std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > > > >::emplace_back<std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > > >(std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > >&&)
0000000000083de0  w    F .text	000000000000017d              spdlog::async_logger::flush()
00000000000ed794  w    O .rodata	0000000000000006              typeinfo name for std::allocator<char>
0000000000312fd0  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::short_level_formatter
00000000003158f0  w    O .data.rel.ro	0000000000000038              vtable for drake::systems::UnrestrictedUpdateEvent<double>
0000000000072090  w    F .text	0000000000000006              spdlog::details::m_formatter::~m_formatter()
0000000000072410  w    F .text	000000000000000a              drake::systems::System<double>::DoCalcKineticEnergy(drake::systems::Context<double> const&) const
00000000000eeb40  w    O .rodata	000000000000002b              typeinfo name for drake::systems::DiagramDiscreteValues<double>
0000000000074760  w    F .text	000000000000003f              spdlog::details::aggregate_formatter::~aggregate_formatter()
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()@@GLIBCXX_3.4.21
00000000000ef960  w    O .rodata	0000000000000042              typeinfo name for drake::systems::ContinuousState<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*) const
00000000000740e0  w    F .text	0000000000000047              drake::systems::Supervector<double>::~Supervector()
00000000000b3e00  w    F .text	000000000000005a              std::_Rb_tree<drake::systems::PeriodicEventData, std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > >, std::_Select1st<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > > >, drake::systems::PeriodicEventDataComparator, std::allocator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > > >*)
00000000000737a0  w    F .text	000000000000000d              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_mutable_parameters()
00000000003157f8  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >
0000000000310cd0  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>
00000000000d5620  w    F .text	0000000000000047              std::_Function_handler<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*), drake::systems::LeafSystem<double>::DeclareVectorOutputPort<drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque, drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&, void (drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::*)(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*) const)::{lambda(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)#1}>::_M_invoke(std::_Any_data const&, drake::systems::Context<double> const&, drake::systems::BasicVector<double>*&&)
000000000007cdf0  w    F .text	000000000000007a              drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_port_value(int) const
000000000007a250  w    F .text	0000000000000088              drake::systems::Diagram<drake::symbolic::Expression>::GetGraphvizOutputPortToken(drake::systems::OutputPort<drake::symbolic::Expression> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
0000000000072470  w    F .text	000000000000000e              drake::systems::System<double>::SetRandomParameters(drake::systems::Context<double> const&, drake::systems::Parameters<double>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
00000000000e0730  w    F .text	000000000000019d              drake::systems::Parameters<double>::Parameters(std::vector<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > > >&&, std::vector<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> >, std::allocator<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > > >&&)
0000000000316c08 g     O .bss	0000000000000008              fLS::FLAGS_spdlog_level[abi:cxx11]
0000000000081cb0  w    F .text	0000000000000324              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::HasEvents() const
000000000009adf0  w    F .text	00000000000002ea              void spdlog::logger::log<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(spdlog::level::level_enum, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000072f10  w    F .text	0000000000000023              std::_Function_handler<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
00000000000f0620  w    O .rodata	0000000000000091              typeinfo name for std::_Simple_type_wrapper<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>
0000000000072160  w    F .text	0000000000000008              drake::systems::System<drake::symbolic::Expression>::do_get_num_constraint_equations(drake::systems::Context<drake::symbolic::Expression> const&) const
000000000007e910  w    F .text	000000000000007d              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::~DiagramEventCollection()
0000000000076a70  w    F .text	00000000000002b4              drake::systems::Diagram<drake::symbolic::Expression>::DoGetTargetSystemState(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*) const
00000000000c7740  w    F .text	0000000000000314              drake::systems::Diagram<drake::symbolic::Expression>::DoGetPeriodicEvents() const
000000000008c650  w    F .text	000000000000001d              spdlog::details::R_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000071a60  w    F .text	0000000000000012              drake::systems::System<double>::DoGetTargetSystemContext(drake::systems::System<double> const&, drake::systems::Context<double> const*) const
0000000000312d28  w    O .data.rel.ro	0000000000000028              typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const
0000000000000000       O *UND*	0000000000000000              typeinfo for std::bad_alloc@@GLIBCXX_3.4
00000000000c1390  w    F .text	00000000000002a5              drake::systems::Diagram<double>::AllocateOutput(drake::systems::Context<double> const&) const
0000000000089e60  w    F .text	000000000000009e              drake::systems::IntegratorBase<double>::~IntegratorBase()
00000000003147c8  w    O .data.rel.ro	0000000000000208              vtable for drake::systems::Diagram<drake::symbolic::Expression>
0000000000000000       F *UND*	0000000000000000              drake::lcm::DrakeLcm::DrakeLcm()
0000000000310ec8  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::Value<drake::lcmt_iiwa_status>
0000000000072fd0  w    F .text	0000000000000023              std::_Function_handler<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000314ef0  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::LeafOutputPort<double>::set_calculation_function(std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>)::{lambda(drake::systems::Context<double> const&, drake::systems::AbstractValue*)#1}
000000000008d4c0  w    F .text	00000000000000be              auto drake::systems::DiagramBuilder<double>::ThrowIfAlgebraicLoopsExist() const::{lambda(auto:1 const&)#2}::operator()<std::pair<drake::systems::System<double> const*, int> >(std::pair<drake::systems::System<double> const*, int> const&) const
0000000000072bd0  w    F .text	0000000000000023              std::_Function_handler<drake::systems::State<drake::symbolic::Expression>& (drake::systems::DiagramState<drake::symbolic::Expression>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<drake::symbolic::Expression>& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int)>::_M_invoke(std::_Any_data const&, drake::systems::DiagramState<drake::symbolic::Expression>*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000310b88  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>
0000000000000000       F *UND*	0000000000000000              std::basic_ostream<char, std::char_traits<char> >::put(char)@@GLIBCXX_3.4
0000000000093630  w    F .text	0000000000000078              void Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<double, -1, 1, 0, -1, 1>, Eigen::Matrix<double, -1, 1, 0, -1, 1>, Eigen::internal::assign_op<double, double> >(Eigen::Matrix<double, -1, 1, 0, -1, 1>&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, Eigen::internal::assign_op<double, double> const&)
0000000000312708  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::Context<double>& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000000f5e80  w    O .rodata	0000000000000045              typeinfo name for drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque
00000000000b80c0  w    F .text	00000000000001fb              drake::systems::Parameters<double>::Parameters()
0000000000310a28  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::State<double>& (int)
0000000000089d70  w    F .text	000000000000005e              std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >*)
00000000000c5df0  w    F .text	0000000000000149              drake::systems::Diagram<drake::symbolic::Expression>::AllocateDiscreteVariables() const
000000000007a0f0  w    F .text	0000000000000032              drake::systems::Value<int>::~Value()
00000000000a2300  w    F .text	00000000000000a6              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateForcedDiscreteUpdateEventCollection() const
0000000000316700 u     O .data	0000000000000028              fmt::internal::BasicData<void>::POWERS_OF_10_32
00000000000898c0  w    F .text	0000000000000059              void Eigen::internal::conditional_aligned_delete_auto<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, true>(Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >*, unsigned long)
0000000000316a80 u     O .bss	0000000000000008              guard variable for drake::NiceTypeName::Get<drake::systems::ContextBase>()::canonical
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@@GLIBCXX_3.4.21
000000000009dbc0  w    F .text	00000000000000c9              std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<double, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<double, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}> const&, std::_Manager_operation)
0000000000074940  w    F .text	0000000000000024              drake::systems::ContinuousState<drake::symbolic::Expression>::~ContinuousState()
0000000000086900  w    F .text	0000000000000039              spdlog::details::short_level_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000085120  w    F .text	0000000000000089              std::vector<drake::copyable_unique_ptr<drake::systems::CacheEntryValue>, std::allocator<drake::copyable_unique_ptr<drake::systems::CacheEntryValue> > >::~vector()
00000000000b4ef0  w    F .text	0000000000000067              drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramDiscreteValues()
000000000009d470  w    F .text	00000000000000c9              std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, double>(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, double>(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}> const&, std::_Manager_operation)
00000000000743d0  w    F .text	000000000000000f              spdlog::details::v_formatter::~v_formatter()
00000000000b0cf0  w    F .text	00000000000000b4              drake::systems::Subvector<double>::Subvector(drake::systems::VectorBase<double>*, int, int)
00000000000a3e20  w    F .text	000000000000004c              std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >*)
00000000000e4390  w    F .text	0000000000000158              std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000310f98  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >
000000000009f6b0  w    F .text	0000000000000270              drake::systems::Diagram<double>::Diagram(std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> >)
000000000007b2b0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000316900 u     O .bss	0000000000000008              guard variable for drake::NiceTypeName::Get<int>()::canonical
0000000000312cc8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Diagram<drake::symbolic::Expression>::Initialize(std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> >)::{lambda(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>*)#1}
0000000000000000       F *UND*	0000000000000000              std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@@GLIBCXX_3.4
0000000000074460  w    F .text	000000000000000f              spdlog::details::E_formatter::~E_formatter()
00000000000bff10  w    F .text	00000000000001ef              std::_Rb_tree<drake::systems::PeriodicEventData, std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > >, std::_Select1st<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > > >, drake::systems::PeriodicEventDataComparator, std::allocator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > > >, drake::systems::PeriodicEventData const&)
00000000000c96e0  w    F .text	0000000000000345              drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiagramContinuousState(std::vector<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> >)
00000000000a2b70  w    F .text	0000000000000096              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Diagram()
0000000000000000       F *UND*	0000000000000000              __cxa_guard_release@@CXXABI_1.3
00000000000bdf10  w    F .text	00000000000000a8              drake::systems::Value<drake::lcmt_iiwa_command>::Clone() const
00000000000ded80  w    F .text	000000000000012f              drake::systems::LeafContext<double>::~LeafContext()
0000000000311de0  w    O .data.rel.ro	0000000000000078              vtable for drake::systems::Supervector<drake::symbolic::Expression>
000000000008a950  w    F .text	0000000000000035              drake::systems::BasicVector<drake::symbolic::Expression>::~BasicVector()
00000000000baee0  w    F .text	0000000000000b6b              drake::systems::DiscreteValues<drake::symbolic::Expression>::DoClone() const
00000000003114b0  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*) const
0000000000089920  w    F .text	0000000000000020              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~BasicVector()
00000000000e34b0  w    F .text	0000000000000182              void std::vector<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >, std::allocator<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > > >::_M_emplace_back_aux<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > >(std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >&&)
00000000000ee420  w    O .rodata	0000000000000060              typeinfo name for drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000df940  w    F .text	00000000000000cc              drake::systems::ContinuousState<double>::ContinuousState()
0000000000071660  w    F .text	000000000000000a              drake::systems::BasicVector<drake::symbolic::Expression>::size() const
00000000000c7ec0  w    F .text	000000000000025b              std::vector<drake::systems::DependencyTracker const*, std::allocator<drake::systems::DependencyTracker const*> >::_M_fill_insert(__gnu_cxx::__normal_iterator<drake::systems::DependencyTracker const**, std::vector<drake::systems::DependencyTracker const*, std::allocator<drake::systems::DependencyTracker const*> > >, unsigned long, drake::systems::DependencyTracker const* const&)
0000000000079c50  w    F .text	000000000000008d              drake::systems::VectorBase<double>::SetFrom(drake::systems::VectorBase<double> const&)
0000000000075690  w    F .text	00000000000002b4              drake::systems::Diagram<double>::DoGetMutableTargetSystemContext(drake::systems::System<double> const&, drake::systems::Context<double>*) const
0000000000072080  w    F .text	0000000000000006              spdlog::details::d_formatter::~d_formatter()
0000000000000000       F *UND*	0000000000000000              drake::lcm::DrakeLcm::StartReceiveThread()
0000000000000000       F *UND*	0000000000000000              std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@@GLIBCXX_3.4
0000000000073770  w    F .text	000000000000000d              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_state() const
00000000000b0aa0  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > > > >::~vector()
00000000000d64e0  w    F .text	00000000000000c9              drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >::~LeafEventCollection()
00000000000832a0  w    F .text	0000000000000024              drake::systems::DiagramContext<double>::~DiagramContext()
000000000008ae00  w    F .text	0000000000000368              void std::vector<RigidBodyFrame<double>, std::allocator<RigidBodyFrame<double> > >::_M_emplace_back_aux<RigidBodyFrame<double> >(RigidBodyFrame<double>&&)
00000000000ef540  w    O .rodata	000000000000008c              typeinfo name for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const
00000000000f3100  w    O .rodata	0000000000000067              typeinfo name for drake::systems::Context<double> const& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const
0000000000312538  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::OutputPort<double>
00000000000b0db0  w    F .text	0000000000000268              drake::systems::Diagram<double>::DoMapVelocityToQDot(drake::systems::Context<double> const&, Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<double>*) const
0000000000097020  w    F .text	000000000000002a              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fmt::format<char>(fmt::BasicCStringRef<char>, char const&)
000000000007bba0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000e1fc0  w    F .text	00000000000000a1              std::_MakeUniq<drake::systems::ContinuousState<double> >::__single_object std::make_unique<drake::systems::ContinuousState<double>, std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, int, int, int>(std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >&&, int&&, int&&, int&&)
00000000000c1240  w    F .text	0000000000000049              std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >::_M_check_len(unsigned long, char const*) const
0000000000073650  w    F .text	000000000000001c              drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::size() const
000000000007a370  w    F .text	0000000000000088              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetGraphvizOutputPortToken(drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
0000000000000000       F *UND*	0000000000000000              drake::systems::SystemBase::ThrowNotAVectorInputPort(char const*, drake::TypeSafeIndex<drake::systems::InputPortTag>) const
0000000000313020  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::A_formatter
00000000000a8800  w    F .text	0000000000000025              std::_Function_handler<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&), drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)
00000000000d78b0  w    F .text	0000000000000039              drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::~IiwaContactResultsToExternalTorque()
0000000000312ab0  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::Context<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double> const*) const>
000000000008db40  w    F .text	00000000000000b3              void std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >::_M_emplace_back_aux<drake::systems::WitnessFunction<double> const* const&>(drake::systems::WitnessFunction<double> const* const&)
0000000000073b10  w    F .text	000000000000007b              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::~DiagramEventCollection()
00000000000f67d8 g     O .rodata	0000000000000008              drake::examples::kuka_iiwa_arm::kIiwaLcmStatusPeriod
0000000000080a10  w    F .text	00000000000002df              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::Clear()
0000000000073670  w    F .text	000000000000001c              drake::systems::Supervector<drake::symbolic::Expression>::size() const
0000000000315838  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >
00000000000b2820  w    F .text	000000000000086a              drake::systems::Diagram<drake::symbolic::Expression>::SetDefaultParameters(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::Parameters<drake::symbolic::Expression>*) const
00000000000f1d20  w    O .rodata	0000000000000029              typeinfo name for drake::systems::InputPortDescriptor<double>
00000000000723b0  w    F .text	0000000000000006              std::_Sp_counted_ptr_inplace<spdlog::pattern_formatter, std::allocator<spdlog::pattern_formatter>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
000000000008f000  w    F .text	00000000000000a1              std::_Hashtable<drake::systems::SystemScalarConverter::Key, std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> >, std::allocator<std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> > >, std::__detail::_Select1st, std::equal_to<drake::systems::SystemScalarConverter::Key>, drake::systems::SystemScalarConverter::KeyHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Hashtable(std::_Hashtable<drake::systems::SystemScalarConverter::Key, std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> >, std::allocator<std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> > >, std::__detail::_Select1st, std::equal_to<drake::systems::SystemScalarConverter::Key>, drake::systems::SystemScalarConverter::KeyHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >&&)
0000000000000000       F *UND*	0000000000000000              drake::NiceTypeName::Demangle[abi:cxx11](char const*)
00000000000d5280  w    F .text	000000000000000d              drake::systems::LeafContext<double>::get_mutable_state()
00000000000b1420  w    F .text	0000000000000039              drake::systems::Context<drake::symbolic::Expression>::~Context()
00000000000f4820  w    O .rodata	00000000000000aa              typeinfo name for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>
0000000000000000       F *UND*	0000000000000000              __gxx_personality_v0@@CXXABI_1.3
00000000000b66a0  w    F .text	000000000000005a              std::_Rb_tree<drake::systems::PeriodicEventData, std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >, std::_Select1st<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > >, drake::systems::PeriodicEventDataComparator, std::allocator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > >*)
0000000000094d80  w    F .text	0000000000000146              drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque* drake::systems::DiagramBuilder<double>::AddSystem<drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque, RigidBodyTree<double> const&, std::vector<int, std::allocator<int> >&>(RigidBodyTree<double> const&, std::vector<int, std::allocator<int> >&)
00000000000eee20  w    O .rodata	0000000000000051              typeinfo name for drake::systems::State<drake::symbolic::Expression> const& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int) const
00000000000ba540  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::Context<drake::symbolic::Expression>, std::default_delete<drake::systems::Context<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::Context<drake::symbolic::Expression>, std::default_delete<drake::systems::Context<drake::symbolic::Expression> > > > >::~vector()
00000000000f6160  w    O .rodata	000000000000002d              typeinfo name for drake::systems::UnrestrictedUpdateEvent<double>
00000000000d0bf0  w    F .text	0000000000000097              drake::systems::Value<drake::lcmt_iiwa_status>::SetFrom(drake::systems::AbstractValue const&)
00000000000f1dd0  w    O .rodata	000000000000001a              typeinfo name for drake::systems::Event<double>
00000000000b7190  w    F .text	0000000000000648              drake::systems::DiagramCompositeEventCollection<double>::DiagramCompositeEventCollection(std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<double>, std::default_delete<drake::systems::CompositeEventCollection<double> > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<double>, std::default_delete<drake::systems::CompositeEventCollection<double> > > > >)
0000000000000000       F *UND*	0000000000000000              std::logic_error::~logic_error()@@GLIBCXX_3.4
0000000000314170  w    O .data.rel.ro	0000000000000038              vtable for drake::systems::PublishEvent<double>
0000000000312390  w    O .data.rel.ro	0000000000000010              typeinfo for spdlog::logger
0000000000072920  w    F .text	0000000000000012              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetMutableTargetSystemState(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000072090  w    F .text	0000000000000006              spdlog::details::m_formatter::~m_formatter()
00000000000d6410  w    F .text	00000000000000c7              drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >::~LeafEventCollection()
0000000000312108  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::B_formatter
0000000000314240  w    O .data.rel.ro	0000000000000028              vtable for drake::systems::DiscreteValues<double>
00000000000a3e10  w    F .text	000000000000000c              non-virtual thunk to drake::systems::Diagram<drake::symbolic::Expression>::~Diagram()
00000000000f1160  w    O .rodata	000000000000001c              typeinfo name for drake::lcmt_iiwa_command
0000000000086a30  w    F .text	000000000000001a              std::shared_ptr<spdlog::sinks::stderr_sink<std::mutex> >::~shared_ptr()
0000000000079d70  w    F .text	000000000000005d              drake::systems::System<double>::DoMapVelocityToQDot(drake::systems::Context<double> const&, Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<double>*) const
0000000000089d00  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > >, std::allocator<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > > >::~vector()
00000000000d2b50  w    F .text	000000000000013f              drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoClone() const
00000000000f0d80  w    O .rodata	000000000000005c              typeinfo name for std::_Simple_type_wrapper<drake::systems::ContinuousState<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*) const>
0000000000000000  w      *UND*	0000000000000000              _Jv_RegisterClasses
000000000007c200  w    F .text	000000000000006b              drake::systems::System<drake::symbolic::Expression>::DoEvalConstraintEquations(drake::systems::Context<drake::symbolic::Expression> const&) const
000000000007b660  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramState<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<drake::symbolic::Expression> const& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000744e0  w    F .text	000000000000000f              spdlog::details::d_formatter::~d_formatter()
000000000008f0b0  w    F .text	00000000000002da              std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > drake::systems::Diagram<double>::AllocateForcedEventCollection<drake::systems::PublishEvent<double> >(std::function<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > (drake::systems::System<double> const*)>) const
0000000000075620  w    F .text	0000000000000009              non-virtual thunk to drake::systems::Diagram<double>::GetParentPathname() const
00000000000f1cb0  w    O .rodata	000000000000001c              typeinfo name for drake::systems::Diagram<double>
0000000000312b20  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >
00000000000edd80  w    O .rodata	000000000000004d              typeinfo name for drake::systems::Context<double> const& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
0000000000074870  w    F .text	000000000000000f              drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Subvector()
000000000009d2a0  w    F .text	0000000000000024              drake::systems::System<drake::symbolic::Expression>::~System()
0000000000000000       F *UND*	0000000000000000              drake::systems::lcm::LcmPublisherSystem::LcmPublisherSystem(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<drake::systems::lcm::SerializerInterface, std::default_delete<drake::systems::lcm::SerializerInterface> >, drake::lcm::DrakeLcmInterface*)
00000000000b7ae0  w    F .text	0000000000000144              void std::vector<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > > > >::emplace_back<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > > >(std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >&&)
0000000000312198  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::d_formatter
0000000000000000       F *UND*	0000000000000000              std::ios_base::Init::~Init()@@GLIBCXX_3.4
000000000007c430  w    F .text	000000000000006b              drake::systems::System<double>::DoEvalConstraintEquationsDot(drake::systems::Context<double> const&) const
00000000000efca0  w    O .rodata	000000000000009b              typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<drake::symbolic::Expression>& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>
0000000000073630  w    F .text	000000000000001c              drake::systems::Supervector<double>::size() const
000000000008a990  w    F .text	0000000000000041              drake::systems::BasicVector<drake::symbolic::Expression>::~BasicVector()
00000000000c7cf0  w    F .text	00000000000001ca              drake::systems::Diagram<drake::symbolic::Expression>::DoGetWitnessFunctions(drake::systems::Context<drake::symbolic::Expression> const&, std::vector<drake::systems::WitnessFunction<drake::symbolic::Expression> const*, std::allocator<drake::systems::WitnessFunction<drake::symbolic::Expression> const*> >*) const
00000000000f2ac0  w    O .rodata	0000000000000096              typeinfo name for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > (drake::systems::System<double>::*)() const>
00000000000cddd0  w    F .text	000000000000015a              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::MakeState()
0000000000090df0  w    F .text	00000000000000ea              drake::systems::System<drake::symbolic::Expression>::DoCalcVelocityChangeFromConstraintImpulses(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<double, -1, -1, 0, -1, -1> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&) const
000000000008ebb0  w    F .text	000000000000010a              std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&)
0000000000314b58  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::InputPortDescriptor<drake::symbolic::Expression>
00000000000cdc70  w    F .text	0000000000000160              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCloneState() const
00000000000c29d0  w    F .text	0000000000000034              drake::systems::Value<drake::lcmt_iiwa_command>::GetNiceTypeName() const
00000000000ee9c0  w    O .rodata	000000000000002f              typeinfo name for drake::systems::Value<drake::lcmt_iiwa_status>
00000000000d79a0  w    F .text	000000000000005e              std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>::function(std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)> const&)
00000000000f44e0  w    O .rodata	000000000000009a              typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const
00000000000c5950  w    F .text	0000000000000287              void std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> >::_M_range_insert<__gnu_cxx::__normal_iterator<drake::systems::BasicVector<drake::symbolic::Expression>* const*, std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> > > >(__gnu_cxx::__normal_iterator<drake::systems::BasicVector<drake::symbolic::Expression>**, std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> > >, __gnu_cxx::__normal_iterator<drake::systems::BasicVector<drake::symbolic::Expression>* const*, std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> > >, __gnu_cxx::__normal_iterator<drake::systems::BasicVector<drake::symbolic::Expression>* const*, std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> > >, std::forward_iterator_tag)
0000000000310e38  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000071b10  w    F .text	0000000000000037              std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}> const&, std::_Manager_operation)
000000000007c020  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramCompositeEventCollection<double>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<double>& (drake::systems::DiagramCompositeEventCollection<double>::*)(int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000071890  w    F .text	0000000000000006              drake::systems::System<double>::DoGetPerStepEvents(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*) const
00000000000d94a0  w    F .text	000000000000027b              std::vector<double, std::allocator<double> >::_M_fill_insert(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, unsigned long, double const&)
00000000000d64e0  w    F .text	00000000000000c9              drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >::~LeafEventCollection()
000000000007ba20  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000072900  w    F .text	0000000000000012              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetMutableTargetSystemContext(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000071fe0  w    F .text	0000000000000006              spdlog::details::r_formatter::~r_formatter()
00000000000a89a0  w    F .text	000000000000008d              std::_Rb_tree_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> > std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&>&&, std::tuple<>&&)
00000000000f2260  w    O .rodata	0000000000000041              typeinfo name for drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >
0000000000083180  w    F .text	000000000000011f              drake::systems::DiagramContext<double>::~DiagramContext()
000000000009c8a0  w    F .text	0000000000000153              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::Diagram<double> >()
000000000008ed90  w    F .text	0000000000000266              drake::systems::DiagramBuilder<double>::Connect(drake::systems::OutputPort<double> const&, drake::systems::InputPortDescriptor<double> const&)
0000000000316920 u     O .bss	0000000000000020              drake::NiceTypeName::Get<int>()::canonical[abi:cxx11]
0000000000074880  w    F .text	0000000000000024              drake::systems::Parameters<drake::symbolic::Expression>::~Parameters()
0000000000096260  w    F .text	00000000000002b2              drake::systems::controllers::InverseDynamicsController<double>* drake::manipulation::util::SimDiagramBuilder<double>::AddController<drake::systems::controllers::InverseDynamicsController<double>, std::unique_ptr<RigidBodyTree<double>, std::default_delete<RigidBodyTree<double> > >, Eigen::Matrix<double, -1, 1, 0, -1, 1>&, Eigen::Matrix<double, -1, 1, 0, -1, 1>&, Eigen::Matrix<double, -1, 1, 0, -1, 1>&, bool>(int, std::unique_ptr<RigidBodyTree<double>, std::default_delete<RigidBodyTree<double> > >&&, Eigen::Matrix<double, -1, 1, 0, -1, 1>&, Eigen::Matrix<double, -1, 1, 0, -1, 1>&, Eigen::Matrix<double, -1, 1, 0, -1, 1>&, bool&&)
0000000000000000       F *UND*	0000000000000000              drake::detail::Abort(char const*, char const*, char const*, int)
0000000000074fd0  w    F .text	000000000000006e              drake::systems::DiagramContext<drake::symbolic::Expression>::GetMutableSubsystemContext(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000000ba4d0  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::SystemOutput<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemOutput<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::SystemOutput<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemOutput<drake::symbolic::Expression> > > > >::~vector()
00000000000d78f0  w    F .text	0000000000000018              drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::~IiwaCommandReceiver()
000000000007eb90  w    F .text	000000000000007d              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::~DiagramEventCollection()
0000000000311838  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::internal::DiagramOutput<drake::symbolic::Expression>
00000000000f1140  w    O .rodata	000000000000001b              typeinfo name for drake::lcmt_iiwa_status
00000000000b0c10  w    F .text	0000000000000067              drake::systems::DiagramDiscreteValues<double>::~DiagramDiscreteValues()
0000000000314f00  w    O .data.rel.ro	0000000000000038              vtable for drake::systems::LeafOutputPort<double>
0000000000000000       F *UND*	0000000000000000              drake::systems::ContextBase::CreateBuiltInTrackers()
0000000000311b00  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000714b0  w    F .text	000000000000002f              spdlog::logger::flush()
00000000000f10c0  w    O .rodata	000000000000007e              typeinfo name for drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (*)(drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
00000000000936e0  w    F .text	00000000000000b1              drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetFrom(drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)
00000000000850c0  w    F .text	000000000000005d              drake::systems::DiagramContext<double>::set_accuracy(stx::optional<double> const&)
00000000000d1b80  w    F .text	0000000000000555              drake::systems::DiagramContext<double>::DiagramContext(drake::systems::DiagramContext<double> const&)
0000000000310f20  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::internal::DiagramOutput<double>
00000000000d52b0  w    F .text	000000000000004b              drake::systems::LeafSystem<double>::DoPublish(drake::systems::Context<double> const&, std::vector<drake::systems::PublishEvent<double> const*, std::allocator<drake::systems::PublishEvent<double> const*> > const&) const
0000000000000000 u       .tbss	0000000000000008              guard variable for spdlog::details::os::thread_id()::tid
00000000000d5230  w    F .text	0000000000000006              drake::systems::LeafSystem<double>::DoValidateAllocatedLeafContext(drake::systems::LeafContext<double> const&) const
00000000000cbf60  w    F .text	000000000000018d              drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ContinuousState(std::unique_ptr<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >)
0000000000311c58  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::Value<drake::lcmt_iiwa_command>
0000000000310af8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Context<drake::symbolic::Expression>& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
000000000007da60  w    F .text	0000000000000051              drake::systems::Value<drake::lcmt_iiwa_command>::~Value()
0000000000000000       F *UND*	0000000000000000              drake::systems::SystemBase::~SystemBase()
00000000000720e0  w    F .text	0000000000000006              spdlog::details::B_formatter::~B_formatter()
00000000000d7f00  w    F .text	0000000000000153              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::ContactResults<double> >()
00000000000723b0  w    F .text	0000000000000006              std::_Sp_counted_ptr_inplace<spdlog::pattern_formatter, std::allocator<spdlog::pattern_formatter>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
00000000000f6440  w    O .rodata	00000000000000d2              typeinfo name for drake::systems::LeafSystem<double>::DeclareVectorOutputPort<drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque, drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&, void (drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::*)(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*) const)::{lambda(drake::systems::Context<double> const&)#2}
00000000000789f0  w    F .text	0000000000000187              drake::systems::Diagram<double>::DispatchPublishHandler(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::PublishEvent<double> > const&) const
0000000000000000       F *UND*	0000000000000000              drake::symbolic::Expression::Zero()
0000000000073810  w    F .text	000000000000000d              drake::systems::DiagramContext<double>::get_state() const
000000000008cd90  w    F .text	0000000000000036              std::__shared_ptr<drake::symbolic::ExpressionCell, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<drake::symbolic::ExpressionCell, (__gnu_cxx::_Lock_policy)2> const&)
0000000000314218  w    O .data.rel.ro	0000000000000028              vtable for drake::systems::ContinuousState<double>
00000000000b2430  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::BasicVector<drake::symbolic::Expression>, std::default_delete<drake::systems::BasicVector<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<drake::symbolic::Expression>, std::default_delete<drake::systems::BasicVector<drake::symbolic::Expression> > > > >::~vector()
000000000007cf40  w    F .text	0000000000000049              drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Supervector()
0000000000316739 g     O .data	0000000000000001              fLB::FLAGS_visualize_frames
00000000003119a0  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000000000       F *UND*	0000000000000000              time@@GLIBC_2.2.5
00000000000ba4b0  w    F .text	000000000000001f              drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoAllocate() const
0000000000000000       F *UND*	0000000000000000              RigidBodyFrame<double>::RigidBodyFrame(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, RigidBody<double>*, Eigen::Transform<double, 3, 1, 0> const&)
0000000000000000       F *UND*	0000000000000000              drake::systems::SystemScalarConverter::RemoveUnlessAlsoSupportedBy(drake::systems::SystemScalarConverter const&)
00000000000ecb80  w    O .rodata	000000000000007d              typeinfo name for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)
0000000000313070  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::B_formatter
0000000000088ac0  w    F .text	0000000000000727              spdlog::pattern_formatter::handle_flag(char)
000000000009cd20  w    F .text	000000000000005e              std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)>::function(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)> const&)
00000000000d76a0  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::AbstractValue const, std::default_delete<drake::systems::AbstractValue const> >, std::allocator<std::unique_ptr<drake::systems::AbstractValue const, std::default_delete<drake::systems::AbstractValue const> > > >::~vector()
00000000000d5370  w    F .text	0000000000000066              drake::systems::LeafSystem<double>::DoCalcDiscreteVariableUpdates(drake::systems::Context<double> const&, std::vector<drake::systems::DiscreteUpdateEvent<double> const*, std::allocator<drake::systems::DiscreteUpdateEvent<double> const*> > const&, drake::systems::DiscreteValues<double>*) const
0000000000000000       F *UND*	0000000000000000              drake::symbolic::operator*(drake::symbolic::Expression, drake::symbolic::Expression const&)
0000000000312b00  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
00000000000f3fc0  w    O .rodata	00000000000000d7              typeinfo name for drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Initialize(std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> >)::{lambda(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>*)#1}
0000000000073840  w    F .text	000000000000000d              drake::systems::DiagramContext<double>::get_mutable_parameters()
00000000000745d0  w    F .text	000000000000004e              fmt::BasicMemoryWriter<char, std::allocator<char> >::~BasicMemoryWriter()
000000000007da10  w    F .text	0000000000000044              drake::systems::Value<drake::lcmt_iiwa_command>::~Value()
0000000000310da8  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000c1290  w    F .text	00000000000000f5              std::vector<drake::systems::OutputPortValue*, std::allocator<drake::systems::OutputPortValue*> >::_M_default_append(unsigned long)
0000000000311788  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<double> const& (drake::systems::DiagramCompositeEventCollection<double>::*)(int) const>
0000000000312660  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::DiscreteValues<double>
000000000009a090  w    F .text	000000000000085a              drake::systems::Simulator<double>::Simulator(drake::systems::System<double> const&, std::unique_ptr<drake::systems::Context<double>, std::default_delete<drake::systems::Context<double> > >)
0000000000000000       F *UND*	0000000000000000              std::chrono::_V2::system_clock::now()@@GLIBCXX_3.4.19
0000000000312500  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::VectorBase<drake::symbolic::Expression>
00000000000a89a0  w    F .text	000000000000008d              std::_Rb_tree_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> > std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&>&&, std::tuple<>&&)
000000000007f530  w    F .text	000000000000018f              drake::systems::Diagram<double>::SetDefaultState(drake::systems::Context<double> const&, drake::systems::State<double>*) const
0000000000072fa0  w    F .text	000000000000002a              std::_Function_handler<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&)
00000000000772b0  w    F .text	00000000000001f8              drake::systems::Diagram<drake::symbolic::Expression>::AddTriggeredWitnessFunctionToCompositeEventCollection(drake::systems::Event<drake::symbolic::Expression>*, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const
00000000000a4090  w    F .text	0000000000000388              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_output_port(int) const
0000000000091c40  w    F .text	0000000000000b66              drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoPlusEqScaled(std::initializer_list<std::pair<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&> > const&)
0000000000312528  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::SystemOutput<drake::symbolic::Expression>
0000000000000000       F *UND*	0000000000000000              drake::detail::Throw(char const*, char const*, char const*, int)
0000000000089d00  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > >, std::allocator<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > > >::~vector()
00000000000f1c40  w    O .rodata	000000000000002e              typeinfo name for drake::systems::CompositeEventCollection<double>
0000000000071e50  w    F .text	0000000000000006              drake::systems::DiagramOutputPort<drake::symbolic::Expression>::~DiagramOutputPort()
00000000000aec90  w    F .text	00000000000001f9              drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalc(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::AbstractValue*) const
00000000000d4f00  w    F .text	0000000000000008              std::ctype<char>::do_widen(char) const
0000000000078e40  w    F .text	00000000000002b4              drake::systems::Diagram<double>::DoGetTargetSystemState(drake::systems::System<double> const&, drake::systems::State<double> const*) const
000000000007fe90  w    F .text	00000000000002df              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::Clear()
00000000003134d0  w    O .data.rel.ro	0000000000000058              vtable for spdlog::logger
000000000008d710  w    F .text	000000000000014e              std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::operator=(std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > const&)
00000000000da2c0  w    F .text	00000000000003fc              drake::systems::LeafSystem<double>::CreateAbstractLeafOutputPort(std::function<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > ()>, std::function<void (drake::systems::Context<double> const&, drake::systems::AbstractValue*)>)
0000000000071cc0  w    F .text	0000000000000036              std::_Function_handler<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&)
0000000000316bf0 u     O .bss	0000000000000008              guard variable for drake::lcmt_iiwa_command::getHash()::hash
0000000000073470  w    F .text	000000000000000a              drake::systems::DiagramContinuousState<double>::z_selector(drake::systems::ContinuousState<double>*)
00000000000b3d60  w    F .text	0000000000000098              std::_Rb_tree_iterator<std::pair<int const, int> > std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_emplace_equal<drake::TypeSafeIndex<drake::systems::InputPortTag>&, drake::TypeSafeIndex<drake::systems::OutputPortTag>&>(drake::TypeSafeIndex<drake::systems::InputPortTag>&, drake::TypeSafeIndex<drake::systems::OutputPortTag>&)
000000000009d2d0  w    F .text	000000000000005e              std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)>::function(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)> const&)
00000000000f08c0  w    O .rodata	00000000000000a4              typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>
000000000009e1d0  w    F .text	0000000000000080              std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> >, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > > >::_M_get_insert_unique_pos(drake::systems::System<double> const* const&)
00000000000af0f0  w    F .text	0000000000000055              std::_MakeUniq<drake::systems::AbstractValues>::__single_object std::make_unique<drake::systems::AbstractValues, std::vector<drake::systems::AbstractValue*, std::allocator<drake::systems::AbstractValue*> >&>(std::vector<drake::systems::AbstractValue*, std::allocator<drake::systems::AbstractValue*> >&)
00000000000df580  w    F .text	00000000000000a3              void std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> >::_M_emplace_back_aux<drake::systems::Event<double> const*>(drake::systems::Event<double> const*&&)
0000000000090ee0  w    F .text	00000000000008b3              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcNextUpdateTime(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >*) const
000000000009b0e0  w    F .text	0000000000000220              drake::systems::Diagram<double>::NamesAreUniqueAndNonEmpty() const
0000000000000000       F *UND*	0000000000000000              drake::systems::FrameVisualizer::FrameVisualizer(RigidBodyTree<double> const*, std::vector<RigidBodyFrame<double>, std::allocator<RigidBodyFrame<double> > > const&, drake::lcm::DrakeLcmInterface*)
0000000000313cb8  w    O .data.rel.ro	0000000000000028              vtable for drake::systems::ContinuousState<drake::symbolic::Expression>
00000000000f4ca0  w    O .rodata	0000000000000093              typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>
00000000000dc6d0 g     F .text	0000000000000298              drake::examples::kuka_iiwa_arm::IiwaCommandReceiver::IiwaCommandReceiver(int)
00000000000d8510  w    F .text	000000000000005e              std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)>::function(std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)> const&)
0000000000000000       F *UND*	0000000000000000              drake::systems::AbstractValues::AbstractValues(std::vector<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> >, std::allocator<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > > >&&)
0000000000095730  w    F .text	0000000000000093              std::_MakeUniq<drake::systems::BasicVector<double> >::__single_object std::make_unique<drake::systems::BasicVector<double>, int>(int&&)
00000000000eefe0  w    O .rodata	0000000000000076              typeinfo name for drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int)
00000000000dffa0  w    F .text	00000000000001e7              drake::systems::LeafSystem<double>::AllocateDiscreteState() const
0000000000000000       F *UND*	0000000000000000              drake::systems::RigidBodyPlant<double>::model_instance_torque_output_port(int) const
000000000007ae40  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramContext<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<double> const& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000072520  w    F .text	000000000000000a              drake::systems::BasicVector<double>::size() const
00000000000afb20  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
00000000003128a8  w    O .data.rel.ro	0000000000000038              typeinfo for drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000a1820  w    F .text	00000000000000f1              void std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::emplace_back<drake::systems::System<double> const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&>(drake::systems::System<double> const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&)
0000000000073410  w    F .text	000000000000000a              drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::q_selector(drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
00000000000ee680  w    O .rodata	0000000000000069              typeinfo name for drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000072840  w    F .text	0000000000000012              drake::systems::System<drake::symbolic::Expression>::DoGetTargetSystemCompositeEventCollection(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*) const
0000000000000000       F *UND*	0000000000000000              drake::systems::AbstractValues::Clone() const
0000000000311718  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::State<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double> const*) const>
000000000008b270  w    F .text	00000000000001bc              drake::systems::System<double>::SetDefaultContext(drake::systems::Context<double>*) const
00000000000d5090  w    F .text	0000000000000022              std::_Function_handler<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > (), drake::systems::LeafSystem<double>::MakeAllocCallback<drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
0000000000310958  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000000b0c10  w    F .text	0000000000000067              drake::systems::DiagramDiscreteValues<double>::~DiagramDiscreteValues()
00000000003110f0  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const
0000000000087620  w    F .text	0000000000000324              drake::systems::BasicVector<drake::symbolic::Expression>::NormInf() const
00000000000c72e0  w    F .text	00000000000001ca              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetWitnessFunctions(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, std::vector<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >*) const
0000000000096a00  w    F .text	00000000000001a5              fmt::internal::ArgMap<char>::init(fmt::ArgList const&)
0000000000000000       F *UND*	0000000000000000              __cxa_end_catch@@CXXABI_1.3
0000000000000000       F *UND*	0000000000000000              drake::systems::AbstractValues::get_mutable_value(int)
00000000000ca700  w    F .text	0000000000000345              drake::systems::DiagramContinuousState<double>::DiagramContinuousState(std::vector<drake::systems::ContinuousState<double>*, std::allocator<drake::systems::ContinuousState<double>*> >)
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@@GLIBCXX_3.4.21
00000000000a64e0  w    F .text	00000000000000d0              std::_Rb_tree_iterator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > std::_Rb_tree<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>&&, std::tuple<>&&)
0000000000310c30  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Context<double>& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
0000000000097f40  w    F .text	000000000000033e              void fmt::BasicWriter<char>::write_int<unsigned long long, fmt::FormatSpec>(unsigned long long, fmt::FormatSpec)
00000000000d5670  w    F .text	00000000000000cd              drake::systems::LeafSystem<double>::AddTriggeredWitnessFunctionToCompositeEventCollection(drake::systems::Event<double>*, drake::systems::CompositeEventCollection<double>*) const
00000000000f1d60  w    O .rodata	0000000000000024              typeinfo name for drake::systems::IntegratorBase<double>
000000000006ee78 g     F .init	0000000000000000              _init
00000000000ae870  w    F .text	0000000000000032              drake::systems::Value<drake::lcmt_iiwa_status>::~Value()
00000000000a1520  w    F .text	00000000000000f1              void std::vector<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::emplace_back<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&>(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&)
00000000000a7340  w    F .text	00000000000000d0              std::_Rb_tree_iterator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > std::_Rb_tree<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>&&, std::tuple<>&&)
00000000000729f0  w    F .text	0000000000000006              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetWitnessFunctions(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, std::vector<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >*) const
00000000003120c0  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::a_formatter
00000000000d7950  w    F .text	0000000000000046              drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::~IiwaContactResultsToExternalTorque()
00000000000afa90  w    F .text	0000000000000040              drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramContinuousState()
000000000007f850  w    F .text	000000000000018f              drake::systems::Diagram<drake::symbolic::Expression>::SetDefaultState(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const
0000000000313098  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::c_formatter
00000000000c6320  w    F .text	0000000000000314              drake::systems::Diagram<double>::DoGetPeriodicEvents() const
00000000000b1fd0  w    F .text	0000000000000144              void std::vector<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > > > >::emplace_back<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > > >(std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > >&&)
0000000000315878  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::Value<drake::systems::BasicVector<double> >
00000000000edf40  w    O .rodata	0000000000000088              typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > ()
0000000000312510  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::BasicVector<drake::symbolic::Expression>
000000000008c160  w    F .text	0000000000000055              spdlog::details::C_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000a2020  w    F .text	00000000000002da              std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateForcedEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >(std::function<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)>) const
00000000000f1a80  w    O .rodata	0000000000000059              typeinfo name for drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000a1920  w    F .text	00000000000000f1              void std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::emplace_back<drake::systems::System<double> const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&>(drake::systems::System<double> const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&)
0000000000094b20  w    F .text	0000000000000113              drake::systems::lcm::LcmSubscriberSystem* drake::systems::DiagramBuilder<double>::AddSystem<drake::systems::lcm::LcmSubscriberSystem>(std::unique_ptr<drake::systems::lcm::LcmSubscriberSystem, std::default_delete<drake::systems::lcm::LcmSubscriberSystem> >)
00000000003129e0  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}
00000000000c96e0  w    F .text	0000000000000345              drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiagramContinuousState(std::vector<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> >)
0000000000314f38  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::LeafCompositeEventCollection<double>
0000000000000000       F *UND*	0000000000000000              strcmp@@GLIBC_2.2.5
00000000000ef320  w    O .rodata	0000000000000075              typeinfo name for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)
00000000000c1640  w    F .text	00000000000000ae              drake::systems::internal::DiagramOutput<double>::DoClone() const
00000000000f4ae0  w    O .rodata	00000000000000a7              typeinfo name for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const
00000000000ec880  w    O .rodata	0000000000000073              typeinfo name for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
0000000000073c90  w    F .text	000000000000007b              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::~DiagramEventCollection()
000000000007d5e0  w    F .text	00000000000000fd              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::DoMerge(drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > const&)
0000000000000000       F *UND*	0000000000000000              __cxa_rethrow@@CXXABI_1.3
000000000007a070  w    F .text	000000000000001e              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::add_event(std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >)
0000000000311118  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int)
0000000000311ac0  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000e2d60  w    F .text	0000000000000022              std::_Sp_counted_ptr_inplace<RigidBodyFrame<double>, Eigen::aligned_allocator<RigidBodyFrame<double> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
00000000000741b0  w    F .text	0000000000000078              drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramState()
00000000000dec10  w    F .text	0000000000000014              drake::systems::LeafSystem<double>::DoGetPerStepEvents(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*) const
00000000000e1440  w    F .text	0000000000000468              drake::systems::SystemSymbolicInspector::~SystemSymbolicInspector()
00000000000df580  w    F .text	00000000000000a3              void std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> >::_M_emplace_back_aux<drake::systems::Event<double> const*>(drake::systems::Event<double> const*&&)
0000000000072040  w    F .text	0000000000000006              spdlog::details::S_formatter::~S_formatter()
0000000000072440  w    F .text	0000000000000006              drake::systems::Subvector<double>::~Subvector()
00000000000f1200  w    O .rodata	000000000000001c              typeinfo name for stx::bad_optional_access
00000000000c2ee0  w    F .text	0000000000000258              drake::systems::lcm::Serializer<drake::lcmt_iiwa_command>::Deserialize(void const*, int, drake::systems::AbstractValue*) const
00000000000c7050  w    F .text	0000000000000287              void std::vector<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >::_M_range_insert<__gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const**, std::vector<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > >(__gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const**, std::vector<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >, __gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const**, std::vector<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >, __gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const**, std::vector<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >, std::forward_iterator_tag)
00000000003115c0  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int)>
00000000000b4f60  w    F .text	00000000000001fb              drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Parameters()
00000000003125b8  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::InputPortDescriptor<double>
0000000000310c80  w    O .data.rel.ro	0000000000000010              typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > ()
000000000009b980  w    F .text	000000000000018a              spdlog::logger::_sink_it(spdlog::details::log_msg&)
000000000007b1f0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000ed920  w    O .rodata	00000000000000ad              typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > ()
00000000000bd850  w    F .text	0000000000000226              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::EvalConnectedSubsystemInputPort(drake::systems::ContextBase const&, drake::systems::InputPortBase const&) const
0000000000000000       F *UND*	0000000000000000              drake::systems::lcm::LcmSubscriberSystem::LcmSubscriberSystem(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<drake::systems::lcm::SerializerInterface, std::default_delete<drake::systems::lcm::SerializerInterface> >, drake::lcm::DrakeLcmInterface*)
00000000003110a0  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*) const
000000000007a0d0  w    F .text	0000000000000018              drake::systems::Value<int>::~Value()
000000000007d6e0  w    F .text	00000000000000fd              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::DoMerge(drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > const&)
0000000000316a00 u     O .bss	0000000000000008              guard variable for drake::NiceTypeName::Get<drake::systems::BasicVector<drake::symbolic::Expression> >()::canonical
0000000000073f30  w    F .text	000000000000002a              drake::systems::internal::DiagramOutput<drake::symbolic::Expression>::~DiagramOutput()
0000000000311e58  w    O .data.rel.ro	0000000000000078              vtable for drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000afb90  w    F .text	00000000000000b4              drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Subvector(drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, int, int)
0000000000310c70  w    O .data.rel.ro	0000000000000010              typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > ()
00000000000b93a0  w    F .text	00000000000002d1              drake::systems::DiagramContext<double>::MakeParameters()
0000000000071f60  w    F .text	0000000000000006              spdlog::details::ch_formatter::~ch_formatter()
0000000000310c60  w    O .data.rel.ro	0000000000000010              typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > ()
000000000009da20  w    F .text	000000000000005e              std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)>::function(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)
0000000000000000       F *UND*	0000000000000000              std::runtime_error::~runtime_error()@@GLIBCXX_3.4
0000000000074060  w    F .text	0000000000000078              drake::systems::DiagramState<double>::~DiagramState()
000000000008d5c0  w    F .text	000000000000014e              std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::operator=(std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > const&)
000000000007f310  w    F .text	0000000000000073              drake::systems::DiagramOutputPort<double>::DoEval(drake::systems::Context<double> const&) const
00000000000a3890  w    F .text	00000000000000a6              drake::systems::Diagram<drake::symbolic::Expression>::AllocateForcedUnrestrictedUpdateEventCollection() const
0000000000086a50  w    F .text	000000000000004e              std::__shared_count<(__gnu_cxx::_Lock_policy)2>::operator=(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&)
00000000000716f0  w    F .text	0000000000000010              drake::systems::System<double>::AllocateDiscreteVariables() const
00000000000b7c30  w    F .text	00000000000000d3              void std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> >::emplace_back<drake::systems::BasicVector<double>*>(drake::systems::BasicVector<double>*&&)
00000000000f0de0  w    O .rodata	0000000000000066              typeinfo name for std::_Simple_type_wrapper<drake::systems::ContinuousState<double> const& (drake::systems::DiagramContinuousState<double>::*)(int) const>
0000000000073720  w    F .text	0000000000000009              drake::systems::Subvector<drake::symbolic::Expression>::size() const
0000000000311460  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::CompositeEventCollection<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*) const
0000000000311500  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::Value<drake::systems::BasicVector<double> >
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)@@GLIBCXX_3.4.21
00000000000a2690  w    F .text	00000000000000a6              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateForcedUnrestrictedUpdateEventCollection() const
0000000000310dc0  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000c16f0  w    F .text	00000000000000ae              drake::systems::internal::DiagramOutput<drake::symbolic::Expression>::DoClone() const
00000000000a1620  w    F .text	00000000000000f1              void std::vector<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::emplace_back<drake::systems::System<drake::symbolic::Expression> const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&>(drake::systems::System<drake::symbolic::Expression> const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&)
0000000000080730  w    F .text	00000000000002df              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::Clear()
00000000000a62a0  w    F .text	000000000000008d              std::_Rb_tree_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<double> const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<double> const* const&>&&, std::tuple<>&&)
00000000000b0b10  w    F .text	0000000000000040              drake::systems::DiagramContinuousState<double>::~DiagramContinuousState()
0000000000072030  w    F .text	0000000000000006              spdlog::details::e_formatter::~e_formatter()
00000000000ca160  w    F .text	0000000000000272              drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoClone() const
0000000000082310  w    F .text	0000000000000324              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::HasEvents() const
0000000000314298  w    O .data.rel.ro	0000000000000038              vtable for std::_Sp_counted_ptr_inplace<spdlog::pattern_formatter, std::allocator<spdlog::pattern_formatter>, (__gnu_cxx::_Lock_policy)2>
0000000000073750  w    F .text	000000000000000d              drake::systems::DiagramContext<drake::symbolic::Expression>::get_parameters() const
0000000000310c20  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Context<double>* (drake::systems::System<double> const&, drake::systems::Context<double>*)
0000000000311590  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*) const>
00000000000a9230  w    F .text	0000000000000080              std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> > >::_M_get_insert_unique_pos(drake::systems::System<drake::symbolic::Expression> const* const&)
0000000000313d88  w    O .data.rel.ro	0000000000000038              vtable for drake::systems::OutputPort<double>
0000000000312050  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::pattern_formatter
000000000007a090  w    F .text	000000000000001e              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::add_event(std::unique_ptr<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >)
0000000000000000       O *UND*	0000000000000000              vtable for __cxxabiv1::__si_class_type_info@@CXXABI_1.3
00000000000717a0  w    F .text	0000000000000060              drake::systems::State<double>::~State()
00000000000f3a60  w    O .rodata	0000000000000059              typeinfo name for drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >
0000000000072ee0  w    F .text	000000000000002a              std::_Function_handler<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&)
00000000000f5da0  w    O .rodata	0000000000000032              typeinfo name for drake::systems::LeafCompositeEventCollection<double>
0000000000312f00  w    O .data.rel.ro	0000000000000028              vtable for fmt::internal::RuntimeError
00000000000720a0  w    F .text	0000000000000006              spdlog::details::Y_formatter::~Y_formatter()
0000000000310c10  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
0000000000074ac0  w    F .text	0000000000000018              fmt::internal::RuntimeError::~RuntimeError()
0000000000311620  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>
0000000000073e90  w    F .text	000000000000007b              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::~DiagramEventCollection()
00000000000d5560  w    F .text	000000000000000f              std::_Sp_counted_deleter<drake::systems::AbstractValue*, std::default_delete<drake::systems::AbstractValue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()
0000000000000000       F *UND*	0000000000000000              __cxa_free_exception@@CXXABI_1.3
0000000000086b50  w    F .text	000000000000007e              spdlog::async_logger::_set_formatter(std::shared_ptr<spdlog::formatter>)
00000000000f15f0  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::I_formatter
0000000000071900  w    F .text	0000000000000006              drake::systems::IntegratorBase<double>::DoResetStatistics()
000000000007d0e0  w    F .text	00000000000000fd              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::DoMerge(drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > const&)
00000000000937a0  w    F .text	000000000000006d              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::set_time(Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > const&)
0000000000310fb0  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*) const
00000000000b24a0  w    F .text	0000000000000047              drake::systems::DiscreteValues<drake::symbolic::Expression>::~DiscreteValues()
00000000000a3bf0  w    F .text	0000000000000171              void std::vector<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > > >::emplace_back<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > >(std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > >&&)
000000000007a050  w    F .text	000000000000001e              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::add_event(std::unique_ptr<drake::systems::PublishEvent<drake::symbolic::Expression>, std::default_delete<drake::systems::PublishEvent<drake::symbolic::Expression> > >)
00000000000b2120  w    F .text	0000000000000144              void std::vector<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > > > >::emplace_back<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > > >(std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > >&&)
000000000008aa20  w    F .text	0000000000000070              Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >* Eigen::internal::conditional_aligned_new_auto<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, true>(unsigned long)
0000000000000000       F *UND*	0000000000000000              drake::symbolic::max(drake::symbolic::Expression const&, drake::symbolic::Expression const&)
000000000009bdb0  w    F .text	0000000000000104              __gnu_cxx::__normal_iterator<std::pair<drake::systems::System<double> const*, int>*, std::vector<std::pair<drake::systems::System<double> const*, int>, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > std::__find_if<__gnu_cxx::__normal_iterator<std::pair<drake::systems::System<double> const*, int>*, std::vector<std::pair<drake::systems::System<double> const*, int>, std::allocator<std::pair<drake::systems::System<double> const*, int> > > >, __gnu_cxx::__ops::_Iter_equals_val<std::pair<drake::systems::System<double> const*, int> const> >(__gnu_cxx::__normal_iterator<std::pair<drake::systems::System<double> const*, int>*, std::vector<std::pair<drake::systems::System<double> const*, int>, std::allocator<std::pair<drake::systems::System<double> const*, int> > > >, __gnu_cxx::__normal_iterator<std::pair<drake::systems::System<double> const*, int>*, std::vector<std::pair<drake::systems::System<double> const*, int>, std::allocator<std::pair<drake::systems::System<double> const*, int> > > >, __gnu_cxx::__ops::_Iter_equals_val<std::pair<drake::systems::System<double> const*, int> const>, std::random_access_iterator_tag)
00000000003125e0  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::RungeKutta3Integrator<double>
00000000000cf9d0  w    F .text	0000000000000318              drake::systems::Supervector<drake::symbolic::Expression>::GetSubvectorAndOffset(int) const
000000000008fbb0  w    F .text	0000000000000089              drake::systems::Diagram<double>::~Diagram()
0000000000000000       F *UND*	0000000000000000              strftime@@GLIBC_2.2.5
00000000000b0cf0  w    F .text	00000000000000b4              drake::systems::Subvector<double>::Subvector(drake::systems::VectorBase<double>*, int, int)
00000000000731a0  w    F .text	000000000000002a              std::_Function_handler<drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*), drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&, drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*&&)
00000000000ed3a0  w    O .rodata	0000000000000036              typeinfo name for drake::systems::State<drake::symbolic::Expression>& (int)
00000000000bdc20  w    F .text	0000000000000183              drake::systems::lcm::Serializer<drake::lcmt_iiwa_status>::CreateDefaultValue() const
00000000000d4f10  w    F .text	0000000000000018              drake::systems::LeafCompositeEventCollection<double>::~LeafCompositeEventCollection()
00000000000f4160  w    O .rodata	00000000000000bc              typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const
000000000008c0e0  w    F .text	000000000000003c              spdlog::details::d_formatter::format(spdlog::details::log_msg&, tm const&)
000000000007ade0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::Context<double> const*), drake::systems::Context<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double> const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000312d80  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>
0000000000000000       F *UND*	0000000000000000              std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@@GLIBCXX_3.4
00000000000b3e60  w    F .text	0000000000000065              std::_Rb_tree<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::find(std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&) const
00000000000c2230  w    F .text	0000000000000153              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::lcmt_iiwa_status>()
00000000000832d0  w    F .text	000000000000012f              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramContext()
0000000000071b90  w    F .text	0000000000000037              std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}> const&, std::_Manager_operation)
00000000000848e0  w    F .text	000000000000005e              std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::function(std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&)
00000000003155a0  w    O .data.rel.ro	0000000000000218              vtable for drake::examples::kuka_iiwa_arm::IiwaCommandReceiver
0000000000314058  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::DiagramBuilder<double>
00000000003124c8  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::BasicVector<double>
00000000000aee90  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, std::default_delete<drake::systems::CompositeEventCollection<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, std::default_delete<drake::systems::CompositeEventCollection<drake::symbolic::Expression> > > > >::~vector()
0000000000310d18  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>
0000000000084960  w    F .text	000000000000001f              spdlog::logger::error_handler[abi:cxx11]()
00000000000b9250  w    F .text	0000000000000148              drake::systems::DiscreteValues<double>::DiscreteValues(std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> > const&)
00000000000dd080  w    F .text	000000000000061c              drake::systems::LeafSystem<double>::MaybeDeclareVectorBaseInequalityConstraint(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, drake::systems::VectorBase<double> const&, std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)> const&)
00000000003112d0  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000087b70  w    F .text	000000000000048a              drake::systems::VectorBase<drake::symbolic::Expression>::DoPlusEqScaled(std::initializer_list<std::pair<drake::symbolic::Expression, drake::systems::VectorBase<drake::symbolic::Expression> const&> > const&)
0000000000310d68  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::WitnessTriggeredEventData<drake::symbolic::Expression>
0000000000071e20  w    F .text	0000000000000006              drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramOutputPort()
0000000000313600  w    O .data.rel.ro	0000000000000070              vtable for drake::systems::Context<double>
0000000000316960 u     O .bss	0000000000000020              drake::NiceTypeName::Get<drake::systems::Diagram<drake::symbolic::Expression> >()::canonical[abi:cxx11]
00000000000aeff0  w    F .text	0000000000000040              drake::systems::DiagramContinuousState<drake::symbolic::Expression>::~DiagramContinuousState()
000000000007ce70  w    F .text	000000000000007a              spdlog::sinks::base_sink<std::mutex>::flush()
000000000007bd20  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000084940  w    F .text	000000000000001f              spdlog::async_logger::error_handler[abi:cxx11]()
0000000000073310  w    F .text	000000000000000a              drake::systems::DiagramContinuousState<drake::symbolic::Expression>::z_selector(drake::systems::ContinuousState<drake::symbolic::Expression>*)
0000000000312990  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > (drake::systems::System<double>::*)() const>
0000000000072200  w    F .text	0000000000000008              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::do_get_num_constraint_equations(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
0000000000000000       F *UND*	0000000000000000              malloc@@GLIBC_2.2.5
0000000000313340  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::T_formatter
00000000000ba360  w    F .text	000000000000014b              drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Allocate() const
0000000000073f20  w    F .text	000000000000000a              std::_Sp_counted_ptr_inplace<spdlog::pattern_formatter, std::allocator<spdlog::pattern_formatter>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
0000000000000000       F *UND*	0000000000000000              drake::systems::InputPortBase::InputPortBase(drake::TypeSafeIndex<drake::systems::InputPortTag>, drake::TypeSafeIndex<drake::systems::DependencyTag>, drake::systems::PortDataType, int, stx::optional<drake::RandomDistribution> const&, drake::systems::SystemBase*)
00000000000afa90  w    F .text	0000000000000040              drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramContinuousState()
000000000007b720  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramContinuousState<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::ContinuousState<drake::symbolic::Expression> const& (drake::systems::DiagramContinuousState<drake::symbolic::Expression>::*)(int) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000073c90  w    F .text	000000000000007b              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::~DiagramEventCollection()
00000000000f5de0  w    O .rodata	0000000000000020              typeinfo name for drake::systems::LeafSystem<double>
0000000000000000       F *UND*	0000000000000000              drake::systems::RigidBodyPlant<double>::get_num_model_instances() const
000000000009d950  w    F .text	00000000000000c9              std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}> const&, std::_Manager_operation)
0000000000073300  w    F .text	000000000000000a              drake::systems::DiagramContinuousState<drake::symbolic::Expression>::v_selector(drake::systems::ContinuousState<drake::symbolic::Expression>*)
00000000003168c0 u     O .bss	0000000000000008              guard variable for drake::NiceTypeName::Get<drake::systems::Context<drake::symbolic::Expression> >()::canonical
00000000000f1e40  w    O .rodata	000000000000003a              typeinfo name for drake::systems::lcm::Serializer<drake::lcmt_iiwa_command>
00000000000aef00  w    F .text	0000000000000032              drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::~DiagramCompositeEventCollection()
0000000000311908  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::Parameters<drake::symbolic::Expression>
00000000000d5ea0  w    F .text	000000000000006b              std::_Function_handler<void (drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*), drake::systems::LeafSystem<double>::MaybeDeclareVectorBaseInequalityConstraint(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, drake::systems::VectorBase<double> const&, std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)> const&)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}>::_M_invoke(std::_Any_data const&, drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*&&)
0000000000312488  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::System<drake::symbolic::Expression>
000000000007bfc0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*), drake::systems::CompositeEventCollection<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000b2350  w    F .text	00000000000000d3              void std::vector<drake::systems::AbstractValue*, std::allocator<drake::systems::AbstractValue*> >::emplace_back<drake::systems::AbstractValue*>(drake::systems::AbstractValue*&&)
00000000000747b0  w    F .text	000000000000000f              std::_Sp_counted_ptr_inplace<spdlog::sinks::stderr_sink<std::mutex>, std::allocator<spdlog::sinks::stderr_sink<std::mutex> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
000000000009bec0  w    F .text	000000000000021d              drake::systems::DiagramBuilder<double>::HasCycleRecurse(std::pair<drake::systems::System<double> const*, int> const&, std::map<std::pair<drake::systems::System<double> const*, int>, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > >, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > > > const&, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > >*, std::vector<std::pair<drake::systems::System<double> const*, int>, std::allocator<std::pair<drake::systems::System<double> const*, int> > >*)
00000000000de940  w    F .text	00000000000002aa              drake::systems::CompositeEventCollection<double>::SetFrom(drake::systems::CompositeEventCollection<double> const&)
0000000000000000       F *UND*	0000000000000000              drake::systems::Simulator<double>::PauseIfTooFast() const
000000000008a7d0  w    F .text	0000000000000089              Eigen::DenseStorage<double, -1, -1, 1, 0>::DenseStorage(Eigen::DenseStorage<double, -1, -1, 1, 0> const&)
0000000000312e60  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>
0000000000072e20  w    F .text	000000000000002a              std::_Function_handler<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*), drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*&&)
00000000000db9f0  w    F .text	0000000000000075              drake::systems::Value<drake::systems::BasicVector<double> >::Clone() const
0000000000310e48  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000084f60  w    F .text	000000000000003c              stx::optional<double>::operator=(stx::optional<double> const&)
00000000000ca3e0  w    F .text	0000000000000312              drake::systems::DiagramContinuousState<double>::Span(std::vector<drake::systems::ContinuousState<double>*, std::allocator<drake::systems::ContinuousState<double>*> > const&, std::function<drake::systems::VectorBase<double>& (drake::systems::ContinuousState<double>*)>)
00000000000d6110  w    F .text	00000000000000cb              drake::systems::DiscreteUpdateEvent<double>::DoClone() const
0000000000071b50  w    F .text	0000000000000037              std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}> const&, std::_Manager_operation)
000000000007e760  w    F .text	0000000000000124              drake::systems::System<double>::DoCalcConstraintErrorNorm(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&) const
00000000000dba70  w    F .text	0000000000000155              drake::systems::LeafSystem<double>::DispatchDiscreteVariableUpdateHandler(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > const&, drake::systems::DiscreteValues<double>*) const
0000000000071fd0  w    F .text	0000000000000006              spdlog::details::R_formatter::~R_formatter()
0000000000000000       F *UND*	0000000000000000              __libc_start_main@@GLIBC_2.2.5
00000000000d0da0  w    F .text	000000000000066c              drake::systems::DiagramContext<drake::symbolic::Expression>::DiagramContext(drake::systems::DiagramContext<drake::symbolic::Expression> const&)
000000000007b3d0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramContext<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<drake::symbolic::Expression> const& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000eec80  w    O .rodata	000000000000007f              typeinfo name for drake::systems::Context<drake::symbolic::Expression>& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@@GLIBCXX_3.4.21
00000000000d5190  w    F .text	0000000000000011              drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::HasEvents() const
000000000007abf0  w    F .text	0000000000000079              std::_Function_base::_Base_manager<drake::systems::Diagram<double>::Initialize(std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> >)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::Diagram<double>::Initialize(std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> >)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}> const&, std::_Manager_operation)
0000000000314e98  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::LeafSystem<double>::DeclareVectorOutputPort<drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque, drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&, void (drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::*)(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*) const)::{lambda(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)#1}
00000000000cfcf0  w    F .text	0000000000000018              drake::systems::Supervector<drake::symbolic::Expression>::GetAtIndex(int) const
00000000000e4360  w    F .text	000000000000002e              void std::vector<float, std::allocator<float> >::emplace_back<float>(float&&)
0000000000082d80  w    F .text	00000000000001fe              drake::systems::Diagram<double>::DoGetInitializationEvents(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*) const
0000000000072120  w    F .text	0000000000000006              spdlog::details::short_level_formatter::~short_level_formatter()
00000000000f1920  w    O .rodata	0000000000000027              typeinfo name for spdlog::sinks::stderr_sink<std::mutex>
000000000007a750  w    F .text	0000000000000018              drake::systems::InputPortDescriptor<double>::~InputPortDescriptor()
0000000000072480  w    F .text	0000000000000012              drake::systems::System<double>::DoGetMutableTargetSystemState(drake::systems::System<double> const&, drake::systems::State<double>*) const
00000000000f2000  w    O .rodata	000000000000003a              typeinfo name for drake::systems::EventCollection<drake::systems::PublishEvent<double> >
0000000000076d30  w    F .text	00000000000002b4              drake::systems::Diagram<drake::symbolic::Expression>::DoGetTargetSystemContinuousState(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*) const
00000000000ef5e0  w    O .rodata	000000000000008a              typeinfo name for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@@GLIBCXX_3.4.21
000000000009d5a0  w    F .text	000000000000013c              void drake::systems::SystemScalarConverter::Add<double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)
00000000000eca40  w    O .rodata	000000000000005c              typeinfo name for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (int)
00000000000a93a0  w    F .text	000000000000008d              std::_Rb_tree_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> > std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<drake::symbolic::Expression> const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<drake::symbolic::Expression> const* const&>&&, std::tuple<>&&)
00000000000f1060  w    O .rodata	0000000000000058              typeinfo name for drake::systems::VectorBase<drake::symbolic::Expression>& (*)(drake::systems::ContinuousState<drake::symbolic::Expression>*)
00000000000bbe10  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
00000000000753e0  w    F .text	0000000000000047              drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_mutable_substate(int)
000000000008b4d0  w    F .text	000000000000026f              fmt::BasicFormatter<char, fmt::ArgFormatter<char> >::parse_arg_index(char const*&)
00000000000ed600  w    O .rodata	000000000000002f              typeinfo name for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>
0000000000074ae0  w    F .text	0000000000000032              fmt::internal::RuntimeError::~RuntimeError()
0000000000099250  w    F .text	0000000000000313              fmt::ArgVisitor<fmt::ArgFormatter<char>, void>::visit(fmt::internal::Arg const&)
00000000000723c0  w    F .text	0000000000000008              drake::systems::PublishEvent<double>::is_discrete_update() const
00000000000867e0  w    F .text	0000000000000026              spdlog::details::v_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000072000  w    F .text	0000000000000006              spdlog::details::E_formatter::~E_formatter()
000000000007b960  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000cf3f0  w    F .text	00000000000001d1              Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > const Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >::operator*<Eigen::Matrix<double, -1, 1, 0, -1, 1> >(Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > const&) const
00000000000c1fb0  w    F .text	0000000000000031              std::vector<double, std::allocator<double> >::resize(unsigned long)
00000000000dc970 g     F .text	00000000000002ce              drake::examples::kuka_iiwa_arm::IiwaStatusSender::IiwaStatusSender(int)
00000000000723f0  w    F .text	0000000000000006              drake::systems::IntegratorBase<double>::DoReset()
00000000000f0380  w    O .rodata	0000000000000092              typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>
0000000000310aa8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::CompositeEventCollection<double> const& (int)
00000000003117d8  w    O .data.rel.ro	0000000000000020              typeinfo for drake::systems::VectorBase<double>& (*)(drake::systems::ContinuousState<double>*)
0000000000084850  w    F .text	0000000000000018              spdlog::details::ch_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000085250  w    F .text	0000000000000079              std::vector<drake::copyable_unique_ptr<drake::systems::FixedInputPortValue>, std::allocator<drake::copyable_unique_ptr<drake::systems::FixedInputPortValue> > >::~vector()
000000000009d0f0  w    F .text	00000000000001ad              drake::systems::System<drake::symbolic::Expression>::~System()
0000000000090220  w    F .text	0000000000000298              drake::systems::BasicVector<double>::set_value(Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)
0000000000072260  w    F .text	0000000000000047              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::HasEvents() const
0000000000316860 u     O .bss	0000000000000020              drake::NiceTypeName::Get<drake::lcmt_iiwa_status>()::canonical[abi:cxx11]
00000000000c74b0  w    F .text	0000000000000287              void std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> >::_M_range_insert<__gnu_cxx::__normal_iterator<drake::systems::Event<drake::symbolic::Expression> const* const*, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > > >(__gnu_cxx::__normal_iterator<drake::systems::Event<drake::symbolic::Expression> const**, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > >, __gnu_cxx::__normal_iterator<drake::systems::Event<drake::symbolic::Expression> const* const*, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > >, __gnu_cxx::__normal_iterator<drake::systems::Event<drake::symbolic::Expression> const* const*, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > >, std::forward_iterator_tag)
0000000000073440  w    F .text	000000000000000a              drake::systems::DiagramContinuousState<double>::x_selector(drake::systems::ContinuousState<double>*)
00000000000dcf40  w    F .text	0000000000000137              void std::vector<std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > >, std::allocator<std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > > > >::_M_emplace_back_aux<std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > > >(std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > >&&)
0000000000072100  w    F .text	0000000000000006              spdlog::details::A_formatter::~A_formatter()
00000000000d76a0  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::AbstractValue const, std::default_delete<drake::systems::AbstractValue const> >, std::allocator<std::unique_ptr<drake::systems::AbstractValue const, std::default_delete<drake::systems::AbstractValue const> > > >::~vector()
00000000000d5f10  w    F .text	00000000000000c0              drake::systems::LeafSystem<double>::DispatchPublishHandler(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::PublishEvent<double> > const&) const
0000000000310bf0  w    O .data.rel.ro	0000000000000010              typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > ()
0000000000312790  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >
00000000000defb0  w    F .text	0000000000000143              void std::vector<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > > >::emplace_back<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > >(std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >&&)
00000000000b0c80  w    F .text	000000000000006a              drake::systems::DiagramDiscreteValues<double>::~DiagramDiscreteValues()
00000000000ee3a0  w    O .rodata	0000000000000073              typeinfo name for drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000bd010  w    F .text	0000000000000722              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DispatchUnrestrictedUpdateHandler(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
000000000007a630  w    F .text	0000000000000018              drake::systems::lcm::Serializer<drake::lcmt_iiwa_status>::~Serializer()
0000000000312e80  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::Context<drake::symbolic::Expression> const& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>
00000000003116a0  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>
00000000000f2ce0  w    O .rodata	000000000000009d              typeinfo name for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}
0000000000311530  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*) const>
0000000000311a48  w    O .data.rel.ro	0000000000000028              vtable for drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000000000       F *UND*	0000000000000000              drake::symbolic::Expression::Expression(double)
00000000000f4ba0  w    O .rodata	0000000000000053              typeinfo name for drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*) const
00000000000720d0  w    F .text	0000000000000006              spdlog::details::c_formatter::~c_formatter()
00000000000c83a0  w    F .text	0000000000000312              drake::systems::DiagramContinuousState<drake::symbolic::Expression>::Span(std::vector<drake::systems::ContinuousState<drake::symbolic::Expression>*, std::allocator<drake::systems::ContinuousState<drake::symbolic::Expression>*> > const&, std::function<drake::systems::VectorBase<drake::symbolic::Expression>& (drake::systems::ContinuousState<drake::symbolic::Expression>*)>)
0000000000074500  w    F .text	000000000000000f              spdlog::details::Y_formatter::~Y_formatter()
0000000000096d20  w    F .text	0000000000000153              fmt::BasicFormatter<char, fmt::ArgFormatter<char> >::format(fmt::BasicCStringRef<char>)
00000000000d5130  w    F .text	0000000000000006              std::_Sp_counted_deleter<drake::systems::AbstractValue*, std::default_delete<drake::systems::AbstractValue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()
00000000000b7190  w    F .text	0000000000000648              drake::systems::DiagramCompositeEventCollection<double>::DiagramCompositeEventCollection(std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<double>, std::default_delete<drake::systems::CompositeEventCollection<double> > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<double>, std::default_delete<drake::systems::CompositeEventCollection<double> > > > >)
00000000000957d0  w    F .text	000000000000010f              std::_Hashtable<drake::systems::WitnessFunction<double> const*, std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, std::allocator<std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > > >, std::__detail::_Select1st, std::equal_to<drake::systems::WitnessFunction<double> const*>, std::hash<drake::systems::WitnessFunction<double> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)
0000000000074ca0  w    F .text	000000000000002a              std::_Function_handler<void* (void const*), drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, double>(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}>::_M_invoke(std::_Any_data const&, void const*&&)
00000000000eee80  w    O .rodata	000000000000005c              typeinfo name for drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*) const
0000000000000000       F *UND*	0000000000000000              __dynamic_cast@@CXXABI_1.3
00000000000db4d0  w    F .text	0000000000000026              drake::systems::LeafSystem<double>::AllocateForcedDiscreteUpdateEventCollection() const
00000000003115f0  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::Value<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
00000000000720b0  w    F .text	0000000000000006              spdlog::details::D_formatter::~D_formatter()
0000000000314bf0  w    O .data.rel.ro	0000000000000040              vtable for drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >
00000000000e37d0  w    F .text	0000000000000232              Eigen::Matrix<double, 3, 6, 0, 3, 6> const Eigen::VectorwiseOp<Eigen::Block<Eigen::Matrix<double, 6, 6, 0, 6, 6>, 3, 6, false>, 0>::cross<Eigen::Block<Eigen::Matrix<double, 4, 4, 0, 4, 4> const, 3, 1, true> >(Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, 4, 4, 0, 4, 4> const, 3, 1, true> > const&) const
0000000000312c28  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >
000000000008c6f0  w    F .text	00000000000000e4              char* fmt::BasicWriter<char>::prepare_int_buffer<fmt::IntFormatSpec<unsigned int, fmt::TypeSpec<(char)0>, char> >(unsigned int, fmt::IntFormatSpec<unsigned int, fmt::TypeSpec<(char)0>, char> const&, char const*, unsigned int)
00000000000dbf30  w    F .text	00000000000001a5              drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::MakeForcedEventCollection()
0000000000072b10  w    F .text	0000000000000012              drake::systems::internal::DiagramOutput<drake::symbolic::Expression>::get_num_ports() const
00000000000f1240  w    O .rodata	000000000000001e              typeinfo name for fmt::internal::RuntimeError
000000000008d860  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > > >::~vector()
00000000000db730  w    F .text	000000000000005a              drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::add_event(std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > >)
000000000008c290  w    F .text	000000000000024a              spdlog::details::c_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000e3640  w    F .text	000000000000004c              std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)
0000000000095730  w    F .text	0000000000000093              std::_MakeUniq<drake::systems::BasicVector<double> >::__single_object std::make_unique<drake::systems::BasicVector<double>, int>(int&&)
0000000000310918  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (int)
0000000000095f10  w    F .text	000000000000014b              char* fmt::BasicWriter<char>::write_str<char>(char const*, unsigned long, fmt::AlignSpec const&)
00000000000eeac0  w    O .rodata	000000000000002c              typeinfo name for drake::systems::internal::DiagramOutput<double>
00000000003120f0  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::b_formatter
00000000000c54a0  w    F .text	0000000000000201              drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiagramDiscreteValues(std::vector<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >)
00000000003127c8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::Simulator<double>::IsolateWitnessTriggers(std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*)::{lambda(double const&)#1}
000000000007b100  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000083570  w    F .text	0000000000000094              drake::systems::Diagram<drake::symbolic::Expression>::DoAllocateInputAbstract(drake::systems::InputPortDescriptor<drake::symbolic::Expression> const&) const
00000000000f0060  w    O .rodata	000000000000007f              typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const>
00000000000bbe10  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
0000000000073020  w    F .text	000000000000002a              std::_Function_handler<drake::systems::State<double>* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::State<double>*), drake::systems::State<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double>*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&, drake::systems::System<double> const&, drake::systems::State<double>*&&)
0000000000000000       F *UND*	0000000000000000              std::ios_base::Init::Init()@@GLIBCXX_3.4
0000000000075190  w    F .text	000000000000006e              drake::systems::DiagramContinuousState<double>::get_substate(int) const
00000000000c8c90  w    F .text	00000000000004a5              drake::systems::DiagramState<drake::symbolic::Expression>::Finalize()
0000000000081fe0  w    F .text	0000000000000324              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::HasEvents() const
00000000000747d0  w    F .text	000000000000000f              spdlog::sinks::stderr_sink<std::mutex>::~stderr_sink()
00000000000af030  w    F .text	000000000000004d              drake::systems::DiagramContinuousState<drake::symbolic::Expression>::~DiagramContinuousState()
00000000000a5ff0  w    F .text	0000000000000046              std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> > >::_M_insert_node(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >*)
00000000000eca20  w    O .rodata	000000000000001f              typeinfo name for __gnu_cxx::new_allocator<char>
0000000000079ff0  w    F .text	000000000000001e              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::add_event(std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > >)
00000000000f0e60  w    O .rodata	0000000000000064              typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*) const>
000000000007c8d0  w    F .text	0000000000000069              drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetAtIndex(int) const
000000000009dc90  w    F .text	000000000000005e              std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)>::function(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)
00000000000718a0  w    F .text	0000000000000012              drake::systems::System<double>::DoGetMutableTargetSystemContext(drake::systems::System<double> const&, drake::systems::Context<double>*) const
00000000000a6f90  w    F .text	0000000000000080              std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_get_insert_unique_pos(drake::systems::System<double> const* const&)
00000000000db3c0  w    F .text	000000000000010c              drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >::MakeForcedEventCollection()
0000000000310b48  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*)
000000000008a1e0  w    F .text	00000000000000a7              char* fmt::BasicWriter<char>::write_unsigned_decimal<unsigned int>(unsigned int, unsigned int)
0000000000313368  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::z_formatter
00000000000868a0  w    F .text	0000000000000030              spdlog::details::A_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000073200  w    F .text	0000000000000060              drake::systems::CompositeEventCollection<drake::symbolic::Expression>::~CompositeEventCollection()
0000000000074530  w    F .text	000000000000000f              spdlog::details::c_formatter::~c_formatter()
0000000000094aa0  w    F .text	0000000000000080              std::pair<std::__detail::_Node_iterator<drake::systems::System<double> const*, true, false>, bool> std::_Hashtable<drake::systems::System<double> const*, drake::systems::System<double> const*, std::allocator<drake::systems::System<double> const*>, std::__detail::_Identity, std::equal_to<drake::systems::System<double> const*>, std::hash<drake::systems::System<double> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert<drake::systems::System<double> const*, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<drake::systems::System<double> const*, false> > > >(drake::systems::System<double> const*&&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<drake::systems::System<double> const*, false> > > const&, std::integral_constant<bool, true>)
000000000009bbb0  w    F .text	000000000000010a              std::_Rb_tree<std::pair<drake::systems::System<double> const*, int>, std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > >, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > >, std::pair<drake::systems::System<double> const*, int> const&)
00000000000c36d0  w    F .text	000000000000013f              std::_MakeUniq<drake::systems::DiagramState<double> >::__single_object std::make_unique<drake::systems::DiagramState<double>, int&>(int&)
000000000007a0d0  w    F .text	0000000000000018              drake::systems::Value<int>::~Value()
00000000000af9a0  w    F .text	0000000000000032              drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramCompositeEventCollection()
00000000003124a0  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::System<double>
00000000000c4110  w    F .text	0000000000000231              drake::systems::Value<drake::systems::BasicVector<double> > const* drake::systems::AbstractValue::DownCastOrThrow<drake::systems::BasicVector<double> >() const
0000000000075430  w    F .text	0000000000000047              drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_substate(int) const
0000000000099e20  w    F .text	0000000000000042              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fmt::format<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(fmt::BasicCStringRef<char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000003128f8  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::Context<drake::symbolic::Expression>
00000000000dd9b0 g     F .text	00000000000003a0              drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::IiwaContactResultsToExternalTorque(RigidBodyTree<double> const&, std::vector<int, std::allocator<int> > const&)
000000000008bcd0  w    F .text	00000000000000b9              spdlog::details::i_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000f1370  w    O .rodata	000000000000001d              typeinfo name for spdlog::pattern_formatter
00000000000be0f0  w    F .text	0000000000000145              std::pair<std::_Rb_tree_iterator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, bool> std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::_Identity<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::_M_insert_unique<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&>(std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&)
00000000003123e8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::internal::SystemParentServiceInterface
00000000000d9cb0  w    F .text	0000000000000601              drake::systems::LeafSystem<double>::CreateVectorLeafOutputPort(int, std::function<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > ()>, std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>)
0000000000315928  w    O .data.rel.ro	0000000000000038              vtable for std::_Sp_counted_deleter<drake::systems::AbstractValue*, std::default_delete<drake::systems::AbstractValue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>
00000000000e08d0  w    F .text	00000000000006ba              drake::systems::LeafSystem<double>::DoMakeContext() const
00000000000836b0  w    F .text	00000000000002b3              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetInitializationEvents(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000723e0  w    F .text	000000000000000b              drake::systems::RungeKutta3Integrator<double>::get_error_estimate_order() const
00000000000f1550  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::D_formatter
00000000000be880  w    F .text	0000000000000870              drake::systems::Diagram<drake::symbolic::Expression>::DoHasDirectFeedthrough(int, int) const
00000000000d72b0  w    F .text	000000000000006b              Eigen::Matrix<double, -1, 1, 0, -1, 1>::Matrix<int>(int const&)
0000000000000000       F *UND*	0000000000000000              drake::lcm::DrakeLcm::~DrakeLcm()
0000000000000000       O *UND*	0000000000000000              vtable for drake::systems::OutputPortValue
00000000000c82b0  w    F .text	00000000000000e8              void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)
00000000000d8e40  w    F .text	0000000000000135              std::_Function_handler<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&), drake::systems::LeafSystem<double>::DeclareVectorOutputPort<drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque, drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&, void (drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::*)(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*) const)::{lambda(drake::systems::Context<double> const&)#2}>::_M_invoke(std::_Any_data const&, drake::systems::Context<double> const&)
00000000000a7d80  w    F .text	000000000000008d              std::_Rb_tree_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> > std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&>&&, std::tuple<>&&)
0000000000000000       F *UND*	0000000000000000              std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18
00000000000c6d30  w    F .text	0000000000000314              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetPeriodicEvents() const
000000000007a6b0  w    F .text	0000000000000032              drake::systems::InputPortDescriptor<drake::symbolic::Expression>::~InputPortDescriptor()
00000000000b3910  w    F .text	0000000000000148              drake::systems::DiscreteValues<drake::symbolic::Expression>::DiscreteValues(std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> > const&)
0000000000314138  w    O .data.rel.ro	0000000000000038              vtable for drake::systems::Event<double>
00000000000c38d0  w    F .text	0000000000000417              drake::systems::Diagram<double>::GetDirectFeedthroughs() const
000000000009a9e0  w    F .text	00000000000002c3              void spdlog::logger::log<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(spdlog::level::level_enum, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000316880 u     O .bss	0000000000000008              guard variable for drake::NiceTypeName::Get<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >()::canonical
00000000000ac580  w    F .text	0000000000000025              std::_Function_handler<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&), drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const&)
0000000000073450  w    F .text	000000000000000a              drake::systems::DiagramContinuousState<double>::q_selector(drake::systems::ContinuousState<double>*)
00000000000723d0  w    F .text	000000000000000b              drake::systems::RungeKutta3Integrator<double>::supports_error_estimation() const
0000000000072c30  w    F .text	0000000000000023              std::_Function_handler<drake::systems::State<drake::symbolic::Expression> const& (drake::systems::DiagramState<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<drake::symbolic::Expression> const& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramState<drake::symbolic::Expression> const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
00000000003130c0  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::C_formatter
0000000000313160  w    O .data.rel.ro	0000000000000028              vtable for spdlog::details::d_formatter
000000000008acb0  w    F .text	0000000000000144              void std::vector<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > >, std::allocator<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > > >::emplace_back<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > >(std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > >&&)
0000000000313568  w    O .data.rel.ro	0000000000000058              vtable for spdlog::async_logger
000000000007a520  w    F .text	000000000000002d              std::_Sp_counted_ptr_inplace<spdlog::sinks::stderr_sink<std::mutex>, std::allocator<spdlog::sinks::stderr_sink<std::mutex> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
00000000000afb20  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
0000000000073430  w    F .text	000000000000000a              drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::z_selector(drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
0000000000000000       F *UND*	0000000000000000              std::logic_error::~logic_error()@@GLIBCXX_3.4
00000000000b0300  w    F .text	0000000000000189              drake::systems::DiagramOutputPort<double>::DoCalc(drake::systems::Context<double> const&, drake::systems::AbstractValue*) const
000000000007a4f0  w    F .text	000000000000002d              std::_Sp_counted_ptr_inplace<spdlog::pattern_formatter, std::allocator<spdlog::pattern_formatter>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
00000000000904d0  w    F .text	00000000000000bd              void drake::systems::DiscreteValues<double>::SetFromGeneric<double>(drake::systems::DiscreteValues<double> const&)
0000000000073730  w    F .text	000000000000000d              drake::systems::DiagramContext<drake::symbolic::Expression>::get_state() const
0000000000071670  w    F .text	0000000000000067              drake::systems::PublishEvent<double>::~PublishEvent()
0000000000310b28  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*)
00000000000cbf60  w    F .text	000000000000018d              drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ContinuousState(std::unique_ptr<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >)
00000000000f06c0  w    O .rodata	0000000000000091              typeinfo name for std::_Simple_type_wrapper<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>
0000000000314d98  w    O .data.rel.ro	0000000000000018              typeinfo for drake::examples::kuka_iiwa_arm::IiwaCommandReceiver
0000000000081980  w    F .text	0000000000000324              drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::HasEvents() const
0000000000311410  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::ContinuousState<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*) const
00000000000a88b0  w    F .text	00000000000000ee              std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&)
00000000000d79a0  w    F .text	000000000000005e              std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>::function(std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)> const&)
00000000000b6250  w    F .text	0000000000000148              drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiscreteValues(std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> > const&)
00000000000a3940  w    F .text	000000000000004c              std::_Rb_tree<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_erase(std::_Rb_tree_node<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >*)
00000000000a1a20  w    F .text	000000000000004c              std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >*)
0000000000084fe0  w    F .text	0000000000000011              drake::systems::Context<double>::set_accuracy(stx::optional<double> const&)
00000000000e6400  w    F .text	0000000000000b29              Eigen::internal::product_selfadjoint_matrix<double, long, 0, false, false, 0, true, false, 0>::run(long, long, double const*, long, double const*, long, double*, long, double const&, Eigen::internal::level3_blocking<double, double>&)
00000000003135c0  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::Parameters<double>
000000000009f9b0  w    F .text	0000000000000151              Eigen::internal::redux_impl<Eigen::internal::scalar_max_op<double, double>, Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, Eigen::Matrix<double, -1, 1, 0, -1, 1> const, Eigen::Matrix<double, -1, 1, 0, -1, 1> const> const> >, 3, 0>::run(Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, Eigen::Matrix<double, -1, 1, 0, -1, 1> const, Eigen::Matrix<double, -1, 1, 0, -1, 1> const> const> > const&, Eigen::internal::scalar_max_op<double, double> const&)
00000000000d75e0  w    F .text	00000000000000be              std::_Function_base::_Base_manager<drake::systems::LeafSystem<double>::DeclareVectorOutputPort<drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque, drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&, void (drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::*)(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*) const)::{lambda(drake::systems::Context<double> const&)#2}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::LeafSystem<double>::DeclareVectorOutputPort<drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque, drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&, void (drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::*)(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*) const)::{lambda(drake::systems::Context<double> const&)#2}> const&, std::_Manager_operation)
000000000007c3c0  w    F .text	000000000000006b              drake::systems::System<double>::DoEvalConstraintEquations(drake::systems::Context<double> const&) const
00000000000e3030  w    F .text	00000000000000b7              KinematicsCache<double>::~KinematicsCache()
00000000000720e0  w    F .text	0000000000000006              spdlog::details::B_formatter::~B_formatter()
0000000000310ad8  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::VectorBase<double>& (drake::systems::ContinuousState<double>*)
00000000000a7230  w    F .text	000000000000010a              std::_Rb_tree<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&)
0000000000316bc0 u     O .bss	0000000000000020              drake::systems::internal::SystemMessageInterface::no_name[abi:cxx11]()::dummy
00000000000ef860  w    O .rodata	0000000000000036              typeinfo name for drake::systems::State<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double>*) const
0000000000072210  w    F .text	0000000000000006              std::_Sp_counted_ptr_inplace<spdlog::sinks::stderr_sink<std::mutex>, std::allocator<spdlog::sinks::stderr_sink<std::mutex> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
0000000000097220  w    F .text	0000000000000111              fmt::internal::report_unknown_type(char, char const*)
00000000000b59d0  w    F .text	0000000000000874              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetRandomParameters(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
0000000000311348  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const
0000000000074580  w    F .text	000000000000000f              spdlog::details::short_level_formatter::~short_level_formatter()
00000000000744a0  w    F .text	000000000000000f              spdlog::details::S_formatter::~S_formatter()
00000000000899c0  w    F .text	0000000000000146              std::_Function_handler<void (drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>*), drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Initialize(std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> >)::{lambda(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>*)#1}>::_M_invoke(std::_Any_data const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>*&&)
00000000003168e0 u     O .bss	0000000000000020              drake::NiceTypeName::Get<drake::systems::Context<drake::symbolic::Expression> >()::canonical[abi:cxx11]
00000000000f25a0  w    O .rodata	000000000000009f              typeinfo name for drake::systems::Diagram<double>::Initialize(std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> >)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}
00000000000b41f0  w    F .text	0000000000000648              drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiagramCompositeEventCollection(std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >)
00000000000eda80  w    O .rodata	0000000000000033              typeinfo name for drake::systems::Context<double>* (drake::systems::System<double> const&, drake::systems::Context<double>*)
00000000000735a0  w    F .text	0000000000000037              std::_Function_base::_Base_manager<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (*)(drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000c6aa0  w    F .text	0000000000000287              void std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >::_M_range_insert<__gnu_cxx::__normal_iterator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const*, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > >(__gnu_cxx::__normal_iterator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const**, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >, __gnu_cxx::__normal_iterator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const*, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >, __gnu_cxx::__normal_iterator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const*, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >, std::forward_iterator_tag)
00000000000c2a10  w    F .text	0000000000000231              drake::systems::Value<drake::lcmt_iiwa_command> const* drake::systems::AbstractValue::DownCastOrThrow<drake::lcmt_iiwa_command>() const
0000000000073740  w    F .text	000000000000000d              drake::systems::DiagramContext<drake::symbolic::Expression>::get_mutable_state()
00000000000f43a0  w    O .rodata	000000000000008f              typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const
00000000000958e0  w    F .text	00000000000000e5              std::_Hashtable<drake::systems::WitnessFunction<double> const*, std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, std::allocator<std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > > >, std::__detail::_Select1st, std::equal_to<drake::systems::WitnessFunction<double> const*>, std::hash<drake::systems::WitnessFunction<double> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, false>*)
00000000000a2c70  w    F .text	0000000000000220              drake::systems::Diagram<drake::symbolic::Expression>::NamesAreUniqueAndNonEmpty() const
00000000000891f0  w    F .text	00000000000001d5              spdlog::pattern_formatter::compile_pattern(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000d9ae0  w    F .text	0000000000000010              std::_Function_handler<void (drake::systems::Context<double> const&, drake::systems::AbstractValue*), drake::systems::LeafOutputPort<double>::set_calculation_function(std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>)::{lambda(drake::systems::Context<double> const&, drake::systems::AbstractValue*)#1}>::_M_invoke(std::_Any_data const&, drake::systems::Context<double> const&, drake::systems::AbstractValue*&&)
0000000000310cb0  w    O .data.rel.ro	0000000000000010              typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > ()
0000000000310e20  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
000000000008c010  w    F .text	000000000000003c              spdlog::details::M_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000b25b0  w    F .text	0000000000000067              drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>::~DiagramDiscreteValues()
00000000000f40a0  w    O .rodata	00000000000000b5              typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const
00000000000c8120  w    F .text	000000000000018d              drake::systems::ContinuousState<drake::symbolic::Expression>::ContinuousState(std::unique_ptr<drake::systems::VectorBase<drake::symbolic::Expression>, std::default_delete<drake::systems::VectorBase<drake::symbolic::Expression> > >)
000000000007a400  w    F .text	0000000000000088              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetGraphvizInputPortToken(drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000f17a0  w    O .rodata	0000000000000021              typeinfo name for spdlog::details::pid_formatter
00000000000ced30  w    F .text	0000000000000318              drake::systems::Supervector<double>::GetSubvectorAndOffset(int) const
0000000000071c40  w    F .text	0000000000000035              std::_Function_handler<drake::systems::Context<double> const& (drake::systems::DiagramContext<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<double> const& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramContext<double> const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
00000000003127b8  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::Context<double>& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>
000000000008bf40  w    F .text	0000000000000085              spdlog::details::e_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000000000       F *UND*	0000000000000000              drake::parsers::urdf::AddModelInstanceFromUrdfFileToWorld(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, drake::multibody::joints::FloatingBaseType, RigidBodyTree<double>*)
0000000000088480  w    F .text	00000000000003fe              spdlog::async_logger::~async_logger()
0000000000311050  w    O .data.rel.ro	0000000000000028              typeinfo for drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*) const
0000000000072460  w    F .text	000000000000000e              drake::systems::System<double>::SetRandomState(drake::systems::Context<double> const&, drake::systems::State<double>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
000000000007db00  w    F .text	0000000000000085              drake::systems::DiagramState<drake::symbolic::Expression>::~DiagramState()
000000000007b5a0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramState<drake::symbolic::Expression>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<drake::symbolic::Expression>& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000089f00  w    F .text	000000000000007e              drake::systems::RungeKutta3Integrator<double>::~RungeKutta3Integrator()
0000000000311540  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::Context<drake::symbolic::Expression>& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>
0000000000310e10  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000072cf0  w    F .text	0000000000000023              std::_Function_handler<drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int)>::_M_invoke(std::_Any_data const&, drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
00000000000852d0  w    F .text	0000000000000103              drake::systems::ContextBase::ContextBase()
00000000000a3500  w    F .text	00000000000000a6              drake::systems::Diagram<drake::symbolic::Expression>::AllocateForcedDiscreteUpdateEventCollection() const
000000000009fb10  w    F .text	000000000000061b              drake::systems::IntegratorBase<double>::CalcStateChangeNorm(drake::systems::ContinuousState<double> const&) const
0000000000075510  w    F .text	0000000000000047              drake::systems::DiagramCompositeEventCollection<double>::get_subevent_collection(int) const
00000000000ef7c0  w    O .rodata	000000000000009e              typeinfo name for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const
00000000003169a0 u     O .bss	0000000000000020              drake::NiceTypeName::Get<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >()::canonical[abi:cxx11]
0000000000314de0  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >
000000000009ccf0  w    F .text	0000000000000024              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~System()
00000000000716e0  w    F .text	0000000000000006              drake::systems::PeriodicEventData::~PeriodicEventData()
00000000000d7850  w    F .text	0000000000000018              drake::examples::kuka_iiwa_arm::IiwaStatusSender::~IiwaStatusSender()
00000000000bc710  w    F .text	0000000000000900              drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoClone() const
00000000000b13e0  w    F .text	0000000000000034              drake::systems::Value<int>::GetNiceTypeName() const
00000000000be720  w    F .text	00000000000000b6              std::_Rb_tree<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::_Identity<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::less<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::equal_range(std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&)
0000000000000000       F *UND*	0000000000000000              getpid@@GLIBC_2.2.5
0000000000071fa0  w    F .text	0000000000000006              spdlog::details::t_formatter::~t_formatter()
0000000000087ac0  w    F .text	00000000000000a3              spdlog::logger::~logger()
0000000000000000       O *UND*	0000000000000000              typeinfo for drake::systems::InputPortBase
0000000000316748 g     O .data	0000000000000008              fLD::FLAGS_simulation_sec
000000000007a6f0  w    F .text	0000000000000018              drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~InputPortDescriptor()
000000000007e270  w    F .text	00000000000001df              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcTimeDerivatives(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000a3f10  w    F .text	000000000000004c              std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >*)
00000000000eeb00  w    O .rodata	000000000000002c              typeinfo name for drake::systems::DiagramContinuousState<double>
00000000000b9d90  w    F .text	000000000000001f              drake::systems::DiagramOutputPort<drake::symbolic::Expression>::DoAllocate() const
00000000000b63a0  w    F .text	00000000000002f3              drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::MakeParameters()
0000000000071fb0  w    F .text	0000000000000006              spdlog::details::z_formatter::~z_formatter()
0000000000071f80  w    F .text	0000000000000006              spdlog::details::i_formatter::~i_formatter()
0000000000073b90  w    F .text	000000000000007b              drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::~DiagramEventCollection()
0000000000313dc0  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::CompositeEventCollection<double>
00000000000e2c40  w    F .text	0000000000000006              std::_Sp_counted_ptr_inplace<RigidBodyFrame<double>, Eigen::aligned_allocator<RigidBodyFrame<double> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
00000000000eeee0  w    O .rodata	0000000000000066              typeinfo name for drake::systems::ContinuousState<drake::symbolic::Expression> const& (drake::systems::DiagramContinuousState<drake::symbolic::Expression>::*)(int) const
0000000000096170  w    F .text	00000000000000e5              std::_Hashtable<int, std::pair<int const, drake::systems::controllers::StateFeedbackControllerInterface<double>*>, std::allocator<std::pair<int const, drake::systems::controllers::StateFeedbackControllerInterface<double>*> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, drake::systems::controllers::StateFeedbackControllerInterface<double>*>, false>*)
00000000000774b0  w    F .text	00000000000002b4              drake::systems::Diagram<drake::symbolic::Expression>::DoGetTargetSystemCompositeEventCollection(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*) const
0000000000085250  w    F .text	0000000000000079              std::vector<drake::copyable_unique_ptr<drake::systems::FixedInputPortValue>, std::allocator<drake::copyable_unique_ptr<drake::systems::FixedInputPortValue> > >::~vector()
0000000000080cf0  w    F .text	00000000000002df              drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::Clear()
0000000000072530  w    F .text	000000000000006b              drake::systems::BasicVector<double>::DoPlusEqScaled(std::initializer_list<std::pair<double, drake::systems::VectorBase<double> const&> > const&)
0000000000098280  w    F .text	000000000000025f              void fmt::BasicWriter<char>::write_int<bool, fmt::FormatSpec>(bool, fmt::FormatSpec)
00000000000df200  w    F .text	0000000000000143              void std::vector<std::unique_ptr<drake::systems::OutputPortValue, std::default_delete<drake::systems::OutputPortValue> >, std::allocator<std::unique_ptr<drake::systems::OutputPortValue, std::default_delete<drake::systems::OutputPortValue> > > >::emplace_back<std::unique_ptr<drake::systems::OutputPortValue, std::default_delete<drake::systems::OutputPortValue> > >(std::unique_ptr<drake::systems::OutputPortValue, std::default_delete<drake::systems::OutputPortValue> >&&)
00000000000cc390  w    F .text	0000000000000287              std::_MakeUniq<drake::systems::DiagramState<drake::symbolic::Expression> >::__single_object std::make_unique<drake::systems::DiagramState<drake::symbolic::Expression>, int&>(int&)
0000000000312e90  w    O .data.rel.ro	0000000000000028              vtable for stx::bad_optional_access
0000000000000000       F *UND*	0000000000000000              drake::systems::SystemBase::GetSystemPathname[abi:cxx11]() const
00000000000b4b40  w    F .text	0000000000000144              void std::vector<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::emplace_back<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > >(std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >&&)
00000000000dbbd0  w    F .text	00000000000002fc              drake::systems::LeafSystem<double>::SetDefaultState(drake::systems::Context<double> const&, drake::systems::State<double>*) const
000000000007c780  w    F .text	0000000000000069              drake::systems::Subvector<double>::GetAtIndex(int)
000000000008aa90  w    F .text	000000000000004c              std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::_Identity<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >*)
000000000007a630  w    F .text	0000000000000018              drake::systems::lcm::Serializer<drake::lcmt_iiwa_status>::~Serializer()
00000000003124e0  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::ContinuousState<drake::symbolic::Expression>
00000000000f4660  w    O .rodata	00000000000000d6              typeinfo name for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>
00000000000ede20  w    O .rodata	000000000000003c              typeinfo name for drake::systems::DiscreteValues<drake::symbolic::Expression>
00000000000de2d0  w    F .text	000000000000019f              drake::systems::LeafSystem<double>::DoValidateAllocatedContext(drake::systems::ContextBase const&) const
0000000000000000       F *UND*	0000000000000000              std::terminate()@@GLIBCXX_3.4
00000000003126a0  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::WitnessTriggeredEventData<double>
0000000000077cf0  w    F .text	00000000000002b4              drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetTargetSystemState(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
00000000003118e8  w    O .data.rel.ro	0000000000000020              vtable for drake::systems::DiagramState<drake::symbolic::Expression>
0000000000071f40  w    F .text	0000000000000006              spdlog::sinks::stderr_sink<std::mutex>::~stderr_sink()
00000000000dd6a0  w    F .text	000000000000030e              drake::systems::OutputPort<double> const& drake::systems::LeafSystem<double>::DeclareVectorOutputPort<drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque, drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&, void (drake::examples::kuka_iiwa_arm::IiwaContactResultsToExternalTorque::*)(drake::systems::Context<double> const&, drake::systems::BasicVector<double>*) const)
00000000000f60a0  w    O .rodata	0000000000000029              typeinfo name for drake::systems::DiscreteUpdateEvent<double>
00000000000baa40  w    F .text	0000000000000198              void drake::systems::DiscreteValues<drake::symbolic::Expression>::SetFromGeneric<drake::symbolic::Expression>(drake::systems::DiscreteValues<drake::symbolic::Expression> const&)
0000000000312b80  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000312ac0  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::Context<double> const& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>
0000000000071800  w    F .text	000000000000007b              drake::systems::ContinuousState<double>::~ContinuousState()
00000000000f1730  w    O .rodata	000000000000001f              typeinfo name for spdlog::details::T_formatter
00000000000b0a20  w    F .text	0000000000000032              drake::systems::DiagramCompositeEventCollection<double>::~DiagramCompositeEventCollection()
000000000007a490  w    F .text	0000000000000018              stx::bad_optional_access::~bad_optional_access()
00000000000c3520  w    F .text	00000000000001ac              drake::systems::State<double>::State()
00000000003158b8  w    O .data.rel.ro	0000000000000038              vtable for drake::systems::DiscreteUpdateEvent<double>
0000000000072450  w    F .text	0000000000000008              drake::systems::System<double>::do_get_num_constraint_equations(drake::systems::Context<double> const&) const
00000000000aaab0  w    F .text	00000000000000ee              std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> >, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&)
0000000000073400  w    F .text	000000000000000a              drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::x_selector(drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
00000000000969a0  w    F .text	0000000000000056              void std::vector<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg>, std::allocator<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg> > >::emplace_back<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg> >(std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg>&&)
00000000000b24f0  w    F .text	0000000000000045              drake::systems::DiscreteValues<drake::symbolic::Expression>::~DiscreteValues()
00000000000ecf60  w    O .rodata	000000000000001f              typeinfo name for drake::systems::State<double> const& (int)
000000000007c0e0  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::DiagramCompositeEventCollection<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<double> const& (drake::systems::DiagramCompositeEventCollection<double>::*)(int) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000cfd30  w    F .text	0000000000000c4f              drake::systems::ContextBase::ContextBase(drake::systems::ContextBase const&)
000000000007bb40  w    F .text	000000000000005c              std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
000000000007a5d0  w    F .text	0000000000000018              drake::systems::lcm::Serializer<drake::lcmt_iiwa_command>::~Serializer()
0000000000000000       O *UND*	0000000000000000              vtable for drake::systems::ContextBase
0000000000311640  w    O .data.rel.ro	0000000000000010              typeinfo for std::_Simple_type_wrapper<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>
00000000000bf810  w    F .text	0000000000000621              drake::systems::Diagram<drake::symbolic::Expression>::DispatchUnrestrictedUpdateHandler(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > const&, drake::systems::State<drake::symbolic::Expression>*) const
0000000000312180  w    O .data.rel.ro	0000000000000018              typeinfo for spdlog::details::m_formatter
000000000008f720  w    F .text	00000000000000a6              drake::systems::Diagram<double>::AllocateForcedDiscreteUpdateEventCollection() const
000000000008d860  w    F .text	0000000000000063              std::vector<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > > >::~vector()
00000000000db660  w    F .text	00000000000000cb              void std::vector<drake::systems::UnrestrictedUpdateEvent<double> const*, std::allocator<drake::systems::UnrestrictedUpdateEvent<double> const*> >::emplace_back<drake::systems::UnrestrictedUpdateEvent<double> const*>(drake::systems::UnrestrictedUpdateEvent<double> const*&&)
00000000000d9af0  w    F .text	00000000000001b9              void std::vector<std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > >, std::allocator<std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > > > >::emplace_back<std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > > >(std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > >&&)
00000000003128e0  w    O .data.rel.ro	0000000000000018              typeinfo for Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >
0000000000072070  w    F .text	0000000000000006              spdlog::details::H_formatter::~H_formatter()
000000000009f920  w    F .text	0000000000000089              std::vector<std::unique_ptr<drake::systems::SystemConstraint<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemConstraint<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::SystemConstraint<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemConstraint<drake::symbolic::Expression> > > > >::~vector()
0000000000072940  w    F .text	0000000000000012              drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetTargetSystemState(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
00000000000ec820  w    O .rodata	000000000000004b              typeinfo name for drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (int)
0000000000314df8  w    O .data.rel.ro	0000000000000018              typeinfo for drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >
0000000000315978  w    O .data.rel.ro	0000000000000038              vtable for std::_Sp_counted_ptr_inplace<RigidBodyFrame<double>, Eigen::aligned_allocator<RigidBodyFrame<double> >, (__gnu_cxx::_Lock_policy)2>
000000000008f000  w    F .text	00000000000000a1              std::_Hashtable<drake::systems::SystemScalarConverter::Key, std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> >, std::allocator<std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> > >, std::__detail::_Select1st, std::equal_to<drake::systems::SystemScalarConverter::Key>, drake::systems::SystemScalarConverter::KeyHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Hashtable(std::_Hashtable<drake::systems::SystemScalarConverter::Key, std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> >, std::allocator<std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> > >, std::__detail::_Select1st, std::equal_to<drake::systems::SystemScalarConverter::Key>, drake::systems::SystemScalarConverter::KeyHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >&&)
00000000000caa50  w    F .text	000000000000027a              drake::systems::Diagram<double>::AllocateTimeDerivatives() const
00000000000f1420  w    O .rodata	0000000000000023              typeinfo name for spdlog::details::level_formatter
000000000007ca90  w    F .text	0000000000000061              drake::systems::BasicVector<drake::symbolic::Expression>::GetAtIndex(int) const
0000000000311ba0  w    O .data.rel.ro	0000000000000078              vtable for drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000311f78  w    O .data.rel.ro	0000000000000018              typeinfo for fmt::FormatError
00000000000e4270  w    F .text	00000000000000f0              void std::vector<float, std::allocator<float> >::_M_emplace_back_aux<float>(float&&)
00000000000d4fb0  w    F .text	0000000000000067              drake::systems::DiscreteUpdateEvent<double>::~DiscreteUpdateEvent()
0000000000000000  w    F *UND*	0000000000000000              sched_yield@@GLIBC_2.2.5
00000000000725a0  w    F .text	0000000000000046              drake::systems::VectorBase<double>::SetZero()
00000000000738c0  w    F .text	0000000000000032              fmt::internal::MemoryBuffer<char, 500ul, std::allocator<char> >::~MemoryBuffer()
00000000003129c0  w    O .data.rel.ro	0000000000000010              typeinfo for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}
00000000000f22c0  w    O .rodata	0000000000000048              typeinfo name for drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >
0000000000000000       O *UND*	0000000000000000              typeinfo for std::logic_error@@GLIBCXX_3.4


DYNAMIC SYMBOL TABLE:
000000000006ee78 l    d  .init	0000000000000000              .init
0000000000310830 l    d  .tbss	0000000000000000              .tbss
0000000000317b08 l    D  .bss	0000000000000000  Base        _end
0000000000316768 l    D  .bss	0000000000000000  Base        __bss_start
0000000000316768 l    D  .data	0000000000000000  Base        _edata
0000000000000000      DF *UND*	0000000000000000              drake::symbolic::abs(drake::symbolic::Expression const&)
0000000000000000      DF *UND*	0000000000000000  CXXABI_1.3.9 operator delete[](void*, unsigned long)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::logic_error::logic_error(char const*)
0000000000000000      DF *UND*	0000000000000000              drake::systems::AbstractValues::size() const
0000000000000000      DF *UND*	0000000000000000              drake::systems::SystemBase::ThrowInputPortHasWrongType(char const*, drake::TypeSafeIndex<drake::systems::InputPortTag>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)
0000000000000000      DF *UND*	0000000000000000  CXXABI_1.3  __cxa_begin_catch
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 realloc
0000000000000000      DF *UND*	0000000000000000  CXXABI_1.3.9 operator delete(void*, unsigned long)
0000000000000000      DF *UND*	0000000000000000              drake::systems::AbstractValues::CopyFrom(drake::systems::AbstractValues const&)
0000000000000000      DF *UND*	0000000000000000              drake::systems::SystemBase::MakeContext() const
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 memmove
0000000000000000      DF *UND*	0000000000000000              drake::systems::ContextBase::~ContextBase()
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 localtime_r
0000000000000000      DF *UND*	0000000000000000              drake::systems::RigidBodyPlant<double>::get_rigid_body_tree() const
0000000000000000      DO *UND*	0000000000000000  CXXABI_1.3  vtable for __cxxabiv1::__pointer_type_info
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 syscall
0000000000000000      DF *UND*	0000000000000000              drake::systems::AbstractValues::AbstractValues(std::vector<drake::systems::AbstractValue*, std::allocator<drake::systems::AbstractValue*> > const&)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000000000      DF *UND*	0000000000000000              drake::systems::SystemScalarConverter::SystemScalarConverter()
0000000000000000      DO *UND*	0000000000000000  GLIBCXX_3.4 typeinfo for std::exception
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::runtime_error::runtime_error(char const*)
0000000000000000      DF *UND*	0000000000000000              drake::multibody::AddFlatTerrainToWorld(RigidBodyTree<double>*, double, double)
0000000000000000      DF *UND*	0000000000000000              drake::systems::SystemImpl::GetMemoryObjectName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, long)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.4   __stack_chk_fail
0000000000000000      DF *UND*	0000000000000000              drake::systems::detail::ModelValues::CloneModel(int) const
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 memset
0000000000000000      DF *UND*	0000000000000000              drake::systems::InputPortBase::~InputPortBase()
0000000000000000      DO *UND*	0000000000000000  GLIBCXX_3.4 typeinfo for std::out_of_range
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.11 std::thread::join()
0000000000000000      DF *UND*	0000000000000000              drake::symbolic::operator+(drake::symbolic::Expression, drake::symbolic::Expression const&)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::__throw_bad_cast()
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 strlen
0000000000000000      DF *UND*	0000000000000000              drake::systems::SystemScalarConverter::Insert(std::type_info const&, std::type_info const&, std::function<void* (void const*)> const&)
0000000000000000      DO *UND*	0000000000000000  CXXABI_1.3  vtable for __cxxabiv1::__class_type_info
0000000000000000      DO *UND*	0000000000000000  GLIBCXX_3.4 vtable for std::bad_alloc
0000000000000000      DF *UND*	0000000000000000  CXXABI_1.3  __cxa_guard_abort
0000000000000000      DF *UND*	0000000000000000              drake::systems::OutputPortValue::Clone() const
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.11 std::__throw_system_error(int)
0000000000000000      DF *UND*	0000000000000000              drake::detail::AssertionFailed(char const*, char const*, char const*, int)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::runtime_error::~runtime_error()
0000000000000000      DO *UND*	0000000000000000  CXXABI_1.3  vtable for __cxxabiv1::__function_type_info
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 sqrt
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 fflush
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.11 std::ctype<char>::_M_widen_init() const
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 operator delete(void*)
0000000000000000      DO *UND*	0000000000000000  CXXABI_1.3  typeinfo for int
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)
0000000000000000      DF *UND*	0000000000000000              google::ParseCommandLineFlags(int*, char***, bool)
0000000000000000      DF *UND*	0000000000000000              google::FlagRegisterer::FlagRegisterer(char const*, char const*, char const*, char const*, void*, void*)
0000000000000000      DO *UND*	0000000000000000  GLIBC_2.2.5 stderr
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 isprint
0000000000000000      DF *UND*	0000000000000000              RigidBodyTree<double>::FindBody(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) const
0000000000000000      DF *UND*	0000000000000000              drake::systems::SystemBase::ThrowInputPortIndexOutOfRange(char const*, drake::TypeSafeIndex<drake::systems::InputPortTag>, int) const
0000000000000000      DF *UND*	0000000000000000  CXXABI_1.3  __cxa_throw
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::_Ios_Openmode)
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 pow
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::__throw_length_error(char const*)
0000000000000000      DF *UND*	0000000000000000  GCC_3.0     _Unwind_Resume
0000000000000000      DF *UND*	0000000000000000              RigidBodyTree<double>::RigidBodyTree()
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 vsnprintf
0000000000000000      DO *UND*	0000000000000000              RigidBodyTreeConstants::kFirstNonWorldModelInstanceId
0000000000000000      DF *UND*	0000000000000000              drake::systems::SystemBase::EvalAbstractInputImpl(char const*, drake::systems::ContextBase const&, drake::TypeSafeIndex<drake::systems::InputPortTag>) const
0000000000000000      DF *UND*	0000000000000000              drake::systems::RungeKutta3Integrator<double>::DoInitialize()
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)
0000000000000000      DF *UND*	0000000000000000              drake::systems::RungeKutta3Integrator<double>::DoStep(double const&)
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 gmtime_r
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.9 std::basic_ostream<char, std::char_traits<char> >& std::basic_ostream<char, std::char_traits<char> >::_M_insert<double>(double)
0000000000000000      DO *UND*	0000000000000000              typeinfo for drake::systems::SystemBase
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::out_of_range::~out_of_range()
0000000000000000      DO *UND*	0000000000000000  CXXABI_1.3  vtable for __cxxabiv1::__pointer_to_member_type_info
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::logic_error::logic_error(char const*)
0000000000000000      DF *UND*	0000000000000000              drake::systems::SystemBase::ThrowNegativeInputPortIndex(char const*, int) const
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 __cxa_atexit
0000000000000000      DF *UND*	0000000000000000              drake::systems::AbstractValue::~AbstractValue()
0000000000000000      DF *UND*	0000000000000000              drake::systems::detail::ModelValues::size() const
0000000000000000      DF *UND*	0000000000000000              drake::manipulation::util::SimDiagramBuilder<double>::AddVisualizer(drake::lcm::DrakeLcmInterface*)
0000000000000000      DF *UND*	0000000000000000  CXXABI_1.3  __cxa_pure_virtual
0000000000000000      DO *UND*	0000000000000000              typeinfo for drake::systems::ContextBase
0000000000000000  w   DF *UND*	0000000000000000  GLIBC_2.2.5 __pthread_key_create
0000000000000000      DF *UND*	0000000000000000              drake::systems::SystemSymbolicInspector::SystemSymbolicInspector(drake::systems::System<drake::symbolic::Expression> const&)
0000000000000000      DF *UND*	0000000000000000              drake::systems::SystemScalarConverter::Find(std::type_info const&, std::type_info const&) const
0000000000000000      DO *UND*	0000000000000000  GLIBCXX_3.4 typeinfo for std::runtime_error
0000000000000000      DO *UND*	0000000000000000              typeinfo for drake::systems::lcm::SerializerInterface
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::_Rb_tree_increment(std::_Rb_tree_node_base const*)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::logic_error::what() const
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::runtime_error::runtime_error(char const*)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.9 std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)
0000000000000000      DF *UND*	0000000000000000              drake::manipulation::util::SimDiagramBuilder<double>::ConnectControllersAndVisualizer()
0000000000000000  w   D  *UND*	0000000000000000              _ITM_registerTMCloneTable
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 ceil
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 nanosleep
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 memcmp
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::_Rb_tree_increment(std::_Rb_tree_node_base*)
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 fwrite
0000000000000000      DF *UND*	0000000000000000              RigidBody<double>::get_model_instance_id() const
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.14 std::__throw_bad_function_call()
0000000000000000      DF *UND*	0000000000000000              drake::manipulation::util::SimDiagramBuilder<double>::AddPlant(std::unique_ptr<RigidBodyTree<double>, std::default_delete<RigidBodyTree<double> > >)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)
0000000000000000      DF *UND*	0000000000000000              drake::systems::Simulator<double>::ResetStatistics()
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000000000      DF *UND*	0000000000000000              drake::systems::lcm::LcmPublisherSystem::set_publish_period(double)
0000000000000000      DF *UND*	0000000000000000              drake::systems::DrakeVisualizer::set_publish_period(double)
0000000000000000      DF *UND*	0000000000000000              drake::systems::ContextBase::GetSystemPathname[abi:cxx11]() const
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::__throw_logic_error(char const*)
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 localeconv
0000000000000000      DF *UND*	0000000000000000              drake::systems::controllers::InverseDynamicsController<double>::InverseDynamicsController(std::unique_ptr<RigidBodyTree<double>, std::default_delete<RigidBodyTree<double> > >, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, bool)
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.14  memcpy
0000000000000000      DF *UND*	0000000000000000              drake::NiceTypeName::Canonicalize(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::bad_alloc::~bad_alloc()
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::__throw_bad_alloc()
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 operator new(unsigned long)
0000000000000000  w   D  *UND*	0000000000000000              _ITM_deregisterTMCloneTable
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 free
0000000000000000      DF *UND*	0000000000000000              drake::systems::SystemSymbolicInspector::IsConnectedInputToOutput(int, int) const
0000000000000000      DF *UND*	0000000000000000              drake::log()
0000000000000000  w   DF *UND*	0000000000000000  GLIBC_2.2.5 __cxa_finalize
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const
0000000000000000      DF *UND*	0000000000000000              drake::systems::lcm::SerializerInterface::~SerializerInterface()
0000000000000000      DO *UND*	0000000000000000  CXXABI_1.3  typeinfo for double
0000000000000000      DF *UND*	0000000000000000              drake::FindResourceOrThrow(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
0000000000000000      DO *UND*	0000000000000000  CXXABI_1.3  vtable for __cxxabiv1::__vmi_class_type_info
0000000000000000  w   DF *UND*	0000000000000000  GLIBC_2.2.5 pthread_mutex_unlock
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::out_of_range::out_of_range(char const*)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::runtime_error::what() const
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::basic_ostream<char, std::char_traits<char> >::operator<<(int)
0000000000000000  w   DF *UND*	0000000000000000  GLIBC_2.2.5 pthread_mutex_lock
0000000000000000      DF *UND*	0000000000000000  CXXABI_1.3  __cxa_guard_acquire
0000000000000000      DF *UND*	0000000000000000              RigidBodyTree<double>::Clone() const
0000000000000000      DF *UND*	0000000000000000              drake::systems::AbstractValues::AbstractValues()
0000000000000000      DF *UND*	0000000000000000  CXXABI_1.3  __cxa_bad_cast
0000000000000000  w   D  *UND*	0000000000000000              __gmon_start__
0000000000000000      DO *UND*	0000000000000000              typeinfo for drake::systems::AbstractValue
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.9 std::basic_ostream<char, std::char_traits<char> >& std::basic_ostream<char, std::char_traits<char> >::_M_insert<long>(long)
0000000000000000      DF *UND*	0000000000000000  CXXABI_1.3  __cxa_allocate_exception
0000000000000000      DF *UND*	0000000000000000              drake::symbolic::operator+=(drake::symbolic::Expression&, drake::symbolic::Expression const&)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::basic_ostream<char, std::char_traits<char> >::flush()
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.3   __tls_get_addr
0000000000000000      DF *UND*	0000000000000000              drake::symbolic::Expression::NaN()
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 snprintf
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()
0000000000000000      DO *UND*	0000000000000000  GLIBCXX_3.4 typeinfo for std::bad_alloc
0000000000000000      DF *UND*	0000000000000000              drake::lcm::DrakeLcm::DrakeLcm()
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::basic_ostream<char, std::char_traits<char> >::put(char)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::_Rb_tree_decrement(std::_Rb_tree_node_base*)
0000000000000000      DF *UND*	0000000000000000  CXXABI_1.3  __cxa_guard_release
0000000000000000      DF *UND*	0000000000000000              drake::lcm::DrakeLcm::StartReceiveThread()
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
0000000000000000      DF *UND*	0000000000000000              drake::systems::SystemBase::ThrowNotAVectorInputPort(char const*, drake::TypeSafeIndex<drake::systems::InputPortTag>) const
0000000000000000      DF *UND*	0000000000000000              drake::NiceTypeName::Demangle[abi:cxx11](char const*)
0000000000000000      DF *UND*	0000000000000000  CXXABI_1.3  __gxx_personality_v0
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::logic_error::~logic_error()
0000000000000000  w   D  *UND*	0000000000000000              _Jv_RegisterClasses
0000000000000000      DF *UND*	0000000000000000              drake::systems::lcm::LcmPublisherSystem::LcmPublisherSystem(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<drake::systems::lcm::SerializerInterface, std::default_delete<drake::systems::lcm::SerializerInterface> >, drake::lcm::DrakeLcmInterface*)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::ios_base::Init::~Init()
0000000000000000      DF *UND*	0000000000000000              drake::detail::Abort(char const*, char const*, char const*, int)
0000000000000000      DF *UND*	0000000000000000              drake::systems::ContextBase::CreateBuiltInTrackers()
0000000000000000      DF *UND*	0000000000000000              drake::systems::SystemBase::~SystemBase()
0000000000000000      DF *UND*	0000000000000000              drake::symbolic::Expression::Zero()
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 time
0000000000000000      DF *UND*	0000000000000000              RigidBodyFrame<double>::RigidBodyFrame(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, RigidBody<double>*, Eigen::Transform<double, 3, 1, 0> const&)
0000000000000000      DF *UND*	0000000000000000              drake::systems::SystemScalarConverter::RemoveUnlessAlsoSupportedBy(drake::systems::SystemScalarConverter const&)
0000000000000000      DF *UND*	0000000000000000              drake::symbolic::operator*(drake::symbolic::Expression, drake::symbolic::Expression const&)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.19 std::chrono::_V2::system_clock::now()
0000000000000000      DF *UND*	0000000000000000              drake::detail::Throw(char const*, char const*, char const*, int)
0000000000000000      DF *UND*	0000000000000000              drake::systems::FrameVisualizer::FrameVisualizer(RigidBodyTree<double> const*, std::vector<RigidBodyFrame<double>, std::allocator<RigidBodyFrame<double> > > const&, drake::lcm::DrakeLcmInterface*)
0000000000000000      DF *UND*	0000000000000000              drake::systems::AbstractValues::AbstractValues(std::vector<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> >, std::allocator<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > > >&&)
0000000000000000      DF *UND*	0000000000000000              drake::systems::RigidBodyPlant<double>::model_instance_torque_output_port(int) const
0000000000000000      DF *UND*	0000000000000000              drake::systems::AbstractValues::Clone() const
0000000000000000      DF *UND*	0000000000000000  CXXABI_1.3  __cxa_end_catch
0000000000000000      DF *UND*	0000000000000000              drake::systems::AbstractValues::get_mutable_value(int)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 strcmp
0000000000000000      DF *UND*	0000000000000000  CXXABI_1.3  __cxa_rethrow
0000000000000000      DF *UND*	0000000000000000              drake::systems::lcm::LcmSubscriberSystem::LcmSubscriberSystem(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<drake::systems::lcm::SerializerInterface, std::default_delete<drake::systems::lcm::SerializerInterface> >, drake::lcm::DrakeLcmInterface*)
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::runtime_error::~runtime_error()
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)
0000000000000000      DO *UND*	0000000000000000  CXXABI_1.3  vtable for __cxxabiv1::__si_class_type_info
0000000000000000      DF *UND*	0000000000000000  CXXABI_1.3  __cxa_free_exception
0000000000000000      DF *UND*	0000000000000000              drake::symbolic::max(drake::symbolic::Expression const&, drake::symbolic::Expression const&)
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 strftime
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 malloc
0000000000000000      DF *UND*	0000000000000000              drake::systems::InputPortBase::InputPortBase(drake::TypeSafeIndex<drake::systems::InputPortTag>, drake::TypeSafeIndex<drake::systems::DependencyTag>, drake::systems::PortDataType, int, stx::optional<drake::RandomDistribution> const&, drake::systems::SystemBase*)
0000000000000000      DF *UND*	0000000000000000              drake::systems::RigidBodyPlant<double>::get_num_model_instances() const
0000000000000000      DF *UND*	0000000000000000              drake::systems::Simulator<double>::PauseIfTooFast() const
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 __libc_start_main
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.21 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const
0000000000000000      DF *UND*	0000000000000000              drake::symbolic::Expression::Expression(double)
0000000000000000      DF *UND*	0000000000000000  CXXABI_1.3  __dynamic_cast
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::ios_base::Init::Init()
0000000000000000      DF *UND*	0000000000000000              drake::lcm::DrakeLcm::~DrakeLcm()
0000000000000000      DO *UND*	0000000000000000              vtable for drake::systems::OutputPortValue
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4.18 std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::logic_error::~logic_error()
0000000000000000      DF *UND*	0000000000000000              drake::parsers::urdf::AddModelInstanceFromUrdfFileToWorld(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, drake::multibody::joints::FloatingBaseType, RigidBodyTree<double>*)
0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 getpid
0000000000000000      DO *UND*	0000000000000000              typeinfo for drake::systems::InputPortBase
0000000000000000      DF *UND*	0000000000000000              drake::systems::SystemBase::GetSystemPathname[abi:cxx11]() const
0000000000000000      DF *UND*	0000000000000000  GLIBCXX_3.4 std::terminate()
0000000000000000      DO *UND*	0000000000000000              vtable for drake::systems::ContextBase
0000000000000000  w   DF *UND*	0000000000000000  GLIBC_2.2.5 sched_yield
0000000000000000      DO *UND*	0000000000000000  GLIBCXX_3.4 typeinfo for std::logic_error
00000000000f4660  w   DO .rodata	00000000000000d6  Base        typeinfo name for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>
0000000000314758  w   DO .data.rel.ro	0000000000000070  Base        vtable for drake::systems::DiagramContext<drake::symbolic::Expression>
00000000000e3690  w   DF .text	0000000000000139  Base        bool isRegularInertiaMatrix<Eigen::Matrix<double, 6, 6, 0, 6, 6> >(Eigen::MatrixBase<Eigen::Matrix<double, 6, 6, 0, 6, 6> > const&)
00000000000d6410  w   DF .text	00000000000000c7  Base        drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >::~LeafEventCollection()
0000000000072040  w   DF .text	0000000000000006  Base        spdlog::details::S_formatter::~S_formatter()
000000000007ade0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::Context<double> const*), drake::systems::Context<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double> const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000f4220  w   DO .rodata	00000000000000c0  Base        typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const
0000000000085060  w   DF .text	000000000000005d  Base        drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::set_accuracy(stx::optional<double> const&)
00000000003168a0 u    DO .bss	0000000000000020  Base        drake::NiceTypeName::Get<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >()::canonical[abi:cxx11]
0000000000314218  w   DO .data.rel.ro	0000000000000028  Base        vtable for drake::systems::ContinuousState<double>
000000000007d2e0  w   DF .text	00000000000000fd  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::DoMerge(drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > const&)
0000000000074570  w   DF .text	000000000000000f  Base        spdlog::details::a_formatter::~a_formatter()
0000000000313480  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::full_formatter
0000000000081980  w   DF .text	0000000000000324  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::HasEvents() const
00000000000f1c40  w   DO .rodata	000000000000002e  Base        typeinfo name for drake::systems::CompositeEventCollection<double>
0000000000310bf0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > ()
00000000000b0c10  w   DF .text	0000000000000067  Base        drake::systems::DiagramDiscreteValues<double>::~DiagramDiscreteValues()
00000000000e4800  w   DF .text	00000000000000ee  Base        std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<int>, int const&)
00000000000722b0  w   DF .text	000000000000002f  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::Clear()
00000000000a1420  w   DF .text	00000000000000f1  Base        void std::vector<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::emplace_back<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&>(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&)
00000000003129e0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}
00000000000c5be0  w   DF .text	0000000000000201  Base        drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>::DiagramDiscreteValues(std::vector<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > > > >)
0000000000314a98  w   DO .data.rel.ro	0000000000000040  Base        vtable for drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000072150  w   DF .text	0000000000000006  Base        drake::systems::Subvector<drake::symbolic::Expression>::~Subvector()
0000000000311ae0  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000c0a30  w   DF .text	000000000000054f  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetDirectFeedthroughs() const
0000000000072880  w   DF .text	0000000000000006  Base        drake::systems::System<drake::symbolic::Expression>::GetGraphvizOutputPortToken(drake::systems::OutputPort<drake::symbolic::Expression> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
0000000000073830  w   DF .text	000000000000000d  Base        drake::systems::DiagramContext<double>::get_parameters() const
00000000003158f0  w   DO .data.rel.ro	0000000000000038  Base        vtable for drake::systems::UnrestrictedUpdateEvent<double>
0000000000090bb0  w   DF .text	000000000000008b  Base        drake::systems::Simulator<double>::HandleUnrestrictedUpdate(drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > const&)
0000000000313390  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::t_formatter
00000000000f2320  w   DO .rodata	000000000000004c  Base        typeinfo name for drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >
000000000007b250  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
000000000008ebb0  w   DF .text	000000000000010a  Base        std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&)
0000000000087b70  w   DF .text	000000000000048a  Base        drake::systems::VectorBase<drake::symbolic::Expression>::DoPlusEqScaled(std::initializer_list<std::pair<drake::symbolic::Expression, drake::systems::VectorBase<drake::symbolic::Expression> const&> > const&)
0000000000075120  w   DF .text	000000000000006e  Base        drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_substate(int) const
00000000000dbed0  w   DF .text	000000000000005e  Base        std::function<void (drake::systems::Context<double> const&, drake::systems::UnrestrictedUpdateEvent<double> const&, drake::systems::State<double>*)>::function(std::function<void (drake::systems::Context<double> const&, drake::systems::UnrestrictedUpdateEvent<double> const&, drake::systems::State<double>*)> const&)
0000000000073a90  w   DF .text	000000000000007b  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::~DiagramEventCollection()
00000000000b2120  w   DF .text	0000000000000144  Base        void std::vector<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > > > >::emplace_back<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > > >(std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > >&&)
00000000000b3a60  w   DF .text	00000000000002f3  Base        drake::systems::DiagramContext<drake::symbolic::Expression>::MakeParameters()
00000000000a7340  w   DF .text	00000000000000d0  Base        std::_Rb_tree_iterator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > std::_Rb_tree<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>&&, std::tuple<>&&)
00000000000f1a80  w   DO .rodata	0000000000000059  Base        typeinfo name for drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000aeff0  w   DF .text	0000000000000040  Base        drake::systems::DiagramContinuousState<drake::symbolic::Expression>::~DiagramContinuousState()
00000000000aef80  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > > > >::~vector()
000000000008f000  w   DF .text	00000000000000a1  Base        std::_Hashtable<drake::systems::SystemScalarConverter::Key, std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> >, std::allocator<std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> > >, std::__detail::_Select1st, std::equal_to<drake::systems::SystemScalarConverter::Key>, drake::systems::SystemScalarConverter::KeyHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Hashtable(std::_Hashtable<drake::systems::SystemScalarConverter::Key, std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> >, std::allocator<std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> > >, std::__detail::_Select1st, std::equal_to<drake::systems::SystemScalarConverter::Key>, drake::systems::SystemScalarConverter::KeyHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >&&)
000000000007b460  w   DF .text	000000000000001e  Base        drake::systems::SystemBase::GetSystemType[abi:cxx11]() const
00000000000a61b0  w   DF .text	00000000000000ee  Base        std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, drake::systems::System<double> const* const&)
0000000000311168  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int) const
00000000000bc710  w   DF .text	0000000000000900  Base        drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoClone() const
00000000000951e0  w   DF .text	0000000000000145  Base        std::pair<std::_Rb_tree_iterator<std::pair<drake::systems::System<double> const*, int> >, bool> std::_Rb_tree<std::pair<drake::systems::System<double> const*, int>, std::pair<drake::systems::System<double> const*, int>, std::_Identity<std::pair<drake::systems::System<double> const*, int> >, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > >::_M_insert_unique<std::pair<drake::systems::System<double> const*, int> const&>(std::pair<drake::systems::System<double> const*, int> const&)
00000000000f06c0  w   DO .rodata	0000000000000091  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>
000000000007afc0  w   DF .text	0000000000000079  Base        std::_Function_base::_Base_manager<drake::systems::Diagram<drake::symbolic::Expression>::Initialize(std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> >)::{lambda(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::Diagram<drake::symbolic::Expression>::Initialize(std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> >)::{lambda(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>*)#1}> const&, std::_Manager_operation)
00000000000af150  w   DF .text	00000000000000b4  Base        drake::systems::Subvector<drake::symbolic::Expression>::Subvector(drake::systems::VectorBase<drake::symbolic::Expression>*, int, int)
0000000000089f00  w   DF .text	000000000000007e  Base        drake::systems::RungeKutta3Integrator<double>::~RungeKutta3Integrator()
0000000000312b98  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000072fa0  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&)
00000000000ac920  w   DF .text	00000000000000ee  Base        std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> >, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, drake::systems::System<drake::symbolic::Expression> const* const&)
000000000007db00  w   DF .text	0000000000000085  Base        drake::systems::DiagramState<drake::symbolic::Expression>::~DiagramState()
0000000000071e00  w   DF .text	0000000000000012  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetTargetSystemContext(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
00000000000ded80  w   DF .text	000000000000012f  Base        drake::systems::LeafContext<double>::~LeafContext()
00000000000d5670  w   DF .text	00000000000000cd  Base        drake::systems::LeafSystem<double>::AddTriggeredWitnessFunctionToCompositeEventCollection(drake::systems::Event<double>*, drake::systems::CompositeEventCollection<double>*) const
0000000000093230  w   DF .text	00000000000003f5  Base        drake::systems::System<drake::symbolic::Expression>::DoCheckValidContext(drake::systems::ContextBase const&) const
0000000000312bb0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
00000000000db3c0  w   DF .text	000000000000010c  Base        drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >::MakeForcedEventCollection()
00000000000a39e0  w   DF .text	0000000000000109  Base        std::vector<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > > >::~vector()
0000000000073fc0  w   DF .text	0000000000000047  Base        drake::systems::Supervector<drake::symbolic::Expression>::~Supervector()
0000000000311560  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::State<drake::symbolic::Expression>& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int)>
0000000000072c90  w   DF .text	0000000000000023  Base        std::_Function_handler<drake::systems::ContinuousState<drake::symbolic::Expression> const& (drake::systems::DiagramContinuousState<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::ContinuousState<drake::symbolic::Expression> const& (drake::systems::DiagramContinuousState<drake::symbolic::Expression>::*)(int) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramContinuousState<drake::symbolic::Expression> const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
00000000000740e0  w   DF .text	0000000000000047  Base        drake::systems::Supervector<double>::~Supervector()
00000000000b24a0  w   DF .text	0000000000000047  Base        drake::systems::DiscreteValues<drake::symbolic::Expression>::~DiscreteValues()
0000000000316580 u    DO .data	00000000000000c9  Base        fmt::internal::BasicData<void>::DIGITS
000000000009da80  w   DF .text	000000000000013c  Base        void drake::systems::SystemScalarConverter::Add<double, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)
00000000000ee760  w   DO .rodata	0000000000000060  Base        typeinfo name for drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000072030  w   DF .text	0000000000000006  Base        spdlog::details::e_formatter::~e_formatter()
0000000000072780  w   DF .text	000000000000000e  Base        drake::systems::System<drake::symbolic::Expression>::SetRandomState(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
00000000000c4530  w   DF .text	0000000000000153  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >()
00000000000f0fe0  w   DO .rodata	0000000000000078  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<double> const& (drake::systems::DiagramCompositeEventCollection<double>::*)(int) const>
00000000000f2d80  w   DO .rodata	00000000000000c5  Base        typeinfo name for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}
00000000000d0980  w   DF .text	0000000000000125  Base        std::vector<double, std::allocator<double> >::operator=(std::vector<double, std::allocator<double> > const&)
00000000000937a0  w   DF .text	000000000000006d  Base        drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::set_time(Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > const&)
0000000000316aa0 u    DO .bss	0000000000000020  Base        drake::NiceTypeName::Get<drake::systems::ContextBase>()::canonical[abi:cxx11]
0000000000072200  w   DF .text	0000000000000008  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::do_get_num_constraint_equations(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
00000000000b96e0  w   DF .text	0000000000000231  Base        drake::systems::Value<int> const* drake::systems::AbstractValue::DownCastOrThrow<int>() const
00000000000f1880  w   DO .rodata	0000000000000022  Base        typeinfo name for spdlog::details::full_formatter
0000000000086c60  w   DF .text	0000000000000294  Base        drake::systems::VectorBase<drake::symbolic::Expression>::NormInf() const
0000000000097bd0  w   DF .text	000000000000036e  Base        void fmt::BasicWriter<char>::write_int<long long, fmt::FormatSpec>(long long, fmt::FormatSpec)
0000000000085450  w   DF .text	0000000000000388  Base        drake::systems::System<double>::get_output_port(int) const
000000000007ed10  w   DF .text	00000000000002b3  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoGetPerStepEvents(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const
0000000000072010  w   DF .text	0000000000000006  Base        spdlog::details::F_formatter::~F_formatter()
000000000008c530  w   DF .text	000000000000006c  Base        spdlog::details::r_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000f0420  w   DO .rodata	00000000000000c0  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>
00000000000732e0  w   DF .text	000000000000000a  Base        drake::systems::DiagramContinuousState<drake::symbolic::Expression>::x_selector(drake::systems::ContinuousState<drake::symbolic::Expression>*)
00000000000ecc00  w   DO .rodata	0000000000000068  Base        typeinfo name for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (int)
000000000009adf0  w   DF .text	00000000000002ea  Base        void spdlog::logger::log<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(spdlog::level::level_enum, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000b93a0  w   DF .text	00000000000002d1  Base        drake::systems::DiagramContext<double>::MakeParameters()
00000000000723c0  w   DF .text	0000000000000008  Base        drake::systems::PublishEvent<double>::is_discrete_update() const
00000000000c4110  w   DF .text	0000000000000231  Base        drake::systems::Value<drake::systems::BasicVector<double> > const* drake::systems::AbstractValue::DownCastOrThrow<drake::systems::BasicVector<double> >() const
00000000000d4f00  w   DF .text	0000000000000008  Base        std::ctype<char>::do_widen(char) const
00000000000f12a0  w   DO .rodata	0000000000000011  Base        typeinfo name for fmt::Buffer<char>
00000000000738c0  w   DF .text	0000000000000032  Base        fmt::internal::MemoryBuffer<char, 500ul, std::allocator<char> >::~MemoryBuffer()
00000000000e0730  w   DF .text	000000000000019d  Base        drake::systems::Parameters<double>::Parameters(std::vector<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > > >&&, std::vector<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> >, std::allocator<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > > >&&)
000000000007f310  w   DF .text	0000000000000073  Base        drake::systems::DiagramOutputPort<double>::DoEval(drake::systems::Context<double> const&) const
00000000000d7150  w   DF .text	000000000000015e  Base        drake::systems::LeafSystem<double>::AllocateAbstractState() const
0000000000085120  w   DF .text	0000000000000089  Base        std::vector<drake::copyable_unique_ptr<drake::systems::CacheEntryValue>, std::allocator<drake::copyable_unique_ptr<drake::systems::CacheEntryValue> > >::~vector()
0000000000074580  w   DF .text	000000000000000f  Base        spdlog::details::short_level_formatter::~short_level_formatter()
00000000000ade60  w   DF .text	000000000000039d  Base        drake::systems::Diagram<drake::symbolic::Expression>::Diagram(std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> >)
00000000000f2820  w   DO .rodata	0000000000000062  Base        typeinfo name for drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
000000000007c4a0  w   DF .text	0000000000000061  Base        drake::systems::BasicVector<double>::GetAtIndex(int) const
0000000000072d90  w   DF .text	0000000000000012  Base        drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_num_ports() const
0000000000311fd0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for fmt::Buffer<char>
0000000000310e80  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000953f0  w   DF .text	00000000000002c6  Base        std::_Rb_tree_node<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >* std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_copy<std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_Reuse_or_alloc_node>(std::_Rb_tree_node<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > const*, std::_Rb_tree_node<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >*, std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_Reuse_or_alloc_node&)
0000000000312790  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >
00000000000f1750  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::z_formatter
0000000000071f90  w   DF .text	0000000000000006  Base        spdlog::details::pid_formatter::~pid_formatter()
00000000000a7100  w   DF .text	000000000000008d  Base        std::_Rb_tree_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> > std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<double> const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<double> const* const&>&&, std::tuple<>&&)
00000000000d8510  w   DF .text	000000000000005e  Base        std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)>::function(std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)> const&)
00000000000f1670  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::f_formatter
00000000000b9980  w   DF .text	0000000000000099  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > drake::NiceTypeName::Get<drake::systems::internal::SystemMessageInterface>(drake::systems::internal::SystemMessageInterface const&)
000000000007a590  w   DF .text	000000000000001f  Base        drake::systems::System<drake::symbolic::Expression>::DoCalcKineticEnergy(drake::systems::Context<drake::symbolic::Expression> const&) const
00000000000f1710  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::R_formatter
00000000000e4390  w   DF .text	0000000000000158  Base        std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000081320  w   DF .text	0000000000000324  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::HasEvents() const
000000000008cdd0  w   DF .text	0000000000000450  Base        drake::systems::BasicVector<drake::symbolic::Expression>::ScaleAndAddToVector(drake::symbolic::Expression const&, Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>, 0, Eigen::InnerStride<1> >) const
0000000000086ae0  w   DF .text	0000000000000065  Base        drake::systems::DiagramContext<drake::symbolic::Expression>::set_time(drake::symbolic::Expression const&)
0000000000314b58  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::InputPortDescriptor<drake::symbolic::Expression>
0000000000310e98  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::WitnessTriggeredEventData<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000074eb0  w   DF .text	000000000000006e  Base        drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetSubsystemContext(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const
000000000008ecc0  w   DF .text	00000000000000d0  Base        std::_Rb_tree_iterator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>&&, std::tuple<>&&)
00000000000cdf30  w   DF .text	0000000000000d10  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoMakeContext() const
00000000000d7ba0  w   DF .text	0000000000000131  Base        drake::systems::BasicVector<double> const* drake::systems::System<double>::EvalVectorInput<drake::systems::BasicVector>(drake::systems::Context<double> const&, int) const
0000000000079ce0  w   DF .text	0000000000000088  Base        drake::systems::VectorBase<double>::SetFromVector(Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)
00000000000bba50  w   DF .text	0000000000000104  Base        __gnu_cxx::__normal_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > > std::__find_if<__gnu_cxx::__normal_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > >, __gnu_cxx::__ops::_Iter_equals_val<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const> >(__gnu_cxx::__normal_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > >, __gnu_cxx::__normal_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > >, __gnu_cxx::__ops::_Iter_equals_val<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const>, std::random_access_iterator_tag)
00000000000ee480  w   DO .rodata	000000000000006a  Base        typeinfo name for drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000afa90  w   DF .text	0000000000000040  Base        drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramContinuousState()
0000000000096580  w   DF .text	00000000000000e3  Base        std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000ed794  w   DO .rodata	0000000000000006  Base        typeinfo name for std::allocator<char>
0000000000314388  w   DO .data.rel.ro	0000000000000040  Base        vtable for drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >
0000000000084760  w   DF .text	000000000000008a  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)
00000000000b1fd0  w   DF .text	0000000000000144  Base        void std::vector<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > > > >::emplace_back<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > > >(std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > >&&)
00000000000c4350  w   DF .text	00000000000001d6  Base        drake::systems::System<double>::DoCheckValidContext(drake::systems::ContextBase const&) const
00000000000ed540  w   DO .rodata	000000000000005f  Base        typeinfo name for drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*)
000000000008fab0  w   DF .text	00000000000000a6  Base        drake::systems::Diagram<double>::AllocateForcedUnrestrictedUpdateEventCollection() const
000000000008d420  w   DF .text	0000000000000024  Base        drake::systems::System<double>::~System()
00000000000f3260  w   DO .rodata	00000000000000a6  Base        typeinfo name for drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, double>(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}
00000000000abff0  w   DF .text	00000000000002c8  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Diagram(std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> >)
00000000000af9a0  w   DF .text	0000000000000032  Base        drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramCompositeEventCollection()
000000000007b540  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*), drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000f0a40  w   DO .rodata	00000000000000a5  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>
00000000000e2c40  w   DF .text	0000000000000006  Base        std::_Sp_counted_ptr_inplace<RigidBodyFrame<double>, Eigen::aligned_allocator<RigidBodyFrame<double> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
0000000000311438  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::ContinuousState<double> const& (drake::systems::DiagramContinuousState<double>::*)(int) const
0000000000082f80  w   DF .text	00000000000001fe  Base        drake::systems::Diagram<double>::DoGetPerStepEvents(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*) const
00000000000f13a0  w   DO .rodata	0000000000000022  Base        typeinfo name for spdlog::details::flag_formatter
0000000000312ff8  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::a_formatter
0000000000074480  w   DF .text	000000000000000f  Base        spdlog::details::f_formatter::~f_formatter()
000000000008db40  w   DF .text	00000000000000b3  Base        void std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >::_M_emplace_back_aux<drake::systems::WitnessFunction<double> const* const&>(drake::systems::WitnessFunction<double> const* const&)
0000000000310df8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000a65b0  w   DF .text	00000000000009d4  Base        std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> > drake::systems::Diagram<double>::ConvertScalarType<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >() const
00000000000bc020  w   DF .text	00000000000002e1  Base        drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::set_value(Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)
00000000003131d8  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::M_formatter
0000000000071a80  w   DF .text	0000000000000006  Base        drake::systems::DiagramOutputPort<double>::~DiagramOutputPort()
00000000000ba540  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::Context<drake::symbolic::Expression>, std::default_delete<drake::systems::Context<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::Context<drake::symbolic::Expression>, std::default_delete<drake::systems::Context<drake::symbolic::Expression> > > > >::~vector()
0000000000072770  w   DF .text	0000000000000010  Base        drake::systems::System<drake::symbolic::Expression>::AllocateDiscreteVariables() const
0000000000075600  w   DF .text	000000000000001b  Base        drake::systems::Diagram<double>::GetParentPathname() const
00000000000a0e20  w   DF .text	00000000000004e2  Base        drake::systems::Simulator<double>::StepTo(double const&)
00000000000852d0  w   DF .text	0000000000000103  Base        drake::systems::ContextBase::ContextBase()
0000000000086750  w   DF .text	0000000000000061  Base        void fmt::Buffer<char>::append<char>(char const*, char const*)
0000000000314ca0  w   DO .data.rel.ro	0000000000000070  Base        vtable for drake::systems::LeafContext<double>
0000000000312690  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::EventCollection<drake::systems::PublishEvent<double> >
00000000000ed0a0  w   DO .rodata	0000000000000046  Base        typeinfo name for drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*)
0000000000314ef0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::LeafOutputPort<double>::set_calculation_function(std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>)::{lambda(drake::systems::Context<double> const&, drake::systems::AbstractValue*)#1}
0000000000316b48 u    DO .bss	0000000000000008  Base        guard variable for drake::systems::CacheEntryValue::dummy()::dummy
00000000000d64e0  w   DF .text	00000000000000c9  Base        drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >::~LeafEventCollection()
0000000000312538  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::OutputPort<double>
0000000000075d30  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetTargetSystemContext(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
0000000000071d00  w   DF .text	0000000000000036  Base        std::_Function_handler<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&)
0000000000072110  w   DF .text	0000000000000006  Base        spdlog::details::a_formatter::~a_formatter()
0000000000310fd8  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::Context<drake::symbolic::Expression>& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
0000000000311798  w   DO .data.rel.ro	0000000000000020  Base        typeinfo for drake::systems::VectorBase<drake::symbolic::Expression>& (*)(drake::systems::ContinuousState<drake::symbolic::Expression>*)
000000000007ccf0  w   DF .text	000000000000007a  Base        drake::systems::internal::DiagramOutput<double>::get_port_value(int) const
000000000007ab30  w   DF .text	0000000000000089  Base        std::_Function_base::_Base_manager<drake::systems::Simulator<double>::IsolateWitnessTriggers(std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*)::{lambda(double const&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::Simulator<double>::IsolateWitnessTriggers(std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*)::{lambda(double const&)#1}> const&, std::_Manager_operation)
00000000000c6d30  w   DF .text	0000000000000314  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetPeriodicEvents() const
00000000000ec7c0  w   DO .rodata	0000000000000060  Base        typeinfo name for drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*)
0000000000313600  w   DO .data.rel.ro	0000000000000070  Base        vtable for drake::systems::Context<double>
0000000000071910  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::Context<double>* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::Context<double>*), drake::systems::Context<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double>*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&, drake::systems::System<double> const&, drake::systems::Context<double>*&&)
00000000000720e0  w   DF .text	0000000000000006  Base        spdlog::details::B_formatter::~B_formatter()
000000000007bc60  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000d2270  w   DF .text	00000000000008d2  Base        drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ContinuousState(std::unique_ptr<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, int, int, int)
00000000000748e0  w   DF .text	0000000000000024  Base        drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~State()
0000000000082640  w   DF .text	0000000000000082  Base        drake::systems::ContextBase::GetSystemName[abi:cxx11]() const
0000000000310d58  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Parameters<drake::symbolic::Expression>
0000000000312aa0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}
00000000000ef7c0  w   DO .rodata	000000000000009e  Base        typeinfo name for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const
0000000000315960  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for std::_Sp_counted_ptr_inplace<RigidBodyFrame<double>, Eigen::aligned_allocator<RigidBodyFrame<double> >, (__gnu_cxx::_Lock_policy)2>
0000000000072500  w   DF .text	0000000000000012  Base        drake::systems::System<double>::DoGetTargetSystemCompositeEventCollection(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*) const
000000000007b5a0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramState<drake::symbolic::Expression>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<drake::symbolic::Expression>& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000310928  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*)
0000000000074a60  w   DF .text	0000000000000018  Base        fmt::FormatError::~FormatError()
0000000000074130  w   DF .text	0000000000000078  Base        drake::systems::DiagramState<drake::symbolic::Expression>::~DiagramState()
0000000000312210  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::e_formatter
0000000000074850  w   DF .text	000000000000000f  Base        drake::systems::DiagramOutputPort<drake::symbolic::Expression>::~DiagramOutputPort()
00000000000cf050  w   DF .text	0000000000000018  Base        drake::systems::Supervector<double>::GetAtIndex(int) const
00000000000abff0  w   DF .text	00000000000002c8  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Diagram(std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> >)
00000000000eeac0  w   DO .rodata	000000000000002c  Base        typeinfo name for drake::systems::internal::DiagramOutput<double>
0000000000310d80  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::Subvector<drake::symbolic::Expression>
00000000000a63d0  w   DF .text	000000000000010a  Base        std::_Rb_tree<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&)
0000000000088ac0  w   DF .text	0000000000000727  Base        spdlog::pattern_formatter::handle_flag(char)
00000000000b4e30  w   DF .text	0000000000000045  Base        drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiscreteValues()
0000000000310e10  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000df200  w   DF .text	0000000000000143  Base        void std::vector<std::unique_ptr<drake::systems::OutputPortValue, std::default_delete<drake::systems::OutputPortValue> >, std::allocator<std::unique_ptr<drake::systems::OutputPortValue, std::default_delete<drake::systems::OutputPortValue> > > >::emplace_back<std::unique_ptr<drake::systems::OutputPortValue, std::default_delete<drake::systems::OutputPortValue> > >(std::unique_ptr<drake::systems::OutputPortValue, std::default_delete<drake::systems::OutputPortValue> >&&)
00000000000f60e0  w   DO .rodata	0000000000000031  Base        typeinfo name for drake::systems::Value<drake::systems::ContactResults<double> >
00000000000ee820  w   DO .rodata	000000000000005e  Base        typeinfo name for drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000848e0  w   DF .text	000000000000005e  Base        std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::function(std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&)
00000000000b1610  w   DF .text	00000000000001be  Base        std::unique_ptr<drake::systems::Context<drake::symbolic::Expression>, std::default_delete<drake::systems::Context<drake::symbolic::Expression> > > drake::dynamic_pointer_cast_or_throw<drake::systems::Context<drake::symbolic::Expression>, drake::systems::ContextBase>(std::unique_ptr<drake::systems::ContextBase, std::default_delete<drake::systems::ContextBase> >&&)
00000000000b0a60  w   DF .text	000000000000003f  Base        drake::systems::DiagramCompositeEventCollection<double>::~DiagramCompositeEventCollection()
00000000000a7010  w   DF .text	00000000000000ee  Base        std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >, drake::systems::System<double> const* const&)
0000000000310b58  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::ContinuousState<drake::symbolic::Expression> const& (int)
000000000007eb10  w   DF .text	000000000000007d  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::~DiagramEventCollection()
0000000000079e90  w   DF .text	000000000000005d  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoMapQDotToVelocity(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000078e40  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<double>::DoGetTargetSystemState(drake::systems::System<double> const&, drake::systems::State<double> const*) const
000000000009adf0  w   DF .text	00000000000002ea  Base        void spdlog::logger::log<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(spdlog::level::level_enum, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000312a60  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, double>(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}
0000000000312d90  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>
00000000000f1630  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::S_formatter
000000000007b720  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramContinuousState<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::ContinuousState<drake::symbolic::Expression> const& (drake::systems::DiagramContinuousState<drake::symbolic::Expression>::*)(int) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000072480  w   DF .text	0000000000000012  Base        drake::systems::System<double>::DoGetMutableTargetSystemState(drake::systems::System<double> const&, drake::systems::State<double>*) const
00000000003130c0  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::C_formatter
0000000000310d30  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::State<drake::symbolic::Expression>
00000000000b2540  w   DF .text	000000000000006a  Base        drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>::~DiagramDiscreteValues()
00000000000f21c0  w   DO .rodata	000000000000005e  Base        typeinfo name for std::_Sp_counted_ptr_inplace<spdlog::pattern_formatter, std::allocator<spdlog::pattern_formatter>, (__gnu_cxx::_Lock_policy)2>
0000000000073770  w   DF .text	000000000000000d  Base        drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_state() const
00000000000d9af0  w   DF .text	00000000000001b9  Base        void std::vector<std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > >, std::allocator<std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > > > >::emplace_back<std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > > >(std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > >&&)
00000000003125d0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::IntegratorBase<double>
0000000000098a60  w   DF .text	00000000000004ab  Base        void fmt::BasicWriter<char>::write_double<long double, fmt::FormatSpec>(long double, fmt::FormatSpec const&)
0000000000077fb0  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetTargetSystemContinuousState(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
0000000000312030  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for spdlog::sinks::sink
00000000000741b0  w   DF .text	0000000000000078  Base        drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramState()
00000000000a3f10  w   DF .text	000000000000004c  Base        std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >*)
0000000000071fc0  w   DF .text	0000000000000006  Base        spdlog::details::T_formatter::~T_formatter()
000000000009d0f0  w   DF .text	00000000000001ad  Base        drake::systems::System<drake::symbolic::Expression>::~System()
000000000008b4d0  w   DF .text	000000000000026f  Base        fmt::BasicFormatter<char, fmt::ArgFormatter<char> >::parse_arg_index(char const*&)
0000000000312418  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::Context<double>
000000000009bcc0  w   DF .text	00000000000000f0  Base        std::_Rb_tree_iterator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > > std::_Rb_tree<std::pair<drake::systems::System<double> const*, int>, std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > >, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<double> const*, int> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > >, std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<double> const*, int> const&>&&, std::tuple<>&&)
0000000000072120  w   DF .text	0000000000000006  Base        spdlog::details::short_level_formatter::~short_level_formatter()
0000000000316660 u    DO .data	00000000000000a0  Base        fmt::internal::BasicData<void>::POWERS_OF_10_64
00000000000ee960  w   DO .rodata	000000000000005c  Base        typeinfo name for drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000313408  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::v_formatter
00000000000f35c0  w   DO .rodata	00000000000000e4  Base        typeinfo name for drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}
00000000000f66c0  w   DO .rodata	0000000000000073  Base        typeinfo name for std::_Sp_counted_deleter<drake::systems::AbstractValue*, std::default_delete<drake::systems::AbstractValue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>
00000000000f0d80  w   DO .rodata	000000000000005c  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::ContinuousState<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*) const>
000000000009cec0  w   DF .text	00000000000000c9  Base        std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}> const&, std::_Manager_operation)
00000000000866e0  w   DF .text	000000000000006e  Base        std::_Hashtable<drake::systems::WitnessFunction<double> const*, std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, std::allocator<std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > > >, std::__detail::_Select1st, std::equal_to<drake::systems::WitnessFunction<double> const*>, std::hash<drake::systems::WitnessFunction<double> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::~_Hashtable()
0000000000313048  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::b_formatter
00000000000c7a60  w   DF .text	0000000000000287  Base        void std::vector<drake::systems::WitnessFunction<drake::symbolic::Expression> const*, std::allocator<drake::systems::WitnessFunction<drake::symbolic::Expression> const*> >::_M_range_insert<__gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<drake::symbolic::Expression> const**, std::vector<drake::systems::WitnessFunction<drake::symbolic::Expression> const*, std::allocator<drake::systems::WitnessFunction<drake::symbolic::Expression> const*> > > >(__gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<drake::symbolic::Expression> const**, std::vector<drake::systems::WitnessFunction<drake::symbolic::Expression> const*, std::allocator<drake::systems::WitnessFunction<drake::symbolic::Expression> const*> > >, __gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<drake::symbolic::Expression> const**, std::vector<drake::systems::WitnessFunction<drake::symbolic::Expression> const*, std::allocator<drake::systems::WitnessFunction<drake::symbolic::Expression> const*> > >, __gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<drake::symbolic::Expression> const**, std::vector<drake::systems::WitnessFunction<drake::symbolic::Expression> const*, std::allocator<drake::systems::WitnessFunction<drake::symbolic::Expression> const*> > >, std::forward_iterator_tag)
0000000000099570  w   DF .text	00000000000008af  Base        fmt::BasicFormatter<char, fmt::ArgFormatter<char> >::format(char const*&, fmt::internal::Arg const&)
00000000000722e0  w   DF .text	0000000000000047  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::HasEvents() const
0000000000087950  w   DF .text	0000000000000137  Base        drake::systems::DiagramContext<drake::symbolic::Expression>::~DiagramContext()
0000000000072410  w   DF .text	000000000000000a  Base        drake::systems::System<double>::DoCalcKineticEnergy(drake::systems::Context<double> const&) const
0000000000084fe0  w   DF .text	0000000000000011  Base        drake::systems::Context<double>::set_accuracy(stx::optional<double> const&)
00000000000b9250  w   DF .text	0000000000000148  Base        drake::systems::DiscreteValues<double>::DiscreteValues(std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> > const&)
000000000007af40  w   DF .text	0000000000000079  Base        std::_Function_base::_Base_manager<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Initialize(std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> >)::{lambda(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Initialize(std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> >)::{lambda(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>*)#1}> const&, std::_Manager_operation)
0000000000314b18  w   DO .data.rel.ro	0000000000000040  Base        vtable for drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000313c38  w   DO .data.rel.ro	0000000000000080  Base        vtable for drake::systems::BasicVector<double>
00000000000f3e80  w   DO .rodata	0000000000000059  Base        typeinfo name for drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >
0000000000074a20  w   DF .text	000000000000003b  Base        drake::systems::internal::DiagramOutput<double>::~DiagramOutput()
0000000000087620  w   DF .text	0000000000000324  Base        drake::systems::BasicVector<drake::symbolic::Expression>::NormInf() const
00000000000b59d0  w   DF .text	0000000000000874  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetRandomParameters(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
0000000000073440  w   DF .text	000000000000000a  Base        drake::systems::DiagramContinuousState<double>::x_selector(drake::systems::ContinuousState<double>*)
0000000000079d70  w   DF .text	000000000000005d  Base        drake::systems::System<double>::DoMapVelocityToQDot(drake::systems::Context<double> const&, Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<double>*) const
00000000000a7230  w   DF .text	000000000000010a  Base        std::_Rb_tree<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&)
00000000000d5780  w   DF .text	0000000000000068  Base        drake::systems::LeafSystem<double>::DoAllocateInputAbstract(drake::systems::InputPortDescriptor<double> const&) const
00000000000c0f80  w   DF .text	00000000000000c9  Base        std::_Rb_tree<drake::systems::PeriodicEventData, std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >, std::_Select1st<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > >, drake::systems::PeriodicEventDataComparator, std::allocator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > > >::_M_get_insert_unique_pos(drake::systems::PeriodicEventData const&)
000000000008a160  w   DF .text	000000000000003e  Base        drake::systems::Simulator<double>::HandlePublish(drake::systems::EventCollection<drake::systems::PublishEvent<double> > const&)
0000000000071a60  w   DF .text	0000000000000012  Base        drake::systems::System<double>::DoGetTargetSystemContext(drake::systems::System<double> const&, drake::systems::Context<double> const*) const
0000000000311d48  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::DiagramState<double>
00000000000bc310  w   DF .text	000000000000000a  Base        drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetFromVector(Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)
00000000000e0190  w   DF .text	0000000000000594  Base        drake::systems::LeafSystem<double>::DoMakeLeafContext() const
000000000007c510  w   DF .text	0000000000000061  Base        drake::systems::BasicVector<double>::GetAtIndex(int)
0000000000314e48  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::Value<drake::systems::ContactResults<double> >
0000000000312960  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::symbolic::Expression
00000000000e4d20  w   DF .text	0000000000000178  Base        Eigen::internal::gemm_pack_lhs<double, long, Eigen::internal::const_blas_data_mapper<double, long, 0>, 4, 2, 0, false, false>::operator()(double*, Eigen::internal::const_blas_data_mapper<double, long, 0> const&, long, long, long, long)
0000000000072c60  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*), drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*&&)
00000000000724a0  w   DF .text	0000000000000012  Base        drake::systems::System<double>::DoGetTargetSystemState(drake::systems::System<double> const&, drake::systems::State<double> const*) const
00000000000a3ec0  w   DF .text	000000000000004c  Base        std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >*)
0000000000311258  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const
0000000000079fb0  w   DF .text	000000000000001e  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::add_event(std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > >)
00000000000af5a0  w   DF .text	000000000000038e  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoMapQDotToVelocity(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<drake::symbolic::Expression>*) const
0000000000079b40  w   DF .text	000000000000000e  Base        drake::systems::BasicVector<double>::~BasicVector()
00000000000d51d0  w   DF .text	0000000000000011  Base        drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >::HasEvents() const
0000000000311670  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>
000000000008d2c0  w   DF .text	000000000000015d  Base        drake::systems::System<double>::~System()
0000000000096800  w   DF .text	0000000000000191  Base        void std::vector<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg>, std::allocator<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg> > >::_M_emplace_back_aux<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg> >(std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg>&&)
0000000000081060  w   DF .text	00000000000002b3  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetPerStepEvents(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000f5ce0  w   DO .rodata	0000000000000021  Base        typeinfo name for drake::systems::LeafContext<double>
00000000000efec0  w   DO .rodata	000000000000006c  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::State<drake::symbolic::Expression> const& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int) const>
00000000000d51b0  w   DF .text	0000000000000011  Base        drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >::HasEvents() const
00000000000a1a70  w   DF .text	0000000000000220  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::NamesAreUniqueAndNonEmpty() const
00000000000da850  w   DF .text	00000000000000a5  Base        drake::systems::LeafSystem<double>::DeclareDiscreteState(int)
00000000003112a8  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const
0000000000312c28  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >
00000000000ed060  w   DO .rodata	0000000000000032  Base        typeinfo name for drake::systems::CompositeEventCollection<double>& (int)
0000000000072020  w   DF .text	0000000000000006  Base        spdlog::details::f_formatter::~f_formatter()
00000000000b6700  w   DF .text	0000000000000065  Base        std::_Rb_tree<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::find(std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&) const
00000000000f65c0  w   DO .rodata	00000000000000f0  Base        typeinfo name for drake::systems::LeafSystem<double>::MaybeDeclareVectorBaseInequalityConstraint(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, drake::systems::VectorBase<double> const&, std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)> const&)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}
00000000000725a0  w   DF .text	0000000000000046  Base        drake::systems::VectorBase<double>::SetZero()
0000000000075cd0  w   DF .text	000000000000005a  Base        drake::systems::Diagram<double>::DoCalcWitnessValue(drake::systems::Context<double> const&, drake::systems::WitnessFunction<double> const&) const
00000000000bd850  w   DF .text	0000000000000226  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::EvalConnectedSubsystemInputPort(drake::systems::ContextBase const&, drake::systems::InputPortBase const&) const
0000000000074ae0  w   DF .text	0000000000000032  Base        fmt::internal::RuntimeError::~RuntimeError()
000000000009cf90  w   DF .text	0000000000000153  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::Diagram<drake::symbolic::Expression> >()
0000000000074400  w   DF .text	000000000000000f  Base        spdlog::details::t_formatter::~t_formatter()
00000000000f3b20  w   DO .rodata	0000000000000067  Base        typeinfo name for drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000f2100  w   DO .rodata	0000000000000038  Base        typeinfo name for drake::systems::Context<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double>*) const
00000000003112f8  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)
00000000000735f0  w   DF .text	0000000000000037  Base        std::_Function_base::_Base_manager<drake::systems::VectorBase<double>& (*)(drake::systems::ContinuousState<double>*)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000092e60  w   DF .text	0000000000000261  Base        drake::systems::IntegratorBase<double>::CalcAdjustedStepSize(double const&, double const&, bool*) const
00000000000c8120  w   DF .text	000000000000018d  Base        drake::systems::ContinuousState<drake::symbolic::Expression>::ContinuousState(std::unique_ptr<drake::systems::VectorBase<drake::symbolic::Expression>, std::default_delete<drake::systems::VectorBase<drake::symbolic::Expression> > >)
00000000000869b0  w   DF .text	0000000000000072  Base        std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()
00000000000edc60  w   DO .rodata	0000000000000020  Base        typeinfo name for drake::systems::Parameters<double>
0000000000073400  w   DF .text	000000000000000a  Base        drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::x_selector(drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
000000000007e910  w   DF .text	000000000000007d  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::~DiagramEventCollection()
00000000000d7f00  w   DF .text	0000000000000153  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::ContactResults<double> >()
00000000003122d0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::z_formatter
000000000008be40  w   DF .text	0000000000000067  Base        spdlog::details::F_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000312228  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::f_formatter
00000000000c83a0  w   DF .text	0000000000000312  Base        drake::systems::DiagramContinuousState<drake::symbolic::Expression>::Span(std::vector<drake::systems::ContinuousState<drake::symbolic::Expression>*, std::allocator<drake::systems::ContinuousState<drake::symbolic::Expression>*> > const&, std::function<drake::systems::VectorBase<drake::symbolic::Expression>& (drake::systems::ContinuousState<drake::symbolic::Expression>*)>)
000000000009bbb0  w   DF .text	000000000000010a  Base        std::_Rb_tree<std::pair<drake::systems::System<double> const*, int>, std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > >, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > >, std::pair<drake::systems::System<double> const*, int> const&)
00000000000dddd0  w   DF .text	0000000000000192  Base        drake::systems::UnrestrictedUpdateEvent<double>::add_to_composite(drake::systems::CompositeEventCollection<double>*) const
00000000000f2ce0  w   DO .rodata	000000000000009d  Base        typeinfo name for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}
00000000003122a0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::R_formatter
00000000000defb0  w   DF .text	0000000000000143  Base        void std::vector<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > > >::emplace_back<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > >(std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >&&)
000000000009de30  w   DF .text	00000000000002cb  Base        drake::systems::SystemScalarConverter::SystemScalarConverter<drake::systems::Diagram>(drake::systems::SystemTypeTag<drake::systems::Diagram>, drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)
00000000000ef160  w   DO .rodata	0000000000000078  Base        typeinfo name for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000f0d20  w   DO .rodata	0000000000000051  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::State<double> const& (drake::systems::DiagramState<double>::*)(int) const>
00000000000d1410  w   DF .text	0000000000000055  Base        drake::systems::DiagramContext<drake::symbolic::Expression>::DoCloneWithoutPointers() const
0000000000084960  w   DF .text	000000000000001f  Base        spdlog::logger::error_handler[abi:cxx11]()
00000000000c6320  w   DF .text	0000000000000314  Base        drake::systems::Diagram<double>::DoGetPeriodicEvents() const
00000000000984e0  w   DF .text	00000000000000b6  Base        void fmt::BasicWriter<char>::write_str<char, fmt::FormatSpec>(fmt::internal::Value::StringValue<char> const&, fmt::FormatSpec const&)
000000000007dac0  w   DF .text	0000000000000031  Base        drake::systems::VectorBase<double>::CalcInequalityConstraint(Eigen::Matrix<double, -1, 1, 0, -1, 1>*) const
00000000000cf090  w   DF .text	0000000000000318  Base        drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetSubvectorAndOffset(int) const
00000000000731a0  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*), drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&, drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*&&)
00000000000eeb80  w   DO .rodata	0000000000000022  Base        typeinfo name for drake::systems::DiagramState<double>
0000000000310cb0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > ()
00000000000eca40  w   DO .rodata	000000000000005c  Base        typeinfo name for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (int)
0000000000311078  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::State<drake::symbolic::Expression> const& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int) const
000000000007d8e0  w   DF .text	0000000000000124  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcConstraintErrorNorm(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&) const
00000000000f2980  w   DO .rodata	000000000000003c  Base        typeinfo name for drake::systems::DiagramContext<drake::symbolic::Expression>
0000000000311518  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::Supervector<drake::symbolic::Expression>
0000000000311000  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const
00000000000f1730  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::T_formatter
0000000000310948  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
000000000009cd20  w   DF .text	000000000000005e  Base        std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)>::function(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)> const&)
0000000000311fc0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for fmt::BasicWriter<char>
0000000000076370  w   DF .text	00000000000000b3  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoValidateAllocatedContext(drake::systems::ContextBase const&) const
00000000003130e8  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::D_formatter
00000000003115f0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::Value<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000075430  w   DF .text	0000000000000047  Base        drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_substate(int) const
0000000000075650  w   DF .text	0000000000000009  Base        non-virtual thunk to drake::systems::Diagram<drake::symbolic::Expression>::GetParentPathname() const
00000000000b7050  w   DF .text	000000000000013f  Base        drake::systems::ContinuousState<double>::DoClone() const
0000000000074010  w   DF .text	0000000000000047  Base        drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Supervector()
00000000000ed2c0  w   DO .rodata	0000000000000064  Base        typeinfo name for drake::systems::Context<drake::symbolic::Expression>& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
000000000008a7d0  w   DF .text	0000000000000089  Base        Eigen::DenseStorage<double, -1, -1, 1, 0>::DenseStorage(Eigen::DenseStorage<double, -1, -1, 1, 0> const&)
0000000000071b50  w   DF .text	0000000000000037  Base        std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}> const&, std::_Manager_operation)
00000000000c1fb0  w   DF .text	0000000000000031  Base        std::vector<double, std::allocator<double> >::resize(unsigned long)
0000000000314e60  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::UnrestrictedUpdateEvent<double>
0000000000073530  w   DF .text	0000000000000060  Base        drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~State()
00000000000debf0  w   DF .text	0000000000000014  Base        drake::systems::LeafSystem<double>::DoGetInitializationEvents(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*) const
00000000000a2c10  w   DF .text	000000000000000c  Base        non-virtual thunk to drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Diagram()
000000000007fb70  w   DF .text	000000000000018f  Base        drake::systems::Diagram<double>::SetRandomState(drake::systems::Context<double> const&, drake::systems::State<double>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
0000000000073320  w   DF .text	0000000000000060  Base        drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~CompositeEventCollection()
0000000000311460  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::CompositeEventCollection<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*) const
0000000000310c10  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000000e2070  w   DF .text	000000000000036d  Base        drake::systems::LeafContext<double>::DoCloneState() const
0000000000072ba0  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*), drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*&&)
00000000000d5230  w   DF .text	0000000000000006  Base        drake::systems::LeafSystem<double>::DoValidateAllocatedLeafContext(drake::systems::LeafContext<double> const&) const
0000000000311cf8  w   DO .data.rel.ro	0000000000000028  Base        vtable for drake::systems::DiagramContinuousState<double>
0000000000073e90  w   DF .text	000000000000007b  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::~DiagramEventCollection()
0000000000312608  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::PublishEvent<double>
000000000008d220  w   DF .text	0000000000000098  Base        std::_Hashtable<drake::systems::SystemScalarConverter::Key, std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> >, std::allocator<std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> > >, std::__detail::_Select1st, std::equal_to<drake::systems::SystemScalarConverter::Key>, drake::systems::SystemScalarConverter::KeyHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()
00000000000d5e20  w   DF .text	000000000000007a  Base        drake::systems::LeafSystemOutput<double>::get_port_value(int) const
0000000000071e50  w   DF .text	0000000000000006  Base        drake::systems::DiagramOutputPort<drake::symbolic::Expression>::~DiagramOutputPort()
00000000000f1840  w   DO .rodata	0000000000000027  Base        typeinfo name for spdlog::details::aggregate_formatter
00000000003125e0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::RungeKutta3Integrator<double>
00000000000ac580  w   DF .text	0000000000000025  Base        std::_Function_handler<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&), drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const&)
00000000000b7990  w   DF .text	0000000000000144  Base        void std::vector<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > > > >::emplace_back<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > > >(std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > >&&)
0000000000314d68  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::LeafCompositeEventCollection<double>
0000000000312a90  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::SystemScalarConverter::Add<double, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}
000000000008fcf0  w   DF .text	000000000000000c  Base        non-virtual thunk to drake::systems::Diagram<double>::~Diagram()
0000000000311680  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>
0000000000085000  w   DF .text	000000000000005d  Base        drake::systems::DiagramContext<drake::symbolic::Expression>::set_accuracy(stx::optional<double> const&)
00000000000ee280  w   DO .rodata	0000000000000047  Base        typeinfo name for drake::systems::WitnessTriggeredEventData<drake::symbolic::Expression>
0000000000311530  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*) const>
00000000000a1420  w   DF .text	00000000000000f1  Base        void std::vector<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::emplace_back<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&>(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&)
00000000000f3c20  w   DO .rodata	000000000000007f  Base        typeinfo name for drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
00000000000b4de0  w   DF .text	0000000000000047  Base        drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiscreteValues()
000000000009d6e0  w   DF .text	00000000000000c9  Base        std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}> const&, std::_Manager_operation)
0000000000313cb8  w   DO .data.rel.ro	0000000000000028  Base        vtable for drake::systems::ContinuousState<drake::symbolic::Expression>
0000000000312a80  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}
0000000000312378  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::full_formatter
00000000000d8a50  w   DF .text	000000000000005e  Base        std::function<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > ()>::function(std::function<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > ()> const&)
00000000000b0a20  w   DF .text	0000000000000032  Base        drake::systems::DiagramCompositeEventCollection<double>::~DiagramCompositeEventCollection()
00000000000a1720  w   DF .text	00000000000000f1  Base        void std::vector<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::emplace_back<drake::systems::System<drake::symbolic::Expression> const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&>(drake::systems::System<drake::symbolic::Expression> const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&)
00000000000720a0  w   DF .text	0000000000000006  Base        spdlog::details::Y_formatter::~Y_formatter()
00000000000f0320  w   DO .rodata	000000000000005f  Base        typeinfo name for drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000076ff0  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoGetMutableTargetSystemCompositeEventCollection(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const
0000000000073d90  w   DF .text	000000000000007b  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::~DiagramEventCollection()
00000000000f1dd0  w   DO .rodata	000000000000001a  Base        typeinfo name for drake::systems::Event<double>
00000000000b0b10  w   DF .text	0000000000000040  Base        drake::systems::DiagramContinuousState<double>::~DiagramContinuousState()
00000000000c74b0  w   DF .text	0000000000000287  Base        void std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> >::_M_range_insert<__gnu_cxx::__normal_iterator<drake::systems::Event<drake::symbolic::Expression> const* const*, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > > >(__gnu_cxx::__normal_iterator<drake::systems::Event<drake::symbolic::Expression> const**, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > >, __gnu_cxx::__normal_iterator<drake::systems::Event<drake::symbolic::Expression> const* const*, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > >, __gnu_cxx::__normal_iterator<drake::systems::Event<drake::symbolic::Expression> const* const*, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > >, std::forward_iterator_tag)
000000000009da20  w   DF .text	000000000000005e  Base        std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)>::function(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)
0000000000311de0  w   DO .data.rel.ro	0000000000000078  Base        vtable for drake::systems::Supervector<drake::symbolic::Expression>
00000000000f3d40  w   DO .rodata	000000000000008a  Base        typeinfo name for drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000089f80  w   DF .text	000000000000011e  Base        drake::systems::Simulator<double>::~Simulator()
00000000003125a8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::DiagramBuilder<double>
00000000000a64e0  w   DF .text	00000000000000d0  Base        std::_Rb_tree_iterator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > std::_Rb_tree<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>&&, std::tuple<>&&)
0000000000312488  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::System<drake::symbolic::Expression>
00000000000c82b0  w   DF .text	00000000000000e8  Base        void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)
00000000000efc20  w   DO .rodata	000000000000006d  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*) const>
00000000003157b8  w   DO .data.rel.ro	0000000000000040  Base        vtable for drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >
000000000009ca00  w   DF .text	0000000000000153  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >()
00000000000749e0  w   DF .text	000000000000003b  Base        drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramOutput()
00000000000b25b0  w   DF .text	0000000000000067  Base        drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>::~DiagramDiscreteValues()
00000000003167e0 u    DO .bss	0000000000000020  Base        drake::NiceTypeName::Get<drake::systems::BasicVector<double> >()::canonical[abi:cxx11]
0000000000311f60  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for stx::bad_optional_access
000000000007bde0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramState<double>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<double>& (drake::systems::DiagramState<double>::*)(int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000cf070  w   DF .text	0000000000000018  Base        drake::systems::Supervector<double>::GetAtIndex(int)
0000000000085250  w   DF .text	0000000000000079  Base        std::vector<drake::copyable_unique_ptr<drake::systems::FixedInputPortValue>, std::allocator<drake::copyable_unique_ptr<drake::systems::FixedInputPortValue> > >::~vector()
00000000000aaab0  w   DF .text	00000000000000ee  Base        std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> >, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&)
00000000000aa050  w   DF .text	00000000000009d4  Base        std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> > drake::systems::Diagram<drake::symbolic::Expression>::ConvertScalarType<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >() const
0000000000313e50  w   DO .data.rel.ro	0000000000000208  Base        vtable for drake::systems::Diagram<double>
0000000000089e60  w   DF .text	000000000000009e  Base        drake::systems::IntegratorBase<double>::~IntegratorBase()
000000000007cbf0  w   DF .text	000000000000007a  Base        drake::systems::internal::DiagramOutput<drake::symbolic::Expression>::get_port_value(int) const
0000000000072f10  w   DF .text	0000000000000023  Base        std::_Function_handler<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000088970  w   DF .text	0000000000000144  Base        void std::vector<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >, std::allocator<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > > >::emplace_back<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > >(std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >&&)
0000000000316a40 u    DO .bss	0000000000000008  Base        guard variable for drake::NiceTypeName::Get<drake::systems::Context<double> >()::canonical
00000000000d61e0  w   DF .text	00000000000000a4  Base        drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::Clear()
0000000000090b50  w   DF .text	0000000000000059  Base        drake::systems::Simulator<double>::HandleDiscreteUpdate(drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > const&)
00000000000d5fd0  w   DF .text	00000000000000e3  Base        drake::systems::LeafSystem<double>::DispatchUnrestrictedUpdateHandler(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > const&, drake::systems::State<double>*) const
0000000000090220  w   DF .text	0000000000000298  Base        drake::systems::BasicVector<double>::set_value(Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)
00000000000f1b60  w   DO .rodata	0000000000000021  Base        typeinfo name for drake::systems::BasicVector<double>
00000000003146e8  w   DO .data.rel.ro	0000000000000070  Base        vtable for drake::systems::Context<drake::symbolic::Expression>
0000000000311748  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::ContinuousState<double> const& (drake::systems::DiagramContinuousState<double>::*)(int) const>
00000000000f6160  w   DO .rodata	000000000000002d  Base        typeinfo name for drake::systems::UnrestrictedUpdateEvent<double>
000000000007d1e0  w   DF .text	00000000000000fd  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::DoMerge(drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > const&)
00000000000720f0  w   DF .text	0000000000000006  Base        spdlog::details::b_formatter::~b_formatter()
00000000000936e0  w   DF .text	00000000000000b1  Base        drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetFrom(drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)
00000000000d79a0  w   DF .text	000000000000005e  Base        std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>::function(std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)> const&)
00000000000d60c0  w   DF .text	0000000000000044  Base        drake::systems::Value<drake::systems::BasicVector<double> >::~Value()
00000000000f4740  w   DO .rodata	00000000000000da  Base        typeinfo name for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>
00000000000873c0  w   DF .text	0000000000000254  Base        drake::systems::VectorBase<drake::symbolic::Expression>::ScaleAndAddToVector(drake::symbolic::Expression const&, Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>, 0, Eigen::InnerStride<1> >) const
00000000000a1310  w   DF .text	0000000000000107  Base        std::_Function_handler<void (double const&), drake::systems::Simulator<double>::IsolateWitnessTriggers(std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*)::{lambda(double const&)#1}>::_M_invoke(std::_Any_data const&, double const&)
00000000000c7cf0  w   DF .text	00000000000001ca  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoGetWitnessFunctions(drake::systems::Context<drake::symbolic::Expression> const&, std::vector<drake::systems::WitnessFunction<drake::symbolic::Expression> const*, std::allocator<drake::systems::WitnessFunction<drake::symbolic::Expression> const*> >*) const
00000000000be7e0  w   DF .text	0000000000000091  Base        std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::equal_range(int const&)
000000000008cd90  w   DF .text	0000000000000036  Base        std::__shared_ptr<drake::symbolic::ExpressionCell, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<drake::symbolic::ExpressionCell, (__gnu_cxx::_Lock_policy)2> const&)
00000000000747b0  w   DF .text	000000000000000f  Base        std::_Sp_counted_ptr_inplace<spdlog::sinks::stderr_sink<std::mutex>, std::allocator<spdlog::sinks::stderr_sink<std::mutex> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
00000000000f0580  w   DO .rodata	000000000000008f  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)>
00000000000f0620  w   DO .rodata	0000000000000091  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>
00000000000f2520  w   DO .rodata	0000000000000068  Base        typeinfo name for std::_Sp_counted_ptr_inplace<spdlog::sinks::stderr_sink<std::mutex>, std::allocator<spdlog::sinks::stderr_sink<std::mutex> >, (__gnu_cxx::_Lock_policy)2>
0000000000073f90  w   DF .text	000000000000002a  Base        drake::systems::internal::DiagramOutput<double>::~DiagramOutput()
00000000000ed1a0  w   DO .rodata	000000000000007d  Base        typeinfo name for drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
00000000003109f8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)
0000000000074520  w   DF .text	000000000000000f  Base        spdlog::details::C_formatter::~C_formatter()
00000000000f2ac0  w   DO .rodata	0000000000000096  Base        typeinfo name for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > (drake::systems::System<double>::*)() const>
0000000000314f00  w   DO .data.rel.ro	0000000000000038  Base        vtable for drake::systems::LeafOutputPort<double>
00000000000851b0  w   DF .text	0000000000000091  Base        std::vector<std::unique_ptr<drake::systems::DependencyTracker, std::default_delete<drake::systems::DependencyTracker> >, std::allocator<std::unique_ptr<drake::systems::DependencyTracker, std::default_delete<drake::systems::DependencyTracker> > > >::~vector()
000000000007b100  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000311d20  w   DO .data.rel.ro	0000000000000028  Base        vtable for drake::systems::DiagramDiscreteValues<double>
0000000000312ad0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000f3400  w   DO .rodata	00000000000000e4  Base        typeinfo name for drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}
00000000000bbed0  w   DF .text	0000000000000145  Base        std::pair<std::_Rb_tree_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, bool> std::_Rb_tree<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::_Identity<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::less<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::_M_insert_unique<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&>(std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&)
00000000000ecf20  w   DO .rodata	0000000000000032  Base        typeinfo name for drake::systems::State<double> const* (drake::systems::System<double> const&, drake::systems::State<double> const*)
0000000000312748  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramOutputPort<double>
0000000000314c88  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::LeafSystemOutput<double>
0000000000072360  w   DF .text	0000000000000047  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::HasEvents() const
000000000008a860  w   DF .text	000000000000001f  Base        drake::systems::BasicVector<double>::CopyToVector() const
00000000000b7c30  w   DF .text	00000000000000d3  Base        void std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> >::emplace_back<drake::systems::BasicVector<double>*>(drake::systems::BasicVector<double>*&&)
00000000000c1850  w   DF .text	000000000000032d  Base        drake::systems::Diagram<drake::symbolic::Expression>::AllocateOutput(drake::systems::Context<drake::symbolic::Expression> const&) const
00000000003121f8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::S_formatter
0000000000092af0  w   DF .text	00000000000001ac  Base        drake::systems::Simulator<double>::Initialize()
00000000000a2950  w   DF .text	0000000000000089  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Diagram()
00000000000b41f0  w   DF .text	0000000000000648  Base        drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiagramCompositeEventCollection(std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >)
00000000000efa20  w   DO .rodata	000000000000004a  Base        typeinfo name for drake::systems::CompositeEventCollection<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*) const
000000000007ce70  w   DF .text	000000000000007a  Base        spdlog::sinks::base_sink<std::mutex>::flush()
00000000003126e0  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::Context<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double>*) const
0000000000310ba8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Context<drake::symbolic::Expression> const& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000000f27c0  w   DO .rodata	000000000000005a  Base        typeinfo name for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000072460  w   DF .text	000000000000000e  Base        drake::systems::System<double>::SetRandomState(drake::systems::Context<double> const&, drake::systems::State<double>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
0000000000313138  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::m_formatter
00000000000f17d0  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::i_formatter
0000000000316ba8 u    DO .bss	0000000000000008  Base        guard variable for drake::systems::internal::SystemMessageInterface::no_name()::dummy
00000000000f0800  w   DO .rodata	00000000000000a6  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>
00000000000edac0  w   DO .rodata	000000000000004c  Base        typeinfo name for drake::systems::Context<double>& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000003129a0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}
00000000000a7410  w   DF .text	00000000000007f9  Base        std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> > drake::systems::Diagram<double>::ConvertScalarType<drake::symbolic::Expression>() const
0000000000313110  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::Y_formatter
0000000000094ed0  w   DF .text	0000000000000113  Base        drake::systems::lcm::LcmPublisherSystem* drake::systems::DiagramBuilder<double>::AddSystem<drake::systems::lcm::LcmPublisherSystem>(std::unique_ptr<drake::systems::lcm::LcmPublisherSystem, std::default_delete<drake::systems::lcm::LcmPublisherSystem> >)
00000000000729d0  w   DF .text	0000000000000006  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetGraphvizInputPortToken(drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
000000000008a990  w   DF .text	0000000000000041  Base        drake::systems::BasicVector<drake::symbolic::Expression>::~BasicVector()
00000000003132a0  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::E_formatter
00000000000b4d70  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
00000000000f2000  w   DO .rodata	000000000000003a  Base        typeinfo name for drake::systems::EventCollection<drake::systems::PublishEvent<double> >
000000000008a880  w   DF .text	00000000000000c7  Base        void Eigen::internal::destruct_elements_of_array<drake::symbolic::Expression>(drake::symbolic::Expression*, unsigned long)
00000000000c7050  w   DF .text	0000000000000287  Base        void std::vector<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >::_M_range_insert<__gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const**, std::vector<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > >(__gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const**, std::vector<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >, __gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const**, std::vector<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >, __gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const**, std::vector<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >, std::forward_iterator_tag)
0000000000074ac0  w   DF .text	0000000000000018  Base        fmt::internal::RuntimeError::~RuntimeError()
0000000000312570  w   DO .data.rel.ro	0000000000000038  Base        typeinfo for drake::systems::Diagram<double>
00000000000a7340  w   DF .text	00000000000000d0  Base        std::_Rb_tree_iterator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > std::_Rb_tree<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>&&, std::tuple<>&&)
0000000000083b00  w   DF .text	000000000000008b  Base        spdlog::details::log_msg::~log_msg()
0000000000071fa0  w   DF .text	0000000000000006  Base        spdlog::details::t_formatter::~t_formatter()
0000000000311208  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)
00000000000cf3b0  w   DF .text	0000000000000018  Base        drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetAtIndex(int) const
0000000000073200  w   DF .text	0000000000000060  Base        drake::systems::CompositeEventCollection<drake::symbolic::Expression>::~CompositeEventCollection()
0000000000310cc0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::CompositeEventCollection<drake::symbolic::Expression>
00000000000e4360  w   DF .text	000000000000002e  Base        void std::vector<float, std::allocator<float> >::emplace_back<float>(float&&)
000000000008d450  w   DF .text	0000000000000065  Base        std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::find(std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&) const
0000000000073c10  w   DF .text	000000000000007b  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::~DiagramEventCollection()
0000000000071bd0  w   DF .text	0000000000000037  Base        std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}> const&, std::_Manager_operation)
00000000000a3be0  w   DF .text	000000000000000c  Base        non-virtual thunk to drake::systems::Diagram<drake::symbolic::Expression>::~Diagram()
00000000000a6040  w   DF .text	0000000000000046  Base        std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_insert_node(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >*)
00000000000a3e20  w   DF .text	000000000000004c  Base        std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >*)
000000000007efd0  w   DF .text	00000000000002b3  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoGetInitializationEvents(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const
0000000000096670  w   DF .text	000000000000018f  Base        std::pair<std::_Rb_tree_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_insert_unique<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000728d0  w   DF .text	0000000000000010  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateDiscreteVariables() const
0000000000074590  w   DF .text	000000000000000f  Base        spdlog::details::level_formatter::~level_formatter()
000000000007fd00  w   DF .text	000000000000018f  Base        drake::systems::Diagram<drake::symbolic::Expression>::SetRandomState(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
0000000000072860  w   DF .text	0000000000000006  Base        drake::systems::System<drake::symbolic::Expression>::GetGraphvizFragment(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
000000000009f9b0  w   DF .text	0000000000000151  Base        Eigen::internal::redux_impl<Eigen::internal::scalar_max_op<double, double>, Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, Eigen::Matrix<double, -1, 1, 0, -1, 1> const, Eigen::Matrix<double, -1, 1, 0, -1, 1> const> const> >, 3, 0>::run(Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, Eigen::Matrix<double, -1, 1, 0, -1, 1> const, Eigen::Matrix<double, -1, 1, 0, -1, 1> const> const> > const&, Eigen::internal::scalar_max_op<double, double> const&)
00000000000af080  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > > > >::~vector()
0000000000310f80  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::Subvector<double>
00000000000af210  w   DF .text	000000000000038e  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoMapVelocityToQDot(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<drake::symbolic::Expression>*) const
0000000000072de0  w   DF .text	0000000000000035  Base        std::_Function_handler<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>::_M_invoke(std::_Any_data const&, drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000072160  w   DF .text	0000000000000008  Base        drake::systems::System<drake::symbolic::Expression>::do_get_num_constraint_equations(drake::systems::Context<drake::symbolic::Expression> const&) const
00000000003126d0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Sp_make_shared_tag
00000000003169c0 u    DO .bss	0000000000000008  Base        guard variable for drake::NiceTypeName::Get<drake::systems::Diagram<double> >()::canonical
00000000000d5830  w   DF .text	0000000000000065  Base        drake::systems::LeafSystem<double>::GetGraphvizOutputPortToken(drake::systems::OutputPort<double> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
0000000000310e60  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000081650  w   DF .text	0000000000000324  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::HasEvents() const
00000000000cc240  w   DF .text	00000000000000e7  Base        drake::systems::BasicVector<drake::symbolic::Expression>::BasicVector(int)
00000000000e1fc0  w   DF .text	00000000000000a1  Base        std::_MakeUniq<drake::systems::ContinuousState<double> >::__single_object std::make_unique<drake::systems::ContinuousState<double>, std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, int, int, int>(std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >&&, int&&, int&&, int&&)
00000000003116a0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>
00000000000b4840  w   DF .text	00000000000001a4  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateCompositeEventCollection() const
0000000000095380  w   DF .text	0000000000000065  Base        std::_Rb_tree<std::pair<drake::systems::System<double> const*, int>, std::pair<drake::systems::System<double> const*, int>, std::_Identity<std::pair<drake::systems::System<double> const*, int> >, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > >::find(std::pair<drake::systems::System<double> const*, int> const&) const
0000000000310d40  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramState<drake::symbolic::Expression>
00000000000f3de0  w   DO .rodata	0000000000000041  Base        typeinfo name for drake::systems::InputPortDescriptor<drake::symbolic::Expression>
000000000008fc50  w   DF .text	0000000000000096  Base        drake::systems::Diagram<double>::~Diagram()
0000000000073460  w   DF .text	000000000000000a  Base        drake::systems::DiagramContinuousState<double>::v_selector(drake::systems::ContinuousState<double>*)
00000000000ee2e0  w   DO .rodata	0000000000000036  Base        typeinfo name for drake::systems::Subvector<drake::symbolic::Expression>
00000000000832d0  w   DF .text	000000000000012f  Base        drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramContext()
000000000007e090  w   DF .text	00000000000001df  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoCalcTimeDerivatives(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression>*) const
00000000000cc390  w   DF .text	0000000000000287  Base        std::_MakeUniq<drake::systems::DiagramState<drake::symbolic::Expression> >::__single_object std::make_unique<drake::systems::DiagramState<drake::symbolic::Expression>, int&>(int&)
00000000000f2140  w   DO .rodata	0000000000000065  Base        typeinfo name for drake::systems::Context<double>& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
0000000000098280  w   DF .text	000000000000025f  Base        void fmt::BasicWriter<char>::write_int<bool, fmt::FormatSpec>(bool, fmt::FormatSpec)
00000000000747a0  w   DF .text	000000000000000f  Base        std::_Sp_counted_ptr_inplace<spdlog::pattern_formatter, std::allocator<spdlog::pattern_formatter>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
00000000000a60e0  w   DF .text	0000000000000046  Base        std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_insert_node(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >*)
0000000000079100  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<double>::DoGetTargetSystemContinuousState(drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*) const
0000000000310c30  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Context<double>& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
0000000000312050  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::pattern_formatter
0000000000314a40  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000003129b0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}
00000000000f0de0  w   DO .rodata	0000000000000066  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::ContinuousState<double> const& (drake::systems::DiagramContinuousState<double>::*)(int) const>
00000000000b09b0  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<double>, std::default_delete<drake::systems::CompositeEventCollection<double> > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<double>, std::default_delete<drake::systems::CompositeEventCollection<double> > > > >::~vector()
00000000003135c0  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::Parameters<double>
0000000000312b00  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
00000000000b9920  w   DF .text	0000000000000021  Base        drake::systems::Value<int>::SetFromOrThrow(drake::systems::AbstractValue const&)
00000000000a9e20  w   DF .text	0000000000000025  Base        std::_Function_handler<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&), drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const&)
00000000000cc780  w   DF .text	000000000000015a  Base        drake::systems::DiagramContext<drake::symbolic::Expression>::MakeState()
00000000000ecf00  w   DO .rodata	000000000000001e  Base        typeinfo name for drake::systems::State<double>& (int)
000000000007bcc0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000084a20  w   DF .text	00000000000000a7  Base        spdlog::async_logger::set_error_handler(std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>)
00000000000ee600  w   DO .rodata	0000000000000062  Base        typeinfo name for drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
000000000008ac80  w   DF .text	0000000000000024  Base        drake::systems::DiagramBuilder<double>::~DiagramBuilder()
0000000000095730  w   DF .text	0000000000000093  Base        std::_MakeUniq<drake::systems::BasicVector<double> >::__single_object std::make_unique<drake::systems::BasicVector<double>, int>(int&&)
0000000000072d50  w   DF .text	0000000000000023  Base        std::_Function_handler<drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression> const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000073f60  w   DF .text	000000000000002a  Base        drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramOutput()
00000000000f1920  w   DO .rodata	0000000000000027  Base        typeinfo name for spdlog::sinks::stderr_sink<std::mutex>
0000000000088480  w   DF .text	00000000000003fe  Base        spdlog::async_logger::~async_logger()
00000000003149d0  w   DO .data.rel.ro	0000000000000038  Base        vtable for drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000f6520  w   DO .rodata	00000000000000a0  Base        typeinfo name for drake::systems::LeafSystem<double>::MakeAllocCallback<drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&)::{lambda()#1}
00000000000af0f0  w   DF .text	0000000000000055  Base        std::_MakeUniq<drake::systems::AbstractValues>::__single_object std::make_unique<drake::systems::AbstractValues, std::vector<drake::systems::AbstractValue*, std::allocator<drake::systems::AbstractValue*> >&>(std::vector<drake::systems::AbstractValue*, std::allocator<drake::systems::AbstractValue*> >&)
000000000008ecc0  w   DF .text	00000000000000d0  Base        std::_Rb_tree_iterator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>&&, std::tuple<>&&)
0000000000071e20  w   DF .text	0000000000000006  Base        drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramOutputPort()
00000000003122b8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::T_formatter
00000000000958e0  w   DF .text	00000000000000e5  Base        std::_Hashtable<drake::systems::WitnessFunction<double> const*, std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, std::allocator<std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > > >, std::__detail::_Select1st, std::equal_to<drake::systems::WitnessFunction<double> const*>, std::hash<drake::systems::WitnessFunction<double> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, false>*)
00000000000718e0  w   DF .text	0000000000000012  Base        drake::systems::Context<double>::set_time(double const&)
000000000007a9c0  w   DF .text	000000000000007a  Base        drake::systems::SystemBase::GetSystemName[abi:cxx11]() const
00000000000bdfc0  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::SystemOutput<double>, std::default_delete<drake::systems::SystemOutput<double> > >, std::allocator<std::unique_ptr<drake::systems::SystemOutput<double>, std::default_delete<drake::systems::SystemOutput<double> > > > >::~vector()
0000000000071ed0  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*), drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*&&)
00000000003115a0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::ContinuousState<drake::symbolic::Expression> const& (drake::systems::DiagramContinuousState<drake::symbolic::Expression>::*)(int) const>
0000000000073780  w   DF .text	000000000000000d  Base        drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_mutable_state()
00000000000744d0  w   DF .text	000000000000000f  Base        spdlog::details::H_formatter::~H_formatter()
00000000000d7ec0  w   DF .text	0000000000000034  Base        drake::systems::Value<drake::systems::BasicVector<double> >::GetNiceTypeName() const
0000000000310de8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000075480  w   DF .text	0000000000000033  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcTimeDerivatives(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000a2c20  w   DF .text	000000000000004c  Base        std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >*)
00000000000be030  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::Context<double>, std::default_delete<drake::systems::Context<double> > >, std::allocator<std::unique_ptr<drake::systems::Context<double>, std::default_delete<drake::systems::Context<double> > > > >::~vector()
00000000000ec900  w   DO .rodata	000000000000008a  Base        typeinfo name for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
000000000008a9e0  w   DF .text	000000000000003a  Base        drake::systems::VectorBase<drake::symbolic::Expression>::CalcInequalityConstraint(Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>*) const
000000000008d920  w   DF .text	0000000000000045  Base        drake::systems::DiscreteValues<double>::~DiscreteValues()
00000000000e3160  w   DF .text	0000000000000115  Base        std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const
00000000000c86c0  w   DF .text	0000000000000345  Base        drake::systems::DiagramContinuousState<drake::symbolic::Expression>::DiagramContinuousState(std::vector<drake::systems::ContinuousState<drake::symbolic::Expression>*, std::allocator<drake::systems::ContinuousState<drake::symbolic::Expression>*> >)
00000000000d55e0  w   DF .text	0000000000000037  Base        drake::systems::Value<drake::systems::BasicVector<double> >::~Value()
0000000000089dd0  w   DF .text	0000000000000090  Base        drake::systems::System<double>::GetMemoryObjectName() const
00000000000f5ee0  w   DO .rodata	0000000000000045  Base        typeinfo name for drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >
0000000000071ff0  w   DF .text	0000000000000006  Base        spdlog::details::p_formatter::~p_formatter()
00000000000b7ae0  w   DF .text	0000000000000144  Base        void std::vector<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > > > >::emplace_back<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > > >(std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >&&)
0000000000313278  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::F_formatter
00000000000d5370  w   DF .text	0000000000000066  Base        drake::systems::LeafSystem<double>::DoCalcDiscreteVariableUpdates(drake::systems::Context<double> const&, std::vector<drake::systems::DiscreteUpdateEvent<double> const*, std::allocator<drake::systems::DiscreteUpdateEvent<double> const*> > const&, drake::systems::DiscreteValues<double>*) const
0000000000092ca0  w   DF .text	00000000000000ea  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcVelocityChangeFromConstraintImpulses(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<double, -1, -1, 0, -1, -1> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&) const
0000000000075250  w   DF .text	0000000000000047  Base        drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::get_subevent_collection(int) const
0000000000073380  w   DF .text	000000000000007b  Base        drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~ContinuousState()
0000000000072790  w   DF .text	000000000000000e  Base        drake::systems::System<drake::symbolic::Expression>::SetRandomParameters(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::Parameters<drake::symbolic::Expression>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
00000000000c86c0  w   DF .text	0000000000000345  Base        drake::systems::DiagramContinuousState<drake::symbolic::Expression>::DiagramContinuousState(std::vector<drake::systems::ContinuousState<drake::symbolic::Expression>*, std::allocator<drake::systems::ContinuousState<drake::symbolic::Expression>*> >)
00000000000ef920  w   DO .rodata	0000000000000037  Base        typeinfo name for drake::systems::State<double> const& (drake::systems::DiagramState<double>::*)(int) const
0000000000072230  w   DF .text	000000000000002f  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::Clear()
0000000000316bc0 u    DO .bss	0000000000000020  Base        drake::systems::internal::SystemMessageInterface::no_name[abi:cxx11]()::dummy
0000000000072210  w   DF .text	0000000000000006  Base        std::_Sp_counted_ptr_inplace<spdlog::sinks::stderr_sink<std::mutex>, std::allocator<spdlog::sinks::stderr_sink<std::mutex> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
00000000000ece40  w   DO .rodata	0000000000000071  Base        typeinfo name for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (int)
00000000003158b8  w   DO .data.rel.ro	0000000000000038  Base        vtable for drake::systems::DiscreteUpdateEvent<double>
0000000000074690  w   DF .text	0000000000000024  Base        drake::systems::ContinuousState<double>::~ContinuousState()
0000000000310ca0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > ()
0000000000312670  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >
00000000000a1620  w   DF .text	00000000000000f1  Base        void std::vector<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::emplace_back<drake::systems::System<drake::symbolic::Expression> const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&>(drake::systems::System<drake::symbolic::Expression> const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&)
00000000000742d0  w   DF .text	0000000000000038  Base        drake::systems::Value<int>::Clone() const
00000000000720c0  w   DF .text	0000000000000006  Base        spdlog::details::C_formatter::~C_formatter()
00000000000b6250  w   DF .text	0000000000000148  Base        drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiscreteValues(std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> > const&)
0000000000312d28  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const
000000000009e250  w   DF .text	00000000000000ee  Base        std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> >, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, drake::systems::System<double> const* const&)
00000000000dc0e0  w   DF .text	00000000000005ec  Base        drake::systems::LeafSystem<double>::LeafSystem(drake::systems::SystemScalarConverter)
00000000000a27e0  w   DF .text	0000000000000109  Base        std::vector<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
00000000000891f0  w   DF .text	00000000000001d5  Base        spdlog::pattern_formatter::compile_pattern(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000e6f30  w   DF .text	0000000000000821  Base        Eigen::Matrix<Eigen::Matrix<double, 6, 6, 0, 6, 6>::Scalar, 6, 6, 0, 6, 6> transformSpatialInertia<Eigen::Matrix<double, 6, 6, 0, 6, 6> >(Eigen::Transform<Eigen::Matrix<double, 6, 6, 0, 6, 6>::Scalar, 3, 1, 0> const&, Eigen::MatrixBase<Eigen::Matrix<double, 6, 6, 0, 6, 6> > const&)
000000000008c120  w   DF .text	000000000000003e  Base        spdlog::details::m_formatter::format(spdlog::details::log_msg&, tm const&)
000000000009b0e0  w   DF .text	0000000000000220  Base        drake::systems::Diagram<double>::NamesAreUniqueAndNonEmpty() const
0000000000072940  w   DF .text	0000000000000012  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetTargetSystemState(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
0000000000316a20 u    DO .bss	0000000000000020  Base        drake::NiceTypeName::Get<drake::systems::BasicVector<drake::symbolic::Expression> >()::canonical[abi:cxx11]
00000000000cb180  w   DF .text	0000000000000122  Base        drake::systems::DiagramContext<double>::MakeState()
00000000000f1d20  w   DO .rodata	0000000000000029  Base        typeinfo name for drake::systems::InputPortDescriptor<double>
00000000000789f0  w   DF .text	0000000000000187  Base        drake::systems::Diagram<double>::DispatchPublishHandler(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::PublishEvent<double> > const&) const
00000000000a5ff0  w   DF .text	0000000000000046  Base        std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> > >::_M_insert_node(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >*)
00000000000a3220  w   DF .text	00000000000002da  Base        std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > drake::systems::Diagram<drake::symbolic::Expression>::AllocateForcedEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >(std::function<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression> const*)>) const
000000000007a6b0  w   DF .text	0000000000000032  Base        drake::systems::InputPortDescriptor<drake::symbolic::Expression>::~InputPortDescriptor()
00000000000d9850  w   DF .text	0000000000000282  Base        drake::systems::LeafOutputPort<double>::set_calculation_function(std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>)::{lambda(drake::systems::Context<double> const&, drake::systems::AbstractValue*)#1}::operator()(drake::systems::Context<double> const&, drake::systems::AbstractValue*) const
0000000000073730  w   DF .text	000000000000000d  Base        drake::systems::DiagramContext<drake::symbolic::Expression>::get_state() const
0000000000084940  w   DF .text	000000000000001f  Base        spdlog::async_logger::error_handler[abi:cxx11]()
0000000000086940  w   DF .text	0000000000000039  Base        spdlog::details::level_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000000008 u    D  .tbss	0000000000000008  Base        spdlog::details::os::thread_id()::tid
000000000008a950  w   DF .text	0000000000000035  Base        drake::systems::BasicVector<drake::symbolic::Expression>::~BasicVector()
00000000000a1a20  w   DF .text	000000000000004c  Base        std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >*)
00000000000f1ae0  w   DO .rodata	0000000000000033  Base        typeinfo name for drake::systems::System<drake::symbolic::Expression>
0000000000312040  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for spdlog::formatter
000000000007b370  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*), drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000a0130  w   DF .text	000000000000034c  Base        drake::systems::IntegratorBase<double>::StepOnceErrorControlledAtMost(double const&)
0000000000311b00  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000313de0  w   DO .data.rel.ro	0000000000000070  Base        vtable for drake::systems::DiagramContext<double>
0000000000089980  w   DF .text	0000000000000033  Base        drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::CalcInequalityConstraint(Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>*) const
00000000000936b0  w   DF .text	0000000000000028  Base        drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::set_time(Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > const&)
00000000000e34b0  w   DF .text	0000000000000182  Base        void std::vector<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >, std::allocator<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > > >::_M_emplace_back_aux<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > >(std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >&&)
0000000000310e20  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000082310  w   DF .text	0000000000000324  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::HasEvents() const
00000000000af930  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
0000000000072a70  w   DF .text	000000000000004f  Base        drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Parameters()
0000000000096bb0  w   DF .text	0000000000000167  Base        fmt::BasicFormatter<char, fmt::ArgFormatter<char> >::parse_arg_name(char const*&)
0000000000312ca0  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const
00000000000a2c70  w   DF .text	0000000000000220  Base        drake::systems::Diagram<drake::symbolic::Expression>::NamesAreUniqueAndNonEmpty() const
0000000000072a00  w   DF .text	0000000000000006  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetPerStepEvents(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000743a0  w   DF .text	000000000000000f  Base        fmt::BasicWriter<char>::~BasicWriter()
000000000007dcb0  w   DF .text	00000000000001ed  Base        drake::systems::Diagram<drake::symbolic::Expression>::DispatchPublishHandler(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > const&) const
0000000000087170  w   DF .text	0000000000000241  Base        drake::systems::VectorBase<drake::symbolic::Expression>::SetFromVector(Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)
00000000000c1640  w   DF .text	00000000000000ae  Base        drake::systems::internal::DiagramOutput<double>::DoClone() const
00000000000d6340  w   DF .text	00000000000000c7  Base        drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::~LeafEventCollection()
0000000000310f68  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramState<double>
00000000000978b0  w   DF .text	000000000000031d  Base        void fmt::BasicWriter<char>::write_int<unsigned int, fmt::FormatSpec>(unsigned int, fmt::FormatSpec)
00000000000f08c0  w   DO .rodata	00000000000000a4  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>
000000000008cbb0  w   DF .text	0000000000000125  Base        spdlog::details::t_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000086bd0  w   DF .text	0000000000000083  Base        drake::symbolic::Expression::Expression()
0000000000315838  w   DO .data.rel.ro	0000000000000040  Base        vtable for drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >
0000000000071710  w   DF .text	000000000000001a  Base        std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy()
0000000000072130  w   DF .text	0000000000000006  Base        spdlog::details::level_formatter::~level_formatter()
00000000000dfbf0  w   DF .text	00000000000000eb  Base        std::_Rb_tree<drake::symbolic::Formula, drake::symbolic::Formula, std::_Identity<drake::symbolic::Formula>, std::less<drake::symbolic::Formula>, std::allocator<drake::symbolic::Formula> >::_M_erase(std::_Rb_tree_node<drake::symbolic::Formula>*)
00000000000f1770  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::t_formatter
00000000000d5560  w   DF .text	000000000000000f  Base        std::_Sp_counted_deleter<drake::systems::AbstractValue*, std::default_delete<drake::systems::AbstractValue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()
00000000000d8510  w   DF .text	000000000000005e  Base        std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)>::function(std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)> const&)
00000000000ba750  w   DF .text	00000000000002d4  Base        drake::systems::BasicVector<drake::symbolic::Expression>::set_value(Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)
00000000000d5250  w   DF .text	000000000000000d  Base        drake::systems::LeafContext<double>::get_state() const
00000000000de4f0  w   DF .text	00000000000000e4  Base        drake::systems::LeafSystem<double>::DoAllocateInputVector(drake::systems::InputPortDescriptor<double> const&) const
0000000000074660  w   DF .text	0000000000000024  Base        drake::systems::PublishEvent<double>::~PublishEvent()
000000000007b7e0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000df940  w   DF .text	00000000000000cc  Base        drake::systems::ContinuousState<double>::ContinuousState()
000000000007c020  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramCompositeEventCollection<double>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<double>& (drake::systems::DiagramCompositeEventCollection<double>::*)(int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000084f60  w   DF .text	000000000000003c  Base        stx::optional<double>::operator=(stx::optional<double> const&)
00000000000720d0  w   DF .text	0000000000000006  Base        spdlog::details::c_formatter::~c_formatter()
0000000000312828  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > (drake::systems::System<double>::*)() const
00000000003117b8  w   DO .data.rel.ro	0000000000000020  Base        typeinfo for drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (*)(drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
00000000000f1060  w   DO .rodata	0000000000000058  Base        typeinfo name for drake::systems::VectorBase<drake::symbolic::Expression>& (*)(drake::systems::ContinuousState<drake::symbolic::Expression>*)
00000000000de2d0  w   DF .text	000000000000019f  Base        drake::systems::LeafSystem<double>::DoValidateAllocatedContext(drake::systems::ContextBase const&) const
00000000003114b0  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*) const
00000000000ed7a0  w   DO .rodata	00000000000000a2  Base        typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > ()
00000000003119c0  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000086870  w   DF .text	0000000000000030  Base        spdlog::details::b_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000c54a0  w   DF .text	0000000000000201  Base        drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiagramDiscreteValues(std::vector<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >)
0000000000091c40  w   DF .text	0000000000000b66  Base        drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoPlusEqScaled(std::initializer_list<std::pair<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&> > const&)
00000000000ed640  w   DO .rodata	000000000000004e  Base        typeinfo name for drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*)
00000000000746f0  w   DF .text	000000000000000f  Base        drake::systems::Subvector<double>::~Subvector()
00000000000da2c0  w   DF .text	00000000000003fc  Base        drake::systems::LeafSystem<double>::CreateAbstractLeafOutputPort(std::function<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > ()>, std::function<void (drake::systems::Context<double> const&, drake::systems::AbstractValue*)>)
00000000000728b0  w   DF .text	0000000000000006  Base        drake::systems::System<drake::symbolic::Expression>::DoGetInitializationEvents(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const
0000000000072400  w   DF .text	000000000000000a  Base        drake::systems::System<double>::DoCalcPotentialEnergy(drake::systems::Context<double> const&) const
0000000000312318  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::i_formatter
000000000008cce0  w   DF .text	00000000000000ac  Base        Eigen::PlainObjectBase<Eigen::Matrix<double, -1, 1, 0, -1, 1> >::resize(long, long)
00000000000cc620  w   DF .text	0000000000000160  Base        drake::systems::DiagramContext<drake::symbolic::Expression>::DoCloneState() const
000000000007a520  w   DF .text	000000000000002d  Base        std::_Sp_counted_ptr_inplace<spdlog::sinks::stderr_sink<std::mutex>, std::allocator<spdlog::sinks::stderr_sink<std::mutex> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
00000000000c1390  w   DF .text	00000000000002a5  Base        drake::systems::Diagram<double>::AllocateOutput(drake::systems::Context<double> const&) const
0000000000311718  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::State<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double> const*) const>
00000000003126a0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::WitnessTriggeredEventData<double>
000000000009e340  w   DF .text	0000000000001368  Base        drake::systems::Diagram<double>::Initialize(std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> >)
0000000000311660  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>
000000000007b660  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramState<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<drake::symbolic::Expression> const& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000314bf0  w   DO .data.rel.ro	0000000000000040  Base        vtable for drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >
00000000000f37c0  w   DO .rodata	000000000000005e  Base        typeinfo name for drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000e3f70  w   DF .text	00000000000002fa  Base        std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)
00000000000d52a0  w   DF .text	000000000000000d  Base        drake::systems::LeafContext<double>::get_mutable_parameters()
000000000008fbb0  w   DF .text	0000000000000089  Base        drake::systems::Diagram<double>::~Diagram()
00000000003119e0  w   DO .data.rel.ro	0000000000000040  Base        vtable for drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000003126b8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::Value<drake::systems::BasicVector<drake::symbolic::Expression> >
00000000000d76a0  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::AbstractValue const, std::default_delete<drake::systems::AbstractValue const> >, std::allocator<std::unique_ptr<drake::systems::AbstractValue const, std::default_delete<drake::systems::AbstractValue const> > > >::~vector()
00000000000a4fe0  w   DF .text	0000000000000046  Base        std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_insert_node(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >*)
0000000000310a58  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::ContinuousState<double> const* (drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*)
00000000000723b0  w   DF .text	0000000000000006  Base        std::_Sp_counted_ptr_inplace<spdlog::pattern_formatter, std::allocator<spdlog::pattern_formatter>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
00000000000ecf60  w   DO .rodata	000000000000001f  Base        typeinfo name for drake::systems::State<double> const& (int)
0000000000075390  w   DF .text	0000000000000047  Base        drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_subevent_collection(int) const
00000000000793c0  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<double>::DoGetMutableTargetSystemCompositeEventCollection(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*) const
0000000000084870  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >, std::allocator<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > > >::~vector()
0000000000316738 g    DO .data	0000000000000001  Base        fLB::FLAGS_novisualize_frames
0000000000071f50  w   DF .text	0000000000000006  Base        spdlog::details::full_formatter::~full_formatter()
00000000000744b0  w   DF .text	000000000000000f  Base        spdlog::details::M_formatter::~M_formatter()
00000000000b4f60  w   DF .text	00000000000001fb  Base        drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Parameters()
00000000000d4fb0  w   DF .text	0000000000000067  Base        drake::systems::DiscreteUpdateEvent<double>::~DiscreteUpdateEvent()
000000000008bcd0  w   DF .text	00000000000000b9  Base        spdlog::details::i_formatter::format(spdlog::details::log_msg&, tm const&)
000000000008ab90  w   DF .text	00000000000000e5  Base        drake::systems::DiagramBuilder<double>::~DiagramBuilder()
00000000000ecf80  w   DO .rodata	000000000000003d  Base        typeinfo name for drake::systems::ContinuousState<double> const* (drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*)
00000000000e4360  w   DF .text	000000000000002e  Base        void std::vector<float, std::allocator<float> >::emplace_back<float>(float&&)
0000000000088120  w   DF .text	0000000000000355  Base        spdlog::async_logger::~async_logger()
00000000000f4160  w   DO .rodata	00000000000000bc  Base        typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const
0000000000314d50  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::LeafOutputPort<double>
00000000003169a0 u    DO .bss	0000000000000020  Base        drake::NiceTypeName::Get<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >()::canonical[abi:cxx11]
00000000000bd010  w   DF .text	0000000000000722  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DispatchUnrestrictedUpdateHandler(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000864e0  w   DF .text	0000000000000184  Base        drake::systems::RigidBodyPlant<double>::torque_output_port() const
00000000000e2d60  w   DF .text	0000000000000022  Base        std::_Sp_counted_ptr_inplace<RigidBodyFrame<double>, Eigen::aligned_allocator<RigidBodyFrame<double> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
00000000003109c8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (int)
00000000003138a8  w   DO .data.rel.ro	00000000000001c8  Base        vtable for drake::systems::System<drake::symbolic::Expression>
00000000000b7d10  w   DF .text	00000000000003a7  Base        drake::systems::DiscreteValues<double>::DoClone() const
00000000000ba4d0  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::SystemOutput<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemOutput<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::SystemOutput<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemOutput<drake::symbolic::Expression> > > > >::~vector()
0000000000072070  w   DF .text	0000000000000006  Base        spdlog::details::H_formatter::~H_formatter()
0000000000311fa8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for fmt::SystemError
00000000000d4f10  w   DF .text	0000000000000018  Base        drake::systems::LeafCompositeEventCollection<double>::~LeafCompositeEventCollection()
0000000000311320  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
00000000000c0100  w   DF .text	00000000000000b6  Base        std::_Rb_tree<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::_Identity<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::less<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::equal_range(std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&)
000000000007ec10  w   DF .text	000000000000007d  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::~DiagramEventCollection()
0000000000086f60  w   DF .text	0000000000000209  Base        drake::systems::VectorBase<drake::symbolic::Expression>::SetZero()
000000000008d8d0  w   DF .text	0000000000000047  Base        drake::systems::DiscreteValues<double>::~DiscreteValues()
000000000007ac70  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<double> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > (drake::systems::System<double>::*)() const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
000000000008d860  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > > >::~vector()
00000000000edfe0  w   DO .rodata	0000000000000046  Base        typeinfo name for drake::systems::CompositeEventCollection<drake::symbolic::Expression>
00000000000d6700  w   DF .text	0000000000000351  Base        drake::systems::LeafSystem<double>::GetGraphvizFragment(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
0000000000076a70  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoGetTargetSystemState(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*) const
00000000000a2690  w   DF .text	00000000000000a6  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateForcedUnrestrictedUpdateEventCollection() const
0000000000082c10  w   DF .text	0000000000000169  Base        spdlog::details::E_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000072ac0  w   DF .text	000000000000004f  Base        drake::systems::Parameters<double>::~Parameters()
0000000000314348  w   DO .data.rel.ro	0000000000000040  Base        vtable for drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >
0000000000092d90  w   DF .text	00000000000000c6  Base        drake::systems::System<double>::DoCalcVelocityChangeFromConstraintImpulses(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, -1, 0, -1, -1> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&) const
0000000000311398  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::State<double>& (drake::systems::DiagramState<double>::*)(int)
00000000000be0a0  w   DF .text	000000000000004c  Base        std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::_Identity<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >*)
0000000000071800  w   DF .text	000000000000007b  Base        drake::systems::ContinuousState<double>::~ContinuousState()
0000000000314a60  w   DO .data.rel.ro	0000000000000038  Base        vtable for drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000f1350  w   DO .rodata	0000000000000014  Base        typeinfo name for spdlog::formatter
0000000000072a20  w   DF .text	000000000000004f  Base        drake::systems::Parameters<drake::symbolic::Expression>::~Parameters()
000000000008c6f0  w   DF .text	00000000000000e4  Base        char* fmt::BasicWriter<char>::prepare_int_buffer<fmt::IntFormatSpec<unsigned int, fmt::TypeSpec<(char)0>, char> >(unsigned int, fmt::IntFormatSpec<unsigned int, fmt::TypeSpec<(char)0>, char> const&, char const*, unsigned int)
0000000000312cd8  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const
000000000009c8a0  w   DF .text	0000000000000153  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::Diagram<double> >()
00000000000a3170  w   DF .text	00000000000000a6  Base        drake::systems::Diagram<drake::symbolic::Expression>::AllocateForcedPublishEventCollection() const
00000000000a62a0  w   DF .text	000000000000008d  Base        std::_Rb_tree_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<double> const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<double> const* const&>&&, std::tuple<>&&)
00000000000efbe0  w   DO .rodata	0000000000000039  Base        typeinfo name for drake::systems::Supervector<drake::symbolic::Expression>
000000000009d540  w   DF .text	000000000000005e  Base        std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)>::function(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)
00000000000ee700  w   DO .rodata	0000000000000058  Base        typeinfo name for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000072f70  w   DF .text	0000000000000023  Base        std::_Function_handler<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)>::_M_invoke(std::_Any_data const&, drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
000000000007aad0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramContext<double>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<double>& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000310a08  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (int)
00000000000904c0  w   DF .text	000000000000000a  Base        drake::systems::BasicVector<double>::SetFromVector(Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)
0000000000083f60  w   DF .text	0000000000000181  Base        spdlog::details::async_log_helper::flush(bool)
00000000000f00e0  w   DO .rodata	0000000000000091  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int)>
000000000009e1d0  w   DF .text	0000000000000080  Base        std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> >, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > > >::_M_get_insert_unique_pos(drake::systems::System<double> const* const&)
00000000000dec10  w   DF .text	0000000000000014  Base        drake::systems::LeafSystem<double>::DoGetPerStepEvents(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*) const
00000000000f1490  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::a_formatter
00000000000c54a0  w   DF .text	0000000000000201  Base        drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiagramDiscreteValues(std::vector<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >)
00000000000745b0  w   DF .text	000000000000000f  Base        drake::systems::PeriodicEventData::~PeriodicEventData()
0000000000071940  w   DF .text	0000000000000035  Base        std::_Function_handler<drake::systems::Context<double>& (drake::systems::DiagramContext<double>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<double>& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>::_M_invoke(std::_Any_data const&, drake::systems::DiagramContext<double>*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000310ab8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::VectorBase<drake::symbolic::Expression>& (drake::systems::ContinuousState<drake::symbolic::Expression>*)
00000000000f1610  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::M_formatter
00000000000d7320  w   DF .text	00000000000002b4  Base        drake::systems::System<double>::DeclareInputPort(drake::systems::PortDataType, int, stx::optional<drake::RandomDistribution>)
0000000000312a28  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::Context<double> const& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const
00000000000f0060  w   DO .rodata	000000000000007f  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const>
000000000008acb0  w   DF .text	0000000000000144  Base        void std::vector<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > >, std::allocator<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > > >::emplace_back<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > >(std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > >&&)
000000000007a690  w   DF .text	0000000000000018  Base        drake::systems::InputPortDescriptor<drake::symbolic::Expression>::~InputPortDescriptor()
000000000007f410  w   DF .text	0000000000000083  Base        std::_Sp_counted_ptr_inplace<spdlog::pattern_formatter, std::allocator<spdlog::pattern_formatter>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
00000000000f3ca0  w   DO .rodata	0000000000000086  Base        typeinfo name for drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000072220  w   DF .text	0000000000000006  Base        std::_Sp_counted_ptr_inplace<spdlog::sinks::stderr_sink<std::mutex>, std::allocator<spdlog::sinks::stderr_sink<std::mutex> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
000000000007b9c0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*), drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000311570  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*) const>
0000000000077770  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetMutableTargetSystemContext(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000089d00  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > >, std::allocator<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > > >::~vector()
00000000000d8340  w   DF .text	0000000000000141  Base        drake::systems::LeafCompositeEventCollection<double>::LeafCompositeEventCollection()
00000000000b0ba0  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > > > >::~vector()
00000000000aec90  w   DF .text	00000000000001f9  Base        drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalc(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::AbstractValue*) const
0000000000071650  w   DF .text	0000000000000006  Base        fmt::BasicWriter<char>::~BasicWriter()
00000000000b49f0  w   DF .text	0000000000000144  Base        void std::vector<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::emplace_back<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > >(std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >&&)
00000000000f1370  w   DO .rodata	000000000000001d  Base        typeinfo name for spdlog::pattern_formatter
00000000000dac70  w   DF .text	000000000000014e  Base        drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >::MakeForcedEventCollection()
0000000000316740 g    DO .data	0000000000000008  Base        fLD::FLAGS_nosimulation_sec
00000000003132c8  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::p_formatter
00000000000f12c0  w   DO .rodata	000000000000002c  Base        typeinfo name for fmt::internal::MemoryBuffer<char, 500ul, std::allocator<char> >
0000000000077cf0  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetTargetSystemState(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
00000000000d65b0  w   DF .text	00000000000000c9  Base        drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::~LeafEventCollection()
00000000000f0b00  w   DO .rodata	00000000000000b8  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>
000000000008d580  w   DF .text	000000000000003f  Base        std::_MakeUniq<drake::systems::Diagram<double>::Blueprint>::__single_object std::make_unique<drake::systems::Diagram<double>::Blueprint>()
00000000000c16f0  w   DF .text	00000000000000ae  Base        drake::systems::internal::DiagramOutput<drake::symbolic::Expression>::DoClone() const
00000000000b6250  w   DF .text	0000000000000148  Base        drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiscreteValues(std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> > const&)
0000000000313188  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::H_formatter
00000000000b80c0  w   DF .text	00000000000001fb  Base        drake::systems::Parameters<double>::Parameters()
00000000000dcc40  w   DF .text	0000000000000026  Base        drake::systems::LeafSystem<double>::AllocateForcedUnrestrictedUpdateEventCollection() const
00000000000d5130  w   DF .text	0000000000000006  Base        std::_Sp_counted_deleter<drake::systems::AbstractValue*, std::default_delete<drake::systems::AbstractValue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()
00000000000841b0  w   DF .text	000000000000009f  Base        drake::systems::VectorBase<double>::CopyToVector() const
00000000000e23e0  w   DF .text	00000000000000cd  Base        drake::systems::LeafSystem<double>::AllocateContinuousState() const
0000000000071670  w   DF .text	0000000000000067  Base        drake::systems::PublishEvent<double>::~PublishEvent()
000000000007d4e0  w   DF .text	00000000000000fd  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::DoMerge(drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > const&)
000000000008dd50  w   DF .text	00000000000005b3  Base        drake::systems::Simulator<double>::IsolateWitnessTriggers(std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*)
0000000000310b68  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*)
00000000000b4b40  w   DF .text	0000000000000144  Base        void std::vector<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::emplace_back<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > >(std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >&&)
000000000007b8a0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
000000000007a130  w   DF .text	0000000000000088  Base        drake::systems::Diagram<double>::GetGraphvizOutputPortToken(drake::systems::OutputPort<double> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000b2620  w   DF .text	00000000000001fb  Base        drake::systems::Parameters<drake::symbolic::Expression>::Parameters()
00000000000f2940  w   DO .rodata	0000000000000034  Base        typeinfo name for drake::systems::Context<drake::symbolic::Expression>
00000000000d5020  w   DF .text	000000000000006f  Base        drake::systems::LeafOutputPort<double>::~LeafOutputPort()
00000000000ca160  w   DF .text	0000000000000272  Base        drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoClone() const
0000000000074cd0  w   DF .text	000000000000002a  Base        std::_Function_handler<void* (void const*), drake::systems::SystemScalarConverter::Add<double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}>::_M_invoke(std::_Any_data const&, void const*&&)
00000000000774b0  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoGetTargetSystemCompositeEventCollection(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*) const
00000000000ee200  w   DO .rodata	000000000000003a  Base        typeinfo name for drake::systems::DiagramState<drake::symbolic::Expression>
0000000000074d00  w   DF .text	000000000000002a  Base        std::_Function_handler<void* (void const*), drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}>::_M_invoke(std::_Any_data const&, void const*&&)
000000000007db90  w   DF .text	0000000000000085  Base        drake::systems::DiagramState<double>::~DiagramState()
000000000008a1e0  w   DF .text	00000000000000a7  Base        char* fmt::BasicWriter<char>::write_unsigned_decimal<unsigned int>(unsigned int, unsigned int)
00000000000d7820  w   DF .text	0000000000000024  Base        drake::systems::LeafSystem<double>::~LeafSystem()
00000000000ef0e0  w   DO .rodata	0000000000000078  Base        typeinfo name for drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int) const
0000000000312cc8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Diagram<drake::symbolic::Expression>::Initialize(std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> >)::{lambda(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>*)#1}
00000000003134d0  w   DO .data.rel.ro	0000000000000058  Base        vtable for spdlog::logger
00000000000c5f40  w   DF .text	0000000000000141  Base        drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>::DoClone() const
000000000007f290  w   DF .text	0000000000000073  Base        drake::systems::DiagramOutputPort<drake::symbolic::Expression>::DoEval(drake::systems::Context<drake::symbolic::Expression> const&) const
0000000000072440  w   DF .text	0000000000000006  Base        drake::systems::Subvector<double>::~Subvector()
00000000000a92b0  w   DF .text	00000000000000ee  Base        std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >, drake::systems::System<drake::symbolic::Expression> const* const&)
00000000000a64e0  w   DF .text	00000000000000d0  Base        std::_Rb_tree_iterator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > std::_Rb_tree<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&>&&, std::tuple<>&&)
00000000000748b0  w   DF .text	0000000000000024  Base        drake::systems::State<drake::symbolic::Expression>::~State()
000000000008e940  w   DF .text	00000000000001c2  Base        void std::vector<std::pair<drake::systems::PeriodicEventData, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, std::allocator<std::pair<drake::systems::PeriodicEventData, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > > > >::_M_emplace_back_aux<std::pair<drake::systems::PeriodicEventData, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > > >(std::pair<drake::systems::PeriodicEventData, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >&&)
00000000000720b0  w   DF .text	0000000000000006  Base        spdlog::details::D_formatter::~D_formatter()
0000000000311f78  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for fmt::FormatError
0000000000312500  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::VectorBase<drake::symbolic::Expression>
00000000000a9ed0  w   DF .text	00000000000000ee  Base        std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, drake::systems::System<drake::symbolic::Expression> const* const&)
0000000000310eb0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000310f38  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramContinuousState<double>
0000000000314240  w   DO .data.rel.ro	0000000000000028  Base        vtable for drake::systems::DiscreteValues<double>
0000000000311738  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::ContinuousState<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*) const>
00000000000f0200  w   DO .rodata	0000000000000093  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int) const>
00000000000a4090  w   DF .text	0000000000000388  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_output_port(int) const
000000000007ec90  w   DF .text	000000000000007d  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::~DiagramEventCollection()
00000000000e3030  w   DF .text	00000000000000b7  Base        KinematicsCache<double>::~KinematicsCache()
00000000000ed260  w   DO .rodata	000000000000004d  Base        typeinfo name for drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*)
00000000000868a0  w   DF .text	0000000000000030  Base        spdlog::details::A_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000d58a0  w   DF .text	0000000000000065  Base        drake::systems::LeafSystem<double>::GetGraphvizInputPortToken(drake::systems::InputPortDescriptor<double> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000f25a0  w   DO .rodata	000000000000009f  Base        typeinfo name for drake::systems::Diagram<double>::Initialize(std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> >)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}
00000000000efa80  w   DO .rodata	000000000000005c  Base        typeinfo name for drake::systems::CompositeEventCollection<double>& (drake::systems::DiagramCompositeEventCollection<double>::*)(int)
0000000000071fb0  w   DF .text	0000000000000006  Base        spdlog::details::z_formatter::~z_formatter()
000000000007e890  w   DF .text	000000000000007d  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::~DiagramEventCollection()
00000000000be880  w   DF .text	0000000000000870  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoHasDirectFeedthrough(int, int) const
00000000003125f8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Event<double>
0000000000311c98  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::DiagramCompositeEventCollection<double>
00000000000ed3e0  w   DO .rodata	000000000000004c  Base        typeinfo name for drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*)
00000000000f1260  w   DO .rodata	0000000000000014  Base        typeinfo name for fmt::SystemError
0000000000312e28  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::Context<drake::symbolic::Expression> const& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const
00000000000f2040  w   DO .rodata	000000000000002f  Base        typeinfo name for drake::systems::WitnessTriggeredEventData<double>
0000000000316a60 u    DO .bss	0000000000000020  Base        drake::NiceTypeName::Get<drake::systems::Context<double> >()::canonical[abi:cxx11]
00000000000f26c0  w   DO .rodata	000000000000007c  Base        typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > (drake::systems::System<double>::*)() const
000000000008fe60  w   DF .text	0000000000000153  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::Context<double> >()
00000000000ae7b0  w   DF .text	0000000000000025  Base        std::_Function_handler<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&), drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)
0000000000072050  w   DF .text	0000000000000006  Base        spdlog::details::M_formatter::~M_formatter()
00000000000f4e20  w   DO .rodata	000000000000006e  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*) const>
00000000003122e8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::t_formatter
0000000000093810  w   DF .text	000000000000010d  Base        drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::CopyToVector() const
00000000000edb20  w   DO .rodata	000000000000007d  Base        typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > ()
00000000000aaba0  w   DF .text	0000000000001442  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Initialize(std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> >)
00000000000d54e0  w   DF .text	000000000000000a  Base        std::_Sp_counted_deleter<drake::systems::AbstractValue*, std::default_delete<drake::systems::AbstractValue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
0000000000311818  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>
0000000000314ed8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for std::_Sp_counted_deleter<drake::systems::AbstractValue*, std::default_delete<drake::systems::AbstractValue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>
0000000000311ba0  w   DO .data.rel.ro	0000000000000078  Base        vtable for drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000072800  w   DF .text	0000000000000012  Base        drake::systems::System<drake::symbolic::Expression>::DoGetTargetSystemContinuousState(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*) const
00000000000c3dc0  w   DF .text	00000000000001ef  Base        std::_Rb_tree<drake::systems::PeriodicEventData, std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > >, std::_Select1st<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > > >, drake::systems::PeriodicEventDataComparator, std::allocator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > > >, drake::systems::PeriodicEventData const&)
0000000000071740  w   DF .text	0000000000000060  Base        drake::systems::CompositeEventCollection<double>::~CompositeEventCollection()
0000000000084b70  w   DF .text	00000000000000ae  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000312448  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::EventData
0000000000310c90  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Context<double> const& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000000dcf40  w   DF .text	0000000000000137  Base        void std::vector<std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > >, std::allocator<std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > > > >::_M_emplace_back_aux<std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > > >(std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > >&&)
000000000007ae40  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramContext<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<double> const& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000f17f0  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::v_formatter
0000000000310dc0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000f42e0  w   DO .rodata	00000000000000bb  Base        typeinfo name for drake::systems::Diagram<drake::symbolic::Expression>::Initialize(std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> >)::{lambda(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>*)#1}
00000000000ca700  w   DF .text	0000000000000345  Base        drake::systems::DiagramContinuousState<double>::DiagramContinuousState(std::vector<drake::systems::ContinuousState<double>*, std::allocator<drake::systems::ContinuousState<double>*> >)
00000000000f14d0  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::b_formatter
0000000000072730  w   DF .text	0000000000000006  Base        drake::systems::System<double>::GetGraphvizFragment(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
0000000000316980 u    DO .bss	0000000000000008  Base        guard variable for drake::NiceTypeName::Get<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >()::canonical
00000000000aef00  w   DF .text	0000000000000032  Base        drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::~DiagramCompositeEventCollection()
0000000000073b90  w   DF .text	000000000000007b  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::~DiagramEventCollection()
000000000008a7d0  w   DF .text	0000000000000089  Base        Eigen::DenseStorage<double, -1, -1, 1, 0>::DenseStorage(Eigen::DenseStorage<double, -1, -1, 1, 0> const&)
0000000000074fd0  w   DF .text	000000000000006e  Base        drake::systems::DiagramContext<drake::symbolic::Expression>::GetMutableSubsystemContext(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
0000000000312b20  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >
0000000000073630  w   DF .text	000000000000001c  Base        drake::systems::Supervector<double>::size() const
00000000000f1240  w   DO .rodata	000000000000001e  Base        typeinfo name for fmt::internal::RuntimeError
00000000000db660  w   DF .text	00000000000000cb  Base        void std::vector<drake::systems::UnrestrictedUpdateEvent<double> const*, std::allocator<drake::systems::UnrestrictedUpdateEvent<double> const*> >::emplace_back<drake::systems::UnrestrictedUpdateEvent<double> const*>(drake::systems::UnrestrictedUpdateEvent<double> const*&&)
00000000000744e0  w   DF .text	000000000000000f  Base        spdlog::details::d_formatter::~d_formatter()
0000000000097020  w   DF .text	000000000000002a  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fmt::format<char>(fmt::BasicCStringRef<char>, char const&)
00000000000a3bf0  w   DF .text	0000000000000171  Base        void std::vector<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > > >::emplace_back<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > >(std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > >&&)
000000000007c860  w   DF .text	0000000000000069  Base        drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetAtIndex(int)
00000000000867c0  w   DF .text	000000000000001f  Base        spdlog::details::aggregate_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000b1460  w   DF .text	0000000000000046  Base        drake::systems::Context<drake::symbolic::Expression>::~Context()
00000000003119a0  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
000000000009c0e0  w   DF .text	00000000000007b5  Base        drake::systems::DiagramBuilder<double>::ThrowIfAlgebraicLoopsExist() const
000000000009d810  w   DF .text	000000000000013c  Base        void drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)
0000000000313670  w   DO .data.rel.ro	0000000000000040  Base        vtable for drake::systems::Value<int>
0000000000313430  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::ch_formatter
00000000000ddd50  w   DF .text	0000000000000080  Base        drake::systems::UnrestrictedUpdateEvent<double>::DoClone() const
0000000000310a48  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::State<double> const& (int)
00000000000a7c10  w   DF .text	0000000000000080  Base        std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> > >::_M_get_insert_unique_pos(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&)
00000000000c17a0  w   DF .text	00000000000000ae  Base        drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoClone() const
00000000003114d8  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::CompositeEventCollection<double> const& (drake::systems::DiagramCompositeEventCollection<double>::*)(int) const
0000000000096ef0  w   DF .text	000000000000012e  Base        fmt::format[abi:cxx11](fmt::BasicCStringRef<char>, fmt::ArgList)
0000000000099250  w   DF .text	0000000000000313  Base        fmt::ArgVisitor<fmt::ArgFormatter<char>, void>::visit(fmt::internal::Arg const&)
0000000000073950  w   DF .text	0000000000000032  Base        spdlog::details::aggregate_formatter::~aggregate_formatter()
00000000000737b0  w   DF .text	0000000000000055  Base        drake::systems::DiagramContext<double>::set_time(double const&)
0000000000071f40  w   DF .text	0000000000000006  Base        spdlog::sinks::stderr_sink<std::mutex>::~stderr_sink()
0000000000311a98  w   DO .data.rel.ro	0000000000000028  Base        vtable for drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000311cb8  w   DO .data.rel.ro	0000000000000040  Base        vtable for drake::systems::internal::DiagramOutput<double>
00000000000a07e0  w   DF .text	0000000000000633  Base        drake::systems::Simulator<double>::IntegrateContinuousState(double const&, double const&, double const&, double const&, drake::systems::CompositeEventCollection<double>*)
000000000009d330  w   DF .text	000000000000013c  Base        void drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, double>(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)> const&)
0000000000312558  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramContext<double>
00000000000ee040  w   DO .rodata	000000000000004d  Base        typeinfo name for drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>
000000000007c200  w   DF .text	000000000000006b  Base        drake::systems::System<drake::symbolic::Expression>::DoEvalConstraintEquations(drake::systems::Context<drake::symbolic::Expression> const&) const
0000000000313568  w   DO .data.rel.ro	0000000000000058  Base        vtable for spdlog::async_logger
000000000007a4b0  w   DF .text	0000000000000032  Base        stx::bad_optional_access::~bad_optional_access()
00000000000729c0  w   DF .text	0000000000000006  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetGraphvizFragment(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
0000000000310988  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (int)
00000000000bbda0  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
000000000008c7e0  w   DF .text	00000000000003ca  Base        spdlog::details::full_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000cd5d0  w   DF .text	00000000000000d9  Base        drake::systems::BasicVector<drake::symbolic::Expression>::SetZero()
00000000000a9230  w   DF .text	0000000000000080  Base        std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> > >::_M_get_insert_unique_pos(drake::systems::System<drake::symbolic::Expression> const* const&)
0000000000086aa0  w   DF .text	000000000000001c  Base        drake::systems::Context<drake::symbolic::Expression>::set_time(drake::symbolic::Expression const&)
00000000000e3a10  w   DF .text	000000000000028c  Base        decltype(auto) transformSpatialForce<Eigen::Matrix<double, 6, 6, 0, 6, 6> >(Eigen::Transform<Eigen::Matrix<double, 6, 6, 0, 6, 6>::Scalar, 3, 1, 0> const&, Eigen::MatrixBase<Eigen::Matrix<double, 6, 6, 0, 6, 6> > const&)
000000000008a1a0  w   DF .text	0000000000000033  Base        drake::systems::CompositeEventCollection<double>::Clear()
00000000000744f0  w   DF .text	000000000000000f  Base        spdlog::details::m_formatter::~m_formatter()
00000000000908f0  w   DF .text	000000000000025f  Base        drake::systems::Diagram<double>::DispatchDiscreteVariableUpdateHandler(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > const&, drake::systems::DiscreteValues<double>*) const
000000000009da20  w   DF .text	000000000000005e  Base        std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)>::function(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)
0000000000310fb0  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*) const
00000000000b0aa0  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > > > >::~vector()
00000000000a3e70  w   DF .text	000000000000004c  Base        std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >*)
00000000000716e0  w   DF .text	0000000000000006  Base        drake::systems::PeriodicEventData::~PeriodicEventData()
000000000007cb70  w   DF .text	000000000000007a  Base        drake::systems::internal::DiagramOutput<drake::symbolic::Expression>::get_mutable_port_value(int)
00000000000f2080  w   DO .rodata	0000000000000046  Base        typeinfo name for drake::systems::Value<drake::systems::BasicVector<drake::symbolic::Expression> >
00000000000f39c0  w   DO .rodata	0000000000000038  Base        typeinfo name for drake::systems::OutputPort<drake::symbolic::Expression>
0000000000314d10  w   DO .data.rel.ro	0000000000000040  Base        vtable for drake::systems::LeafSystemOutput<double>
000000000008b7b0  w   DF .text	0000000000000478  Base        char* fmt::BasicWriter<char>::prepare_int_buffer<fmt::AlignSpec>(unsigned int, fmt::AlignSpec const&, char const*, unsigned int)
00000000000be590  w   DF .text	000000000000018d  Base        drake::systems::ContinuousState<double>::ContinuousState(std::unique_ptr<drake::systems::VectorBase<double>, std::default_delete<drake::systems::VectorBase<double> > >)
0000000000083bf0  w   DF .text	000000000000003f  Base        spdlog::details::async_log_helper::async_msg::~async_msg()
00000000000d84e0  w   DF .text	0000000000000029  Base        drake::systems::DiscreteUpdateEvent<double>::DiscreteUpdateEvent(drake::systems::Event<double>::TriggerType const&)
00000000000d6290  w   DF .text	00000000000000a4  Base        drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >::Clear()
00000000000a3b50  w   DF .text	0000000000000089  Base        drake::systems::Diagram<drake::symbolic::Expression>::~Diagram()
00000000000f1c20  w   DO .rodata	0000000000000020  Base        typeinfo name for drake::systems::OutputPort<double>
0000000000316b60 u    DO .bss	0000000000000048  Base        drake::systems::CacheEntryValue::dummy()::dummy
000000000009d950  w   DF .text	00000000000000c9  Base        std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}> const&, std::_Manager_operation)
00000000000d5ea0  w   DF .text	000000000000006b  Base        std::_Function_handler<void (drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*), drake::systems::LeafSystem<double>::MaybeDeclareVectorBaseInequalityConstraint(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, drake::systems::VectorBase<double> const&, std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)> const&)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}>::_M_invoke(std::_Any_data const&, drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*&&)
00000000000d5290  w   DF .text	000000000000000d  Base        drake::systems::LeafContext<double>::get_parameters() const
00000000000743d0  w   DF .text	000000000000000f  Base        spdlog::details::v_formatter::~v_formatter()
00000000000832a0  w   DF .text	0000000000000024  Base        drake::systems::DiagramContext<double>::~DiagramContext()
00000000000edbe0  w   DO .rodata	0000000000000064  Base        typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > ()
00000000000edf40  w   DO .rodata	0000000000000088  Base        typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > ()
000000000007a710  w   DF .text	0000000000000032  Base        drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~InputPortDescriptor()
00000000000f1220  w   DO .rodata	0000000000000014  Base        typeinfo name for fmt::FormatError
000000000007a4f0  w   DF .text	000000000000002d  Base        std::_Sp_counted_ptr_inplace<spdlog::pattern_formatter, std::allocator<spdlog::pattern_formatter>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
00000000000969a0  w   DF .text	0000000000000056  Base        void std::vector<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg>, std::allocator<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg> > >::emplace_back<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg> >(std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg>&&)
00000000000a8830  w   DF .text	0000000000000080  Base        std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_get_insert_unique_pos(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&)
00000000000c56b0  w   DF .text	0000000000000149  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateDiscreteVariables() const
000000000007a250  w   DF .text	0000000000000088  Base        drake::systems::Diagram<drake::symbolic::Expression>::GetGraphvizOutputPortToken(drake::systems::OutputPort<drake::symbolic::Expression> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000d9ae0  w   DF .text	0000000000000010  Base        std::_Function_handler<void (drake::systems::Context<double> const&, drake::systems::AbstractValue*), drake::systems::LeafOutputPort<double>::set_calculation_function(std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>)::{lambda(drake::systems::Context<double> const&, drake::systems::AbstractValue*)#1}>::_M_invoke(std::_Any_data const&, drake::systems::Context<double> const&, drake::systems::AbstractValue*&&)
00000000000ec880  w   DO .rodata	0000000000000073  Base        typeinfo name for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
0000000000072060  w   DF .text	0000000000000006  Base        spdlog::details::I_formatter::~I_formatter()
00000000000bfe40  w   DF .text	00000000000000c9  Base        std::_Rb_tree<drake::systems::PeriodicEventData, std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > >, std::_Select1st<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > > >, drake::systems::PeriodicEventDataComparator, std::allocator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > > > >::_M_get_insert_unique_pos(drake::systems::PeriodicEventData const&)
0000000000071900  w   DF .text	0000000000000006  Base        drake::systems::IntegratorBase<double>::DoResetStatistics()
00000000000c68d0  w   DF .text	00000000000001ca  Base        drake::systems::Diagram<double>::DoGetWitnessFunctions(drake::systems::Context<double> const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*) const
0000000000074e70  w   DF .text	0000000000000033  Base        drake::systems::System<double>::DoCalcTimeDerivatives(drake::systems::Context<double> const&, drake::systems::ContinuousState<double>*) const
00000000000eff40  w   DO .rodata	0000000000000077  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*) const>
000000000009d5a0  w   DF .text	000000000000013c  Base        void drake::systems::SystemScalarConverter::Add<double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)
00000000000be590  w   DF .text	000000000000018d  Base        drake::systems::ContinuousState<double>::ContinuousState(std::unique_ptr<drake::systems::VectorBase<double>, std::default_delete<drake::systems::VectorBase<double> > >)
00000000000d1b80  w   DF .text	0000000000000555  Base        drake::systems::DiagramContext<double>::DiagramContext(drake::systems::DiagramContext<double> const&)
00000000000e30f0  w   DF .text	0000000000000063  Base        std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()
00000000000728e0  w   DF .text	000000000000000e  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetRandomState(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
00000000000c36d0  w   DF .text	000000000000013f  Base        std::_MakeUniq<drake::systems::DiagramState<double> >::__single_object std::make_unique<drake::systems::DiagramState<double>, int&>(int&)
000000000007c2e0  w   DF .text	000000000000006b  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoEvalConstraintEquations(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
00000000000728c0  w   DF .text	0000000000000010  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateTimeDerivatives() const
000000000007ad30  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<double> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > (drake::systems::System<double>::*)() const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000cbb80  w   DF .text	0000000000000160  Base        drake::systems::DiagramContext<double>::DoCloneState() const
000000000009a090  w   DF .text	000000000000085a  Base        drake::systems::Simulator<double>::Simulator(drake::systems::System<double> const&, std::unique_ptr<drake::systems::Context<double>, std::default_delete<drake::systems::Context<double> > >)
00000000003127c8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Simulator<double>::IsolateWitnessTriggers(std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*)::{lambda(double const&)#1}
0000000000074060  w   DF .text	0000000000000078  Base        drake::systems::DiagramState<double>::~DiagramState()
00000000000c9a30  w   DF .text	000000000000027a  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateTimeDerivatives() const
00000000000d6b90  w   DF .text	00000000000000c7  Base        drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >::~LeafEventCollection()
00000000003120c0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::a_formatter
00000000000d7710  w   DF .text	0000000000000107  Base        drake::systems::LeafSystem<double>::~LeafSystem()
00000000000f4ea0  w   DO .rodata	000000000000009d  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<drake::symbolic::Expression> const& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>
0000000000310af8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Context<drake::symbolic::Expression>& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000003121e0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::M_formatter
0000000000072fd0  w   DF .text	0000000000000023  Base        std::_Function_handler<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000312fa8  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::level_formatter
000000000007a090  w   DF .text	000000000000001e  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::add_event(std::unique_ptr<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >)
0000000000073480  w   DF .text	0000000000000060  Base        drake::systems::State<drake::symbolic::Expression>::~State()
000000000007bea0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramState<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<double> const& (drake::systems::DiagramState<double>::*)(int) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
000000000007b2b0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000310ad8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::VectorBase<double>& (drake::systems::ContinuousState<double>*)
0000000000096d20  w   DF .text	0000000000000153  Base        fmt::BasicFormatter<char, fmt::ArgFormatter<char> >::format(fmt::BasicCStringRef<char>)
0000000000071fd0  w   DF .text	0000000000000006  Base        spdlog::details::R_formatter::~R_formatter()
00000000000eea40  w   DO .rodata	0000000000000035  Base        typeinfo name for drake::systems::DiagramCompositeEventCollection<double>
00000000000f1510  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::c_formatter
00000000000b4e80  w   DF .text	000000000000006a  Base        drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramDiscreteValues()
00000000000b5160  w   DF .text	000000000000086a  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetDefaultParameters(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000aee90  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, std::default_delete<drake::systems::CompositeEventCollection<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, std::default_delete<drake::systems::CompositeEventCollection<drake::symbolic::Expression> > > > >::~vector()
0000000000313200  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::S_formatter
0000000000073c90  w   DF .text	000000000000007b  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::~DiagramEventCollection()
00000000000b2120  w   DF .text	0000000000000144  Base        void std::vector<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > > > >::emplace_back<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > > >(std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > >&&)
00000000000f3ba0  w   DO .rodata	0000000000000065  Base        typeinfo name for drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000086900  w   DF .text	0000000000000039  Base        spdlog::details::short_level_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000075190  w   DF .text	000000000000006e  Base        drake::systems::DiagramContinuousState<double>::get_substate(int) const
00000000000f2740  w   DO .rodata	0000000000000080  Base        typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > (drake::systems::System<double>::*)() const
000000000008a290  w   DF .text	00000000000000df  Base        spdlog::details::pid_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000073b10  w   DF .text	000000000000007b  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::~DiagramEventCollection()
0000000000095aa0  w   DF .text	0000000000000462  Base        char* fmt::BasicWriter<char>::prepare_int_buffer<fmt::FormatSpec>(unsigned int, fmt::FormatSpec const&, char const*, unsigned int)
0000000000312b40  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >
00000000000f0ee0  w   DO .rodata	0000000000000076  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<double>& (drake::systems::DiagramCompositeEventCollection<double>::*)(int)>
000000000009bb10  w   DF .text	000000000000009e  Base        std::_Rb_tree<std::pair<drake::systems::System<double> const*, int>, std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > >, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > > >::_M_get_insert_unique_pos(std::pair<drake::systems::System<double> const*, int> const&)
000000000007f390  w   DF .text	0000000000000073  Base        drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoEval(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
0000000000316960 u    DO .bss	0000000000000020  Base        drake::NiceTypeName::Get<drake::systems::Diagram<drake::symbolic::Expression> >()::canonical[abi:cxx11]
000000000007bd80  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::State<double>*), drake::systems::State<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double>*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000003115c0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int)>
0000000000311500  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::Value<drake::systems::BasicVector<double> >
00000000000ed220  w   DO .rodata	000000000000003d  Base        typeinfo name for drake::systems::VectorBase<double>& (drake::systems::ContinuousState<double>*)
00000000000db9f0  w   DF .text	0000000000000075  Base        drake::systems::Value<drake::systems::BasicVector<double> >::Clone() const
00000000000c6640  w   DF .text	0000000000000287  Base        void std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >::_M_range_insert<__gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<double> const**, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > > >(__gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<double> const**, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > >, __gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<double> const**, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > >, __gnu_cxx::__normal_iterator<drake::systems::WitnessFunction<double> const**, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > >, std::forward_iterator_tag)
0000000000316920 u    DO .bss	0000000000000020  Base        drake::NiceTypeName::Get<int>()::canonical[abi:cxx11]
000000000007d5e0  w   DF .text	00000000000000fd  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::DoMerge(drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > const&)
00000000000ced30  w   DF .text	0000000000000318  Base        drake::systems::Supervector<double>::GetSubvectorAndOffset(int) const
00000000000eefe0  w   DO .rodata	0000000000000076  Base        typeinfo name for drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int)
0000000000097690  w   DF .text	0000000000000219  Base        fmt::internal::ArgFormatterBase<fmt::ArgFormatter<char>, char, fmt::FormatSpec>::visit_char(int)
00000000000d1470  w   DF .text	00000000000006a2  Base        drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiagramContext(drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)
00000000003157f8  w   DO .data.rel.ro	0000000000000040  Base        vtable for drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >
000000000007c430  w   DF .text	000000000000006b  Base        drake::systems::System<double>::DoEvalConstraintEquationsDot(drake::systems::Context<double> const&) const
0000000000087ac0  w   DF .text	00000000000000a3  Base        spdlog::logger::~logger()
00000000000743e0  w   DF .text	000000000000000f  Base        spdlog::details::i_formatter::~i_formatter()
00000000000b9950  w   DF .text	0000000000000021  Base        drake::systems::Value<int>::SetFrom(drake::systems::AbstractValue const&)
0000000000089940  w   DF .text	000000000000003a  Base        drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~BasicVector()
000000000007a770  w   DF .text	0000000000000032  Base        drake::systems::InputPortDescriptor<double>::~InputPortDescriptor()
00000000000959d0  w   DF .text	00000000000000c2  Base        std::__detail::_Map_base<drake::systems::WitnessFunction<double> const*, std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, std::allocator<std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > > >, std::__detail::_Select1st, std::equal_to<drake::systems::WitnessFunction<double> const*>, std::hash<drake::systems::WitnessFunction<double> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](drake::systems::WitnessFunction<double> const* const&)
00000000000db790  w   DF .text	00000000000000cf  Base        std::function<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > ()> drake::systems::LeafSystem<double>::MakeAllocCallback<drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&)
00000000000eea80  w   DO .rodata	0000000000000022  Base        typeinfo name for drake::systems::SystemOutput<double>
0000000000072eb0  w   DF .text	0000000000000023  Base        std::_Function_handler<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000072e50  w   DF .text	0000000000000023  Base        std::_Function_handler<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)>::_M_invoke(std::_Any_data const&, drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
00000000000aebc0  w   DF .text	00000000000000c4  Base        drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Calc(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::AbstractValue*) const
00000000000f3a00  w   DO .rodata	0000000000000052  Base        typeinfo name for drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >
00000000000c5800  w   DF .text	0000000000000141  Base        drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoClone() const
0000000000073900  w   DF .text	0000000000000042  Base        fmt::BasicMemoryWriter<char, std::allocator<char> >::~BasicMemoryWriter()
0000000000072170  w   DF .text	0000000000000020  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcPotentialEnergy(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
000000000009dcf0  w   DF .text	000000000000013c  Base        void drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)
00000000003112d0  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000a2740  w   DF .text	000000000000004c  Base        std::_Rb_tree<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_erase(std::_Rb_tree_node<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >*)
0000000000072080  w   DF .text	0000000000000006  Base        spdlog::details::d_formatter::~d_formatter()
00000000000b1420  w   DF .text	0000000000000039  Base        drake::systems::Context<drake::symbolic::Expression>::~Context()
0000000000074440  w   DF .text	000000000000000f  Base        spdlog::details::r_formatter::~r_formatter()
0000000000312910  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramContext<drake::symbolic::Expression>
0000000000313458  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::aggregate_formatter
00000000003127d8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for std::_Sp_counted_ptr_inplace<spdlog::sinks::stderr_sink<std::mutex>, std::allocator<spdlog::sinks::stderr_sink<std::mutex> >, (__gnu_cxx::_Lock_policy)2>
0000000000071f60  w   DF .text	0000000000000006  Base        spdlog::details::ch_formatter::~ch_formatter()
000000000007aa70  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::Context<double>*), drake::systems::Context<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double>*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000311608  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000311728  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::State<double> const& (drake::systems::DiagramState<double>::*)(int) const>
0000000000072190  w   DF .text	0000000000000020  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcKineticEnergy(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
000000000007bd20  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000df4c0  w   DF .text	00000000000000ba  Base        drake::systems::LeafSystemOutput<double>::DoClone() const
0000000000072000  w   DF .text	0000000000000006  Base        spdlog::details::E_formatter::~E_formatter()
0000000000072750  w   DF .text	0000000000000006  Base        drake::systems::System<double>::GetGraphvizOutputPortToken(drake::systems::OutputPort<double> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
000000000007d0e0  w   DF .text	00000000000000fd  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::DoMerge(drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > const&)
00000000000ae9c0  w   DF .text	00000000000001f9  Base        drake::systems::DiagramOutputPort<drake::symbolic::Expression>::DoCalc(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::AbstractValue*) const
0000000000312778  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >
000000000007a490  w   DF .text	0000000000000018  Base        stx::bad_optional_access::~bad_optional_access()
00000000000db970  w   DF .text	000000000000003f  Base        drake::systems::Value<drake::systems::BasicVector<double> >::SetFrom(drake::systems::AbstractValue const&)
000000000008ffc0  w   DF .text	00000000000000cf  Base        Eigen::internal::redux_impl<Eigen::internal::scalar_min_op<double, double>, Eigen::internal::redux_evaluator<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, 3, 0>::run(Eigen::internal::redux_evaluator<Eigen::Matrix<double, -1, 1, 0, -1, 1> > const&, Eigen::internal::scalar_min_op<double, double> const&)
00000000000af150  w   DF .text	00000000000000b4  Base        drake::systems::Subvector<drake::symbolic::Expression>::Subvector(drake::systems::VectorBase<drake::symbolic::Expression>*, int, int)
0000000000074b20  w   DF .text	0000000000000018  Base        fmt::SystemError::~SystemError()
00000000000f49a0  w   DO .rodata	00000000000000b5  Base        typeinfo name for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>
00000000000f16b0  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::E_formatter
0000000000072090  w   DF .text	0000000000000006  Base        spdlog::details::m_formatter::~m_formatter()
00000000000eec20  w   DO .rodata	0000000000000052  Base        typeinfo name for drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*) const
0000000000316ac0 u    DO .bss	0000000000000008  Base        guard variable for spdlog::sinks::stderr_sink<std::mutex>::instance()::instance
00000000000750b0  w   DF .text	000000000000006e  Base        drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetMutableSubsystemContext(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
0000000000073260  w   DF .text	000000000000007b  Base        drake::systems::ContinuousState<drake::symbolic::Expression>::~ContinuousState()
00000000000f1a00  w   DO .rodata	000000000000001a  Base        typeinfo name for drake::systems::Value<int>
00000000000cd7e0  w   DF .text	0000000000000191  Base        drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::BasicVector(int)
0000000000072820  w   DF .text	0000000000000012  Base        drake::systems::System<drake::symbolic::Expression>::DoGetMutableTargetSystemCompositeEventCollection(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const
0000000000072260  w   DF .text	0000000000000047  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::HasEvents() const
00000000000f0c60  w   DO .rodata	000000000000004f  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::State<double>& (drake::systems::DiagramState<double>::*)(int)>
00000000000d20e0  w   DF .text	0000000000000055  Base        drake::systems::DiagramContext<double>::DoCloneWithoutPointers() const
0000000000310a78  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::CompositeEventCollection<double>* (drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*)
0000000000312330  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::v_formatter
0000000000097f40  w   DF .text	000000000000033e  Base        void fmt::BasicWriter<char>::write_int<unsigned long long, fmt::FormatSpec>(unsigned long long, fmt::FormatSpec)
000000000007c3c0  w   DF .text	000000000000006b  Base        drake::systems::System<double>::DoEvalConstraintEquations(drake::systems::Context<double> const&) const
0000000000312d50  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>
00000000000e37d0  w   DF .text	0000000000000232  Base        Eigen::Matrix<double, 3, 6, 0, 3, 6> const Eigen::VectorwiseOp<Eigen::Block<Eigen::Matrix<double, 6, 6, 0, 6, 6>, 3, 6, false>, 0>::cross<Eigen::Block<Eigen::Matrix<double, 4, 4, 0, 4, 4> const, 3, 1, true> >(Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, 4, 4, 0, 4, 4> const, 3, 1, true> > const&) const
00000000003120f0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::b_formatter
0000000000074310  w   DF .text	000000000000008b  Base        fmt::internal::MemoryBuffer<char, 500ul, std::allocator<char> >::grow(unsigned long)
00000000000b1fd0  w   DF .text	0000000000000144  Base        void std::vector<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > > > >::emplace_back<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > > >(std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > >&&)
00000000000f5d60  w   DO .rodata	0000000000000024  Base        typeinfo name for drake::systems::LeafOutputPort<double>
0000000000073650  w   DF .text	000000000000001c  Base        drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::size() const
0000000000086a30  w   DF .text	000000000000001a  Base        std::shared_ptr<spdlog::sinks::stderr_sink<std::mutex> >::~shared_ptr()
000000000007bae0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000311620  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>
00000000000e24b0  w   DF .text	000000000000042f  Base        drake::systems::Parameters<double>::Clone() const
00000000000c3fb0  w   DF .text	0000000000000153  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::BasicVector<double> >()
000000000008c670  w   DF .text	0000000000000076  Base        spdlog::details::z_formatter::format(spdlog::details::log_msg&, tm const&)
000000000009ccf0  w   DF .text	0000000000000024  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~System()
00000000000b6770  w   DF .text	00000000000008d2  Base        drake::systems::ContinuousState<double>::ContinuousState(std::unique_ptr<drake::systems::VectorBase<double>, std::default_delete<drake::systems::VectorBase<double> > >, int, int, int)
0000000000072e80  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&)
00000000000f15b0  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::d_formatter
00000000000ef4a0  w   DO .rodata	0000000000000082  Base        typeinfo name for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
0000000000071f70  w   DF .text	0000000000000006  Base        spdlog::details::v_formatter::~v_formatter()
0000000000071890  w   DF .text	0000000000000006  Base        drake::systems::System<double>::DoGetPerStepEvents(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*) const
00000000000d9210  w   DF .text	000000000000028c  Base        std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_M_fill_insert(__gnu_cxx::__normal_iterator<std::pair<int, int>*, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >, unsigned long, std::pair<int, int> const&)
0000000000312f78  w   DO .data.rel.ro	0000000000000030  Base        vtable for spdlog::sinks::sink
0000000000083180  w   DF .text	000000000000011f  Base        drake::systems::DiagramContext<double>::~DiagramContext()
0000000000313340  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::T_formatter
0000000000311410  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::ContinuousState<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*) const
00000000000afc50  w   DF .text	00000000000002e3  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoMapVelocityToQDot(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000f20d0  w   DO .rodata	0000000000000018  Base        typeinfo name for std::_Sp_make_shared_tag
00000000000d94a0  w   DF .text	000000000000027b  Base        std::vector<double, std::allocator<double> >::_M_fill_insert(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, unsigned long, double const&)
000000000007a6f0  w   DF .text	0000000000000018  Base        drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~InputPortDescriptor()
00000000000dfce0  w   DF .text	00000000000002b6  Base        drake::systems::LeafSystem<double>::DoGetPeriodicEvents() const
0000000000312f50  w   DO .data.rel.ro	0000000000000028  Base        vtable for fmt::SystemError
00000000003123d0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::async_logger
00000000000b1020  w   DF .text	0000000000000260  Base        drake::systems::Diagram<double>::DoMapQDotToVelocity(drake::systems::Context<double> const&, Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<double>*) const
0000000000310b18  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::State<drake::symbolic::Expression>& (int)
0000000000074700  w   DF .text	0000000000000024  Base        drake::systems::State<double>::~State()
0000000000312348  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::ch_formatter
000000000007e990  w   DF .text	000000000000007d  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::~DiagramEventCollection()
00000000000772b0  w   DF .text	00000000000001f8  Base        drake::systems::Diagram<drake::symbolic::Expression>::AddTriggeredWitnessFunctionToCompositeEventCollection(drake::systems::Event<drake::symbolic::Expression>*, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const
0000000000313ce0  w   DO .data.rel.ro	0000000000000028  Base        vtable for drake::systems::DiscreteValues<drake::symbolic::Expression>
00000000000bbd90  w   DF .text	000000000000000c  Base        non-virtual thunk to drake::systems::Diagram<drake::symbolic::Expression>::EvalConnectedSubsystemInputPort(drake::systems::ContextBase const&, drake::systems::InputPortBase const&) const
00000000000f48e0  w   DO .rodata	00000000000000b1  Base        typeinfo name for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>
00000000000ed440  w   DO .rodata	0000000000000037  Base        typeinfo name for drake::systems::State<drake::symbolic::Expression> const& (int)
000000000008ed90  w   DF .text	0000000000000266  Base        drake::systems::DiagramBuilder<double>::Connect(drake::systems::OutputPort<double> const&, drake::systems::InputPortDescriptor<double> const&)
00000000000be720  w   DF .text	00000000000000b6  Base        std::_Rb_tree<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::_Identity<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::less<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::equal_range(std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&)
000000000008f720  w   DF .text	00000000000000a6  Base        drake::systems::Diagram<double>::AllocateForcedDiscreteUpdateEventCollection() const
00000000000ed9e0  w   DO .rodata	000000000000008b  Base        typeinfo name for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
000000000009f920  w   DF .text	0000000000000089  Base        std::vector<std::unique_ptr<drake::systems::SystemConstraint<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemConstraint<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::SystemConstraint<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemConstraint<drake::symbolic::Expression> > > > >::~vector()
0000000000310b78  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for Eigen::internal::auto_diff_special_op<Eigen::Matrix<double, -1, 1, 0, -1, 1>, false>
00000000000b9680  w   DF .text	000000000000005a  Base        std::_Rb_tree<drake::systems::PeriodicEventData, std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > >, std::_Select1st<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > > >, drake::systems::PeriodicEventDataComparator, std::allocator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > > >*)
00000000000b2430  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::BasicVector<drake::symbolic::Expression>, std::default_delete<drake::systems::BasicVector<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<drake::symbolic::Expression>, std::default_delete<drake::systems::BasicVector<drake::symbolic::Expression> > > > >::~vector()
00000000000d6c60  w   DF .text	00000000000000c9  Base        drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >::~LeafEventCollection()
00000000000baa30  w   DF .text	000000000000000a  Base        drake::systems::BasicVector<drake::symbolic::Expression>::SetFromVector(Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)
0000000000312d80  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>
00000000000eec80  w   DO .rodata	000000000000007f  Base        typeinfo name for drake::systems::Context<drake::symbolic::Expression>& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
0000000000314eb8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::LeafSystem<double>::MakeAllocCallback<drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&)::{lambda()#1}
00000000000723f0  w   DF .text	0000000000000006  Base        drake::systems::IntegratorBase<double>::DoReset()
0000000000071990  w   DF .text	0000000000000006  Base        drake::systems::WitnessTriggeredEventData<double>::~WitnessTriggeredEventData()
00000000000c5be0  w   DF .text	0000000000000201  Base        drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>::DiagramDiscreteValues(std::vector<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > > > >)
00000000000730b0  w   DF .text	0000000000000023  Base        std::_Function_handler<drake::systems::State<double> const& (drake::systems::DiagramState<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<double> const& (drake::systems::DiagramState<double>::*)(int) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramState<double> const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
000000000007a0f0  w   DF .text	0000000000000032  Base        drake::systems::Value<int>::~Value()
00000000000b4ef0  w   DF .text	0000000000000067  Base        drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramDiscreteValues()
0000000000310b98  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*)
0000000000095330  w   DF .text	000000000000004c  Base        std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, int> >*)
00000000000ecda0  w   DO .rodata	0000000000000086  Base        typeinfo name for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)
00000000000e0f90  w   DF .text	00000000000004af  Base        drake::systems::LeafSystem<double>::AllocateParameters() const
00000000000853e0  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> >, std::allocator<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > > >::~vector()
00000000000ba600  w   DF .text	0000000000000145  Base        std::pair<std::_Rb_tree_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, bool> std::_Rb_tree<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::_Identity<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::less<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::_M_insert_unique<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&>(std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&)
0000000000314f38  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::LeafCompositeEventCollection<double>
00000000000e4270  w   DF .text	00000000000000f0  Base        void std::vector<float, std::allocator<float> >::_M_emplace_back_aux<float>(float&&)
000000000008b740  w   DF .text	0000000000000063  Base        fmt::BasicWriter<char>::fill_padding(char*, unsigned int, unsigned long, wchar_t)
0000000000313d88  w   DO .data.rel.ro	0000000000000038  Base        vtable for drake::systems::OutputPort<double>
000000000009d470  w   DF .text	00000000000000c9  Base        std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, double>(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, double>(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}> const&, std::_Manager_operation)
0000000000079f50  w   DF .text	000000000000005d  Base        drake::systems::System<drake::symbolic::Expression>::DoMapQDotToVelocity(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<drake::symbolic::Expression>*) const
00000000000f1280  w   DO .rodata	0000000000000017  Base        typeinfo name for fmt::BasicWriter<char>
00000000000d50c0  w   DF .text	0000000000000067  Base        drake::systems::UnrestrictedUpdateEvent<double>::~UnrestrictedUpdateEvent()
00000000000d5190  w   DF .text	0000000000000011  Base        drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::HasEvents() const
00000000000d6680  w   DF .text	0000000000000073  Base        drake::systems::LeafSystemOutput<double>::~LeafSystemOutput()
0000000000074560  w   DF .text	000000000000000f  Base        spdlog::details::A_formatter::~A_formatter()
00000000003116f8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::State<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double>*) const>
000000000007c350  w   DF .text	000000000000006b  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoEvalConstraintEquationsDot(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
00000000000e18b0  w   DF .text	000000000000070b  Base        drake::systems::LeafSystem<double>::GetDirectFeedthroughs() const
00000000000c93c0  w   DF .text	0000000000000312  Base        drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Span(std::vector<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> > const&, std::function<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)>)
0000000000312fd0  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::short_level_formatter
00000000000e4650  w   DF .text	0000000000000125  Base        std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>&&, std::tuple<>&&)
000000000007f4a0  w   DF .text	0000000000000081  Base        spdlog::pattern_formatter::~pattern_formatter()
00000000000c32b0  w   DF .text	00000000000000d3  Base        void std::vector<drake::systems::PublishEvent<double> const*, std::allocator<drake::systems::PublishEvent<double> const*> >::emplace_back<drake::systems::PublishEvent<double> const*>(drake::systems::PublishEvent<double> const*&&)
0000000000073750  w   DF .text	000000000000000d  Base        drake::systems::DiagramContext<drake::symbolic::Expression>::get_parameters() const
0000000000072330  w   DF .text	000000000000002f  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::Clear()
00000000000a62a0  w   DF .text	000000000000008d  Base        std::_Rb_tree_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<double> const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<double> const* const&>&&, std::tuple<>&&)
0000000000312e80  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::Context<drake::symbolic::Expression> const& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>
0000000000071f80  w   DF .text	0000000000000006  Base        spdlog::details::i_formatter::~i_formatter()
00000000000c36d0  w   DF .text	000000000000013f  Base        std::_MakeUniq<drake::systems::DiagramState<double> >::__single_object std::make_unique<drake::systems::DiagramState<double>, int&>(int&)
00000000000721f0  w   DF .text	0000000000000006  Base        drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Subvector()
0000000000312850  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > (drake::systems::System<double>::*)() const
0000000000314d80  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::LeafSystem<double>
00000000000df200  w   DF .text	0000000000000143  Base        void std::vector<std::unique_ptr<drake::systems::OutputPortValue, std::default_delete<drake::systems::OutputPortValue> >, std::allocator<std::unique_ptr<drake::systems::OutputPortValue, std::default_delete<drake::systems::OutputPortValue> > > >::emplace_back<std::unique_ptr<drake::systems::OutputPortValue, std::default_delete<drake::systems::OutputPortValue> > >(std::unique_ptr<drake::systems::OutputPortValue, std::default_delete<drake::systems::OutputPortValue> >&&)
00000000000b2270  w   DF .text	00000000000000d3  Base        void std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> >::emplace_back<drake::systems::BasicVector<drake::symbolic::Expression>*>(drake::systems::BasicVector<drake::symbolic::Expression>*&&)
00000000000749a0  w   DF .text	000000000000003b  Base        drake::systems::internal::DiagramOutput<drake::symbolic::Expression>::~DiagramOutput()
00000000000c3520  w   DF .text	00000000000001ac  Base        drake::systems::State<double>::State()
00000000000ee1c0  w   DO .rodata	0000000000000032  Base        typeinfo name for drake::systems::State<drake::symbolic::Expression>
000000000007b0a0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000089920  w   DF .text	0000000000000020  Base        drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~BasicVector()
00000000000be350  w   DF .text	0000000000000226  Base        drake::systems::Diagram<double>::EvalConnectedSubsystemInputPort(drake::systems::ContextBase const&, drake::systems::InputPortBase const&) const
00000000000f28a0  w   DO .rodata	000000000000005a  Base        typeinfo name for drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000f1690  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::F_formatter
000000000007a750  w   DF .text	0000000000000018  Base        drake::systems::InputPortDescriptor<double>::~InputPortDescriptor()
00000000000b0300  w   DF .text	0000000000000189  Base        drake::systems::DiagramOutputPort<double>::DoCalc(drake::systems::Context<double> const&, drake::systems::AbstractValue*) const
000000000007ea90  w   DF .text	000000000000007d  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::~DiagramEventCollection()
00000000003136b0  w   DO .data.rel.ro	0000000000000030  Base        vtable for drake::systems::PeriodicEventData
000000000009b300  w   DF .text	00000000000002bb  Base        void spdlog::logger::log<char const*>(spdlog::level::level_enum, char const*, char const* const&)
00000000000be580  w   DF .text	000000000000000c  Base        non-virtual thunk to drake::systems::Diagram<double>::EvalConnectedSubsystemInputPort(drake::systems::ContextBase const&, drake::systems::InputPortBase const&) const
00000000000f3e40  w   DO .rodata	000000000000003f  Base        typeinfo name for drake::systems::DiagramOutputPort<drake::symbolic::Expression>
00000000003116e0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::Supervector<double>
0000000000079680  w   DF .text	00000000000001f8  Base        drake::systems::Diagram<double>::AddTriggeredWitnessFunctionToCompositeEventCollection(drake::systems::Event<double>*, drake::systems::CompositeEventCollection<double>*) const
00000000000f3a60  w   DO .rodata	0000000000000059  Base        typeinfo name for drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >
00000000000e3280  w   DF .text	0000000000000224  Base        void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_emplace_back_aux<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000eef60  w   DO .rodata	0000000000000064  Base        typeinfo name for drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const
00000000000d84e0  w   DF .text	0000000000000029  Base        drake::systems::DiscreteUpdateEvent<double>::DiscreteUpdateEvent(drake::systems::Event<double>::TriggerType const&)
00000000000afb20  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
00000000000cf5d0  w   DF .text	00000000000003f7  Base        drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ScaleAndAddToVector(Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > const&, Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>, 0, Eigen::InnerStride<1> >) const
00000000000c9cb0  w   DF .text	00000000000004a5  Base        drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Finalize()
00000000000b05e0  w   DF .text	00000000000000a6  Base        drake::systems::Event<double>::Event(drake::systems::Event<double> const&)
00000000000ecd20  w   DO .rodata	0000000000000070  Base        typeinfo name for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (int)
0000000000310e70  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000f44e0  w   DO .rodata	000000000000009a  Base        typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const
00000000000d9af0  w   DF .text	00000000000001b9  Base        void std::vector<std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > >, std::allocator<std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > > > >::emplace_back<std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > > >(std::unique_ptr<drake::systems::OutputPort<double>, std::default_delete<drake::systems::OutputPort<double> > >&&)
0000000000312120  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::c_formatter
00000000000734e0  w   DF .text	000000000000000d  Base        std::_Function_handler<drake::systems::VectorBase<drake::symbolic::Expression>& (drake::systems::ContinuousState<drake::symbolic::Expression>*), drake::systems::VectorBase<drake::symbolic::Expression>& (*)(drake::systems::ContinuousState<drake::symbolic::Expression>*)>::_M_invoke(std::_Any_data const&, drake::systems::ContinuousState<drake::symbolic::Expression>*&&)
000000000007bf00  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*), drake::systems::ContinuousState<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000003168c0 u    DO .bss	0000000000000008  Base        guard variable for drake::NiceTypeName::Get<drake::systems::Context<drake::symbolic::Expression> >()::canonical
000000000007cdf0  w   DF .text	000000000000007a  Base        drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_port_value(int) const
0000000000071fe0  w   DF .text	0000000000000006  Base        spdlog::details::r_formatter::~r_formatter()
00000000000cfd30  w   DF .text	0000000000000c4f  Base        drake::systems::ContextBase::ContextBase(drake::systems::ContextBase const&)
0000000000080cf0  w   DF .text	00000000000002df  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::Clear()
0000000000311778  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*) const>
000000000007a0b0  w   DF .text	000000000000001e  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::add_event(std::unique_ptr<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >)
0000000000312730  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for std::_Sp_counted_ptr_inplace<spdlog::pattern_formatter, std::allocator<spdlog::pattern_formatter>, (__gnu_cxx::_Lock_policy)2>
00000000000c1050  w   DF .text	00000000000001ef  Base        std::_Rb_tree<drake::systems::PeriodicEventData, std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >, std::_Select1st<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > >, drake::systems::PeriodicEventDataComparator, std::allocator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > >, drake::systems::PeriodicEventData const&)
0000000000072f40  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*), drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*&&)
00000000003133e0  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::i_formatter
000000000008c0e0  w   DF .text	000000000000003c  Base        spdlog::details::d_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000ac870  w   DF .text	0000000000000025  Base        std::_Function_handler<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&), drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const&)
0000000000072430  w   DF .text	000000000000000a  Base        drake::systems::System<double>::DoCalcNonConservativePower(drake::systems::Context<double> const&) const
0000000000313020  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::A_formatter
0000000000073850  w   DF .text	000000000000006b  Base        drake::systems::BasicVector<drake::symbolic::Expression>::DoPlusEqScaled(std::initializer_list<std::pair<drake::symbolic::Expression, drake::systems::VectorBase<drake::symbolic::Expression> const&> > const&)
00000000000ee0a0  w   DO .rodata	0000000000000044  Base        typeinfo name for drake::systems::internal::DiagramOutput<drake::symbolic::Expression>
0000000000072040  w   DF .text	0000000000000006  Base        spdlog::details::S_formatter::~S_formatter()
00000000000754c0  w   DF .text	0000000000000047  Base        drake::systems::DiagramCompositeEventCollection<double>::get_mutable_subevent_collection(int)
0000000000073810  w   DF .text	000000000000000d  Base        drake::systems::DiagramContext<double>::get_state() const
000000000008c650  w   DF .text	000000000000001d  Base        spdlog::details::R_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000a7d80  w   DF .text	000000000000008d  Base        std::_Rb_tree_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> > std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&>&&, std::tuple<>&&)
00000000000a2020  w   DF .text	00000000000002da  Base        std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateForcedEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >(std::function<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)>) const
00000000000be0f0  w   DF .text	0000000000000145  Base        std::pair<std::_Rb_tree_iterator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, bool> std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::_Identity<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::_M_insert_unique<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&>(std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&)
00000000000834d0  w   DF .text	0000000000000094  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoAllocateInputVector(drake::systems::InputPortDescriptor<drake::symbolic::Expression> const&) const
0000000000313528  w   DO .data.rel.ro	0000000000000040  Base        vtable for spdlog::sinks::stderr_sink<std::mutex>
0000000000316700 u    DO .data	0000000000000028  Base        fmt::internal::BasicData<void>::POWERS_OF_10_32
0000000000314e30  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiscreteUpdateEvent<double>
000000000008f000  w   DF .text	00000000000000a1  Base        std::_Hashtable<drake::systems::SystemScalarConverter::Key, std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> >, std::allocator<std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> > >, std::__detail::_Select1st, std::equal_to<drake::systems::SystemScalarConverter::Key>, drake::systems::SystemScalarConverter::KeyHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Hashtable(std::_Hashtable<drake::systems::SystemScalarConverter::Key, std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> >, std::allocator<std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> > >, std::__detail::_Select1st, std::equal_to<drake::systems::SystemScalarConverter::Key>, drake::systems::SystemScalarConverter::KeyHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >&&)
000000000007a400  w   DF .text	0000000000000088  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetGraphvizInputPortToken(drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000a3fd0  w   DF .text	0000000000000046  Base        std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_insert_node(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >*)
0000000000314400  w   DO .data.rel.ro	0000000000000070  Base        vtable for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000084980  w   DF .text	0000000000000099  Base        std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator=(std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&)
00000000000b0c10  w   DF .text	0000000000000067  Base        drake::systems::DiagramDiscreteValues<double>::~DiagramDiscreteValues()
00000000000ade60  w   DF .text	000000000000039d  Base        drake::systems::Diagram<drake::symbolic::Expression>::Diagram(std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> >)
0000000000312be0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramOutputPort<drake::symbolic::Expression>
0000000000074860  w   DF .text	000000000000000f  Base        drake::systems::Subvector<drake::symbolic::Expression>::~Subvector()
00000000000a1720  w   DF .text	00000000000000f1  Base        void std::vector<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::emplace_back<drake::systems::System<drake::symbolic::Expression> const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&>(drake::systems::System<drake::symbolic::Expression> const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&)
00000000000df630  w   DF .text	0000000000000302  Base        drake::systems::LeafSystem<double>::DoCalcNextUpdateTime(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*, double*) const
00000000000a1520  w   DF .text	00000000000000f1  Base        void std::vector<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::emplace_back<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&>(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&)
000000000007ea10  w   DF .text	000000000000007d  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::~DiagramEventCollection()
00000000000e77d4 g    DF .fini	0000000000000000  Base        _fini
00000000003124b8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::VectorBase<double>
0000000000075a10  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<double>::DoGetTargetSystemContext(drake::systems::System<double> const&, drake::systems::Context<double> const*) const
00000000000ee320  w   DO .rodata	000000000000006c  Base        typeinfo name for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000312548  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::CompositeEventCollection<double>
00000000000c4f70  w   DF .text	0000000000000149  Base        drake::systems::Diagram<double>::AllocateDiscreteVariables() const
000000000009cb60  w   DF .text	000000000000018d  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~System()
00000000000734f0  w   DF .text	0000000000000037  Base        std::_Function_base::_Base_manager<drake::systems::VectorBase<drake::symbolic::Expression>& (*)(drake::systems::ContinuousState<drake::symbolic::Expression>*)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000096800  w   DF .text	0000000000000191  Base        void std::vector<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg>, std::allocator<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg> > >::_M_emplace_back_aux<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg> >(std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg>&&)
00000000000a7c90  w   DF .text	00000000000000ee  Base        std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&)
00000000000f3320  w   DO .rodata	00000000000000cc  Base        typeinfo name for drake::systems::SystemScalarConverter::Add<double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}
00000000000af030  w   DF .text	000000000000004d  Base        drake::systems::DiagramContinuousState<drake::symbolic::Expression>::~DiagramContinuousState()
00000000000c38d0  w   DF .text	0000000000000417  Base        drake::systems::Diagram<double>::GetDirectFeedthroughs() const
00000000000f43a0  w   DO .rodata	000000000000008f  Base        typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const
00000000000d8570  w   DF .text	00000000000000c9  Base        std::_Function_base::_Base_manager<drake::systems::LeafSystem<double>::MaybeDeclareVectorBaseInequalityConstraint(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, drake::systems::VectorBase<double> const&, std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)> const&)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::LeafSystem<double>::MaybeDeclareVectorBaseInequalityConstraint(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, drake::systems::VectorBase<double> const&, std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)> const&)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}> const&, std::_Manager_operation)
0000000000310a28  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::State<double>& (int)
00000000000bd740  w   DF .text	0000000000000104  Base        __gnu_cxx::__normal_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > > std::__find_if<__gnu_cxx::__normal_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > >, __gnu_cxx::__ops::_Iter_equals_val<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const> >(__gnu_cxx::__normal_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > >, __gnu_cxx::__normal_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > >, __gnu_cxx::__ops::_Iter_equals_val<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const>, std::random_access_iterator_tag)
000000000007a050  w   DF .text	000000000000001e  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::add_event(std::unique_ptr<drake::systems::PublishEvent<drake::symbolic::Expression>, std::default_delete<drake::systems::PublishEvent<drake::symbolic::Expression> > >)
000000000007a550  w   DF .text	000000000000001f  Base        drake::systems::System<drake::symbolic::Expression>::DoCalcNonConservativePower(drake::systems::Context<drake::symbolic::Expression> const&) const
000000000007a2e0  w   DF .text	0000000000000088  Base        drake::systems::Diagram<drake::symbolic::Expression>::GetGraphvizInputPortToken(drake::systems::InputPortDescriptor<drake::symbolic::Expression> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000ef420  w   DO .rodata	0000000000000077  Base        typeinfo name for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const
0000000000072470  w   DF .text	000000000000000e  Base        drake::systems::System<double>::SetRandomParameters(drake::systems::Context<double> const&, drake::systems::Parameters<double>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
00000000000f6c20  w   DO .rodata	000000000000006e  Base        typeinfo name for std::_Sp_counted_ptr_inplace<RigidBodyFrame<double>, Eigen::aligned_allocator<RigidBodyFrame<double> >, (__gnu_cxx::_Lock_policy)2>
0000000000089f00  w   DF .text	000000000000007e  Base        drake::systems::RungeKutta3Integrator<double>::~RungeKutta3Integrator()
00000000003123e8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::internal::SystemParentServiceInterface
00000000000b0490  w   DF .text	000000000000014b  Base        drake::systems::BasicVector<double>::Clone() const
0000000000080a10  w   DF .text	00000000000002df  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::Clear()
0000000000312800  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > (drake::systems::System<double>::*)() const
0000000000074d90  w   DF .text	000000000000006e  Base        drake::systems::DiagramContext<double>::GetMutableSubsystemContext(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000000dec30  w   DF .text	0000000000000142  Base        drake::systems::LeafContext<double>::~LeafContext()
00000000000e2c50  w   DF .text	000000000000000a  Base        std::_Sp_counted_ptr_inplace<RigidBodyFrame<double>, Eigen::aligned_allocator<RigidBodyFrame<double> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
00000000000a89a0  w   DF .text	000000000000008d  Base        std::_Rb_tree_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> > std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&>&&, std::tuple<>&&)
000000000008a370  w   DF .text	00000000000000df  Base        spdlog::details::Y_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000a5430  w   DF .text	0000000000000bbf  Base        drake::systems::Diagram<drake::symbolic::Expression>::GetGraphvizFragment(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000717a0  w   DF .text	0000000000000060  Base        drake::systems::State<double>::~State()
00000000000ede60  w   DO .rodata	0000000000000084  Base        typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > ()
0000000000073e10  w   DF .text	000000000000007b  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::~DiagramEventCollection()
0000000000072660  w   DF .text	00000000000000c8  Base        drake::systems::VectorBase<double>::DoPlusEqScaled(std::initializer_list<std::pair<double, drake::systems::VectorBase<double> const&> > const&)
00000000000735a0  w   DF .text	0000000000000037  Base        std::_Function_base::_Base_manager<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (*)(drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000d5300  w   DF .text	0000000000000066  Base        drake::systems::LeafSystem<double>::DoCalcUnrestrictedUpdate(drake::systems::Context<double> const&, std::vector<drake::systems::UnrestrictedUpdateEvent<double> const*, std::allocator<drake::systems::UnrestrictedUpdateEvent<double> const*> > const&, drake::systems::State<double>*) const
0000000000073fc0  w   DF .text	0000000000000047  Base        drake::systems::Supervector<drake::symbolic::Expression>::~Supervector()
00000000000740e0  w   DF .text	0000000000000047  Base        drake::systems::Supervector<double>::~Supervector()
00000000000ed5a0  w   DO .rodata	0000000000000052  Base        typeinfo name for Eigen::internal::auto_diff_special_op<Eigen::Matrix<double, -1, 1, 0, -1, 1>, false>
0000000000097050  w   DF .text	00000000000000c7  Base        fmt::internal::require_numeric_argument(fmt::internal::Arg const&, char)
0000000000310a98  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*)
00000000000ee240  w   DO .rodata	0000000000000038  Base        typeinfo name for drake::systems::Parameters<drake::symbolic::Expression>
00000000000b24f0  w   DF .text	0000000000000045  Base        drake::systems::DiscreteValues<drake::symbolic::Expression>::~DiscreteValues()
0000000000084350  w   DF .text	0000000000000069  Base        drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetZero()
00000000000c5df0  w   DF .text	0000000000000149  Base        drake::systems::Diagram<drake::symbolic::Expression>::AllocateDiscreteVariables() const
0000000000072030  w   DF .text	0000000000000006  Base        spdlog::details::e_formatter::~e_formatter()
0000000000312258  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::E_formatter
00000000000d0da0  w   DF .text	000000000000066c  Base        drake::systems::DiagramContext<drake::symbolic::Expression>::DiagramContext(drake::systems::DiagramContext<drake::symbolic::Expression> const&)
0000000000311650  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)>
00000000000f1c80  w   DO .rodata	0000000000000024  Base        typeinfo name for drake::systems::DiagramContext<double>
0000000000311540  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::Context<drake::symbolic::Expression>& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>
00000000000defb0  w   DF .text	0000000000000143  Base        void std::vector<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > > >::emplace_back<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > >(std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >&&)
0000000000079c50  w   DF .text	000000000000008d  Base        drake::systems::VectorBase<double>::SetFrom(drake::systems::VectorBase<double> const&)
00000000000f1420  w   DO .rodata	0000000000000023  Base        typeinfo name for spdlog::details::level_formatter
00000000000a7e10  w   DF .text	0000000000000721  Base        std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> > drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ConvertScalarType<double>() const
000000000007a570  w   DF .text	000000000000001f  Base        drake::systems::System<drake::symbolic::Expression>::DoCalcConservativePower(drake::systems::Context<drake::symbolic::Expression> const&) const
0000000000074b80  w   DF .text	0000000000000014  Base        spdlog::sinks::stderr_sink<std::mutex>::_flush()
00000000000a23b0  w   DF .text	00000000000002da  Base        std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateForcedEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >(std::function<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)>) const
00000000000efae0  w   DO .rodata	000000000000004b  Base        typeinfo name for drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*) const
0000000000075620  w   DF .text	0000000000000009  Base        non-virtual thunk to drake::systems::Diagram<double>::GetParentPathname() const
00000000000f2260  w   DO .rodata	0000000000000041  Base        typeinfo name for drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >
000000000007a0d0  w   DF .text	0000000000000018  Base        drake::systems::Value<int>::~Value()
0000000000074470  w   DF .text	000000000000000f  Base        spdlog::details::F_formatter::~F_formatter()
00000000000f0180  w   DO .rodata	0000000000000080  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*) const>
00000000000bbe10  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
00000000000ef680  w   DO .rodata	000000000000009c  Base        typeinfo name for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)
00000000000da900  w   DF .text	000000000000005a  Base        drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >::add_event(std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > >)
000000000007b040  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000b3e60  w   DF .text	0000000000000065  Base        std::_Rb_tree<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::find(std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&) const
00000000000d5240  w   DF .text	0000000000000010  Base        drake::systems::LeafSystem<double>::DoHasDirectFeedthrough(int, int) const
0000000000074620  w   DF .text	000000000000003f  Base        fmt::internal::MemoryBuffer<char, 500ul, std::allocator<char> >::~MemoryBuffer()
000000000008b270  w   DF .text	00000000000001bc  Base        drake::systems::System<double>::SetDefaultContext(drake::systems::Context<double>*) const
0000000000310e48  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000728f0  w   DF .text	000000000000000e  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetRandomParameters(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
000000000009dbc0  w   DF .text	00000000000000c9  Base        std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<double, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<double, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}> const&, std::_Manager_operation)
0000000000312198  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::d_formatter
00000000000725f0  w   DF .text	000000000000006d  Base        drake::systems::VectorBase<double>::NormInf() const
00000000000b9c40  w   DF .text	000000000000014b  Base        drake::systems::OutputPort<drake::symbolic::Expression>::Allocate() const
0000000000072b30  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*), drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*&&)
000000000007abf0  w   DF .text	0000000000000079  Base        std::_Function_base::_Base_manager<drake::systems::Diagram<double>::Initialize(std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> >)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::Diagram<double>::Initialize(std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> >)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}> const&, std::_Manager_operation)
0000000000079ff0  w   DF .text	000000000000001e  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::add_event(std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > >)
00000000000f5da0  w   DO .rodata	0000000000000032  Base        typeinfo name for drake::systems::LeafCompositeEventCollection<double>
0000000000071f90  w   DF .text	0000000000000006  Base        spdlog::details::pid_formatter::~pid_formatter()
0000000000072100  w   DF .text	0000000000000006  Base        spdlog::details::A_formatter::~A_formatter()
00000000000afa20  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
0000000000094040  w   DF .text	0000000000000854  Base        drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ScaleAndAddToVector(Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > const&, Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>, 0, Eigen::InnerStride<1> >) const
0000000000312dd8  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const
00000000000baee0  w   DF .text	0000000000000b6b  Base        drake::systems::DiscreteValues<drake::symbolic::Expression>::DoClone() const
00000000000a8a30  w   DF .text	00000000000007f9  Base        std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> > drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ConvertScalarType<drake::symbolic::Expression>() const
0000000000072c00  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*), drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*&&)
0000000000314298  w   DO .data.rel.ro	0000000000000038  Base        vtable for std::_Sp_counted_ptr_inplace<spdlog::pattern_formatter, std::allocator<spdlog::pattern_formatter>, (__gnu_cxx::_Lock_policy)2>
0000000000080fd0  w   DF .text	0000000000000083  Base        spdlog::pattern_formatter::~pattern_formatter()
00000000000b7990  w   DF .text	0000000000000144  Base        void std::vector<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > > > >::emplace_back<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > > >(std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > >&&)
0000000000314098  w   DO .data.rel.ro	0000000000000050  Base        vtable for drake::systems::IntegratorBase<double>
00000000000efdc0  w   DO .rodata	000000000000006a  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::State<drake::symbolic::Expression>& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int)>
0000000000313070  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::B_formatter
0000000000310f10  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::SystemOutput<double>
00000000003113e8  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::State<double> const& (drake::systems::DiagramState<double>::*)(int) const
0000000000311768  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<double>& (drake::systems::DiagramCompositeEventCollection<double>::*)(int)>
0000000000073760  w   DF .text	000000000000000d  Base        drake::systems::DiagramContext<drake::symbolic::Expression>::get_mutable_parameters()
00000000000b4030  w   DF .text	00000000000001be  Base        std::unique_ptr<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > drake::dynamic_pointer_cast_or_throw<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, drake::systems::ContextBase>(std::unique_ptr<drake::systems::ContextBase, std::default_delete<drake::systems::ContextBase> >&&)
0000000000073f30  w   DF .text	000000000000002a  Base        drake::systems::internal::DiagramOutput<drake::symbolic::Expression>::~DiagramOutput()
00000000000e1440  w   DF .text	0000000000000468  Base        drake::systems::SystemSymbolicInspector::~SystemSymbolicInspector()
00000000000cddd0  w   DF .text	000000000000015a  Base        drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::MakeState()
00000000000afa90  w   DF .text	0000000000000040  Base        drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramContinuousState()
00000000000b3090  w   DF .text	0000000000000874  Base        drake::systems::Diagram<drake::symbolic::Expression>::SetRandomParameters(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::Parameters<drake::symbolic::Expression>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
00000000000cd980  w   DF .text	000000000000005f  Base        drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoClone() const
0000000000316a80 u    DO .bss	0000000000000008  Base        guard variable for drake::NiceTypeName::Get<drake::systems::ContextBase>()::canonical
0000000000073d10  w   DF .text	000000000000007b  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::~DiagramEventCollection()
0000000000093f50  w   DF .text	00000000000000e3  Base        drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetFromVector(Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&)
00000000000cd9e0  w   DF .text	0000000000000287  Base        std::_MakeUniq<drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::__single_object std::make_unique<drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, int&>(int&)
0000000000311118  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int)
000000000007c0e0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramCompositeEventCollection<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<double> const& (drake::systems::DiagramCompositeEventCollection<double>::*)(int) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000003140e8  w   DO .data.rel.ro	0000000000000050  Base        vtable for drake::systems::RungeKutta3Integrator<double>
00000000000f2380  w   DO .rodata	0000000000000052  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double>*) const>
00000000000c82b0  w   DF .text	00000000000000e8  Base        void std::vector<int, std::allocator<int> >::_M_emplace_back_aux<int const&>(int const&)
00000000000aaa30  w   DF .text	0000000000000080  Base        std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> >, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > > >::_M_get_insert_unique_pos(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&)
00000000000af9a0  w   DF .text	0000000000000032  Base        drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramCompositeEventCollection()
00000000000e2dc0  w   DF .text	000000000000000f  Base        std::_Sp_counted_ptr_inplace<RigidBodyFrame<double>, Eigen::aligned_allocator<RigidBodyFrame<double> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
0000000000312bf8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >
00000000000f6740  w   DO .rodata	0000000000000094  Base        typeinfo name for drake::systems::LeafOutputPort<double>::set_calculation_function(std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>)::{lambda(drake::systems::Context<double> const&, drake::systems::AbstractValue*)#1}
0000000000088970  w   DF .text	0000000000000144  Base        void std::vector<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >, std::allocator<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > > >::emplace_back<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > >(std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >&&)
00000000000731d0  w   DF .text	0000000000000023  Base        std::_Function_handler<drake::systems::CompositeEventCollection<double> const& (drake::systems::DiagramCompositeEventCollection<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<double> const& (drake::systems::DiagramCompositeEventCollection<double>::*)(int) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramCompositeEventCollection<double> const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000311640  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>
0000000000310c00  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > ()
0000000000311590  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*) const>
0000000000310f20  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::internal::DiagramOutput<double>
0000000000079ef0  w   DF .text	000000000000005d  Base        drake::systems::System<drake::symbolic::Expression>::DoMapVelocityToQDot(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Ref<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<drake::symbolic::Expression>*) const
00000000000a50a0  w   DF .text	0000000000000388  Base        drake::systems::System<drake::symbolic::Expression>::get_output_port(int) const
00000000000ba540  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::Context<drake::symbolic::Expression>, std::default_delete<drake::systems::Context<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::Context<drake::symbolic::Expression>, std::default_delete<drake::systems::Context<drake::symbolic::Expression> > > > >::~vector()
00000000000747c0  w   DF .text	000000000000000f  Base        drake::systems::DiagramOutputPort<double>::~DiagramOutputPort()
000000000009b300  w   DF .text	00000000000002bb  Base        void spdlog::logger::log<char const*>(spdlog::level::level_enum, char const*, char const* const&)
00000000000f0760  w   DO .rodata	000000000000009c  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>
0000000000080450  w   DF .text	00000000000002df  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::Clear()
0000000000072a10  w   DF .text	0000000000000006  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetInitializationEvents(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000003147c8  w   DO .data.rel.ro	0000000000000208  Base        vtable for drake::systems::Diagram<drake::symbolic::Expression>
0000000000090ee0  w   DF .text	00000000000008b3  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcNextUpdateTime(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >*) const
00000000000de5e0  w   DF .text	0000000000000357  Base        drake::systems::LeafSystem<double>::SetDefaultParameters(drake::systems::Context<double> const&, drake::systems::Parameters<double>*) const
0000000000310998  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)
0000000000310be0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > ()
0000000000075ff0  w   DF .text	000000000000005d  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcWitnessValue(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
00000000000ddf70  w   DF .text	0000000000000353  Base        void drake::systems::detail::CheckBasicVectorInvariants<double>(drake::systems::BasicVector<double> const*)
00000000000850c0  w   DF .text	000000000000005d  Base        drake::systems::DiagramContext<double>::set_accuracy(stx::optional<double> const&)
0000000000074f90  w   DF .text	0000000000000033  Base        drake::systems::System<drake::symbolic::Expression>::DoCalcTimeDerivatives(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression>*) const
000000000008e310  w   DF .text	000000000000024f  Base        drake::symbolic::Expression* Eigen::internal::conditional_aligned_new_auto<drake::symbolic::Expression, true>(unsigned long)
00000000000d64e0  w   DF .text	00000000000000c9  Base        drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >::~LeafEventCollection()
000000000007ca90  w   DF .text	0000000000000061  Base        drake::systems::BasicVector<drake::symbolic::Expression>::GetAtIndex(int) const
00000000003136e0  w   DO .data.rel.ro	00000000000001c8  Base        vtable for drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000072110  w   DF .text	0000000000000006  Base        spdlog::details::a_formatter::~a_formatter()
0000000000312ab0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::Context<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double> const*) const>
00000000003116c0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>
00000000000ef540  w   DO .rodata	000000000000008c  Base        typeinfo name for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const
000000000008c160  w   DF .text	0000000000000055  Base        spdlog::details::C_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000310c20  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Context<double>* (drake::systems::System<double> const&, drake::systems::Context<double>*)
0000000000312ee0  w   DO .data.rel.ro	0000000000000020  Base        vtable for fmt::BasicMemoryWriter<char, std::allocator<char> >
0000000000312e60  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>
000000000007cd70  w   DF .text	000000000000007a  Base        drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_mutable_port_value(int)
000000000007e450  w   DF .text	00000000000001df  Base        drake::systems::Diagram<double>::DoCalcTimeDerivatives(drake::systems::Context<double> const&, drake::systems::ContinuousState<double>*) const
0000000000079e30  w   DF .text	000000000000005d  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoMapVelocityToQDot(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000071700  w   DF .text	0000000000000010  Base        drake::systems::System<double>::AllocateTimeDerivatives() const
0000000000312240  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::F_formatter
00000000000b7c30  w   DF .text	00000000000000d3  Base        void std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> >::emplace_back<drake::systems::BasicVector<double>*>(drake::systems::BasicVector<double>*&&)
0000000000073470  w   DF .text	000000000000000a  Base        drake::systems::DiagramContinuousState<double>::z_selector(drake::systems::ContinuousState<double>*)
0000000000072150  w   DF .text	0000000000000006  Base        drake::systems::Subvector<drake::symbolic::Expression>::~Subvector()
00000000000b17d0  w   DF .text	0000000000000648  Base        drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::DiagramCompositeEventCollection(std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, std::default_delete<drake::systems::CompositeEventCollection<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, std::default_delete<drake::systems::CompositeEventCollection<drake::symbolic::Expression> > > > >)
00000000000edd00  w   DO .rodata	000000000000006f  Base        typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > ()
00000000000719a0  w   DF .text	0000000000000036  Base        std::_Function_handler<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > (drake::systems::System<double> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > (drake::systems::System<double>::*)() const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&)
00000000003128f8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::Context<drake::symbolic::Expression>
0000000000090df0  w   DF .text	00000000000000ea  Base        drake::systems::System<drake::symbolic::Expression>::DoCalcVelocityChangeFromConstraintImpulses(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<double, -1, -1, 0, -1, -1> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&) const
0000000000074540  w   DF .text	000000000000000f  Base        spdlog::details::B_formatter::~B_formatter()
0000000000090590  w   DF .text	0000000000000131  Base        drake::systems::System<double>::CalcUnrestrictedUpdate(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > const&, drake::systems::State<double>*) const
0000000000073a90  w   DF .text	000000000000007b  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::~DiagramEventCollection()
00000000000f16d0  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::p_formatter
000000000007c780  w   DF .text	0000000000000069  Base        drake::systems::Subvector<double>::GetAtIndex(int)
00000000000baa40  w   DF .text	0000000000000198  Base        void drake::systems::DiscreteValues<drake::symbolic::Expression>::SetFromGeneric<drake::symbolic::Expression>(drake::systems::DiscreteValues<drake::symbolic::Expression> const&)
00000000000ec760  w   DO .rodata	000000000000004a  Base        typeinfo name for drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (int)
000000000009a9e0  w   DF .text	00000000000002c3  Base        void spdlog::logger::log<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(spdlog::level::level_enum, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000a4020  w   DF .text	000000000000006f  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetSystemIndexOrAbort(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
0000000000312b50  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000311488  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::CompositeEventCollection<double>& (drake::systems::DiagramCompositeEventCollection<double>::*)(int)
00000000000eed00  w   DO .rodata	0000000000000050  Base        typeinfo name for drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const
00000000000aeff0  w   DF .text	0000000000000040  Base        drake::systems::DiagramContinuousState<drake::symbolic::Expression>::~DiagramContinuousState()
00000000000f15d0  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::H_formatter
0000000000094aa0  w   DF .text	0000000000000080  Base        std::pair<std::__detail::_Node_iterator<drake::systems::System<double> const*, true, false>, bool> std::_Hashtable<drake::systems::System<double> const*, drake::systems::System<double> const*, std::allocator<drake::systems::System<double> const*>, std::__detail::_Identity, std::equal_to<drake::systems::System<double> const*>, std::hash<drake::systems::System<double> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert<drake::systems::System<double> const*, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<drake::systems::System<double> const*, false> > > >(drake::systems::System<double> const*&&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<drake::systems::System<double> const*, false> > > const&, std::integral_constant<bool, true>)
00000000000aef80  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<drake::symbolic::Expression>, std::default_delete<drake::systems::ContinuousState<drake::symbolic::Expression> > > > >::~vector()
00000000000ed4e0  w   DO .rodata	0000000000000042  Base        typeinfo name for drake::systems::ContinuousState<drake::symbolic::Expression> const& (int)
00000000000ef2a0  w   DO .rodata	0000000000000076  Base        typeinfo name for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000ed3a0  w   DO .rodata	0000000000000036  Base        typeinfo name for drake::systems::State<drake::symbolic::Expression>& (int)
00000000000cf3f0  w   DF .text	00000000000001d1  Base        Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > const Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >::operator*<Eigen::Matrix<double, -1, 1, 0, -1, 1> >(Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > const&) const
00000000000ee580  w   DO .rodata	000000000000006a  Base        typeinfo name for drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000724c0  w   DF .text	0000000000000012  Base        drake::systems::System<double>::DoGetTargetSystemContinuousState(drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*) const
00000000000d5740  w   DF .text	000000000000003f  Base        drake::systems::LeafSystem<double>::DoCalcWitnessValue(drake::systems::Context<double> const&, drake::systems::WitnessFunction<double> const&) const
00000000000f4820  w   DO .rodata	00000000000000aa  Base        typeinfo name for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>
0000000000074a80  w   DF .text	0000000000000032  Base        fmt::FormatError::~FormatError()
0000000000074130  w   DF .text	0000000000000078  Base        drake::systems::DiagramState<drake::symbolic::Expression>::~DiagramState()
00000000000755b0  w   DF .text	0000000000000047  Base        drake::systems::DiagramState<double>::get_substate(int) const
00000000000ecaa0  w   DO .rodata	0000000000000072  Base        typeinfo name for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)
000000000009f6b0  w   DF .text	0000000000000270  Base        drake::systems::Diagram<double>::Diagram(std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> >)
00000000000ded80  w   DF .text	000000000000012f  Base        drake::systems::LeafContext<double>::~LeafContext()
0000000000312680  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >
000000000008d580  w   DF .text	000000000000003f  Base        std::_MakeUniq<drake::systems::Diagram<double>::Blueprint>::__single_object std::make_unique<drake::systems::Diagram<double>::Blueprint>()
0000000000312d00  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const
00000000000a39e0  w   DF .text	0000000000000109  Base        std::vector<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > > >::~vector()
00000000000f1e00  w   DO .rodata	0000000000000022  Base        typeinfo name for drake::systems::PublishEvent<double>
00000000000c7ec0  w   DF .text	000000000000025b  Base        std::vector<drake::systems::DependencyTracker const*, std::allocator<drake::systems::DependencyTracker const*> >::_M_fill_insert(__gnu_cxx::__normal_iterator<drake::systems::DependencyTracker const**, std::vector<drake::systems::DependencyTracker const*, std::allocator<drake::systems::DependencyTracker const*> > >, unsigned long, drake::systems::DependencyTracker const* const&)
00000000000b24a0  w   DF .text	0000000000000047  Base        drake::systems::DiscreteValues<drake::symbolic::Expression>::~DiscreteValues()
00000000000db080  w   DF .text	000000000000022c  Base        drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >::DoMerge(drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > const&)
0000000000310f98  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >
00000000000ef9c0  w   DO .rodata	000000000000004c  Base        typeinfo name for drake::systems::ContinuousState<double> const& (drake::systems::DiagramContinuousState<double>::*)(int) const
0000000000312ac0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::Context<double> const& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>
0000000000310dd0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000083de0  w   DF .text	000000000000017d  Base        spdlog::async_logger::flush()
00000000000f1300  w   DO .rodata	0000000000000022  Base        typeinfo name for fmt::BasicMemoryWriter<char, std::allocator<char> >
0000000000316ad0 u    DO .bss	0000000000000010  Base        spdlog::sinks::stderr_sink<std::mutex>::instance()::instance
00000000000ede20  w   DO .rodata	000000000000003c  Base        typeinfo name for drake::systems::DiscreteValues<drake::symbolic::Expression>
0000000000073170  w   DF .text	0000000000000023  Base        std::_Function_handler<drake::systems::CompositeEventCollection<double>& (drake::systems::DiagramCompositeEventCollection<double>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<double>& (drake::systems::DiagramCompositeEventCollection<double>::*)(int)>::_M_invoke(std::_Any_data const&, drake::systems::DiagramCompositeEventCollection<double>*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000072010  w   DF .text	0000000000000006  Base        spdlog::details::F_formatter::~F_formatter()
0000000000090cd0  w   DF .text	00000000000000a8  Base        drake::systems::BasicVector<double>::DoClone() const
000000000007dc20  w   DF .text	0000000000000085  Base        drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramState()
00000000000f3920  w   DO .rodata	0000000000000083  Base        typeinfo name for drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000316940 u    DO .bss	0000000000000008  Base        guard variable for drake::NiceTypeName::Get<drake::systems::Diagram<drake::symbolic::Expression> >()::canonical
0000000000074420  w   DF .text	000000000000000f  Base        spdlog::details::T_formatter::~T_formatter()
000000000009d2a0  w   DF .text	0000000000000024  Base        drake::systems::System<drake::symbolic::Expression>::~System()
00000000000b13e0  w   DF .text	0000000000000034  Base        drake::systems::Value<int>::GetNiceTypeName() const
000000000009a9e0  w   DF .text	00000000000002c3  Base        void spdlog::logger::log<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(spdlog::level::level_enum, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000738c0  w   DF .text	0000000000000032  Base        fmt::internal::MemoryBuffer<char, 500ul, std::allocator<char> >::~MemoryBuffer()
0000000000083610  w   DF .text	0000000000000094  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoAllocateInputVector(drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
0000000000072120  w   DF .text	0000000000000006  Base        spdlog::details::short_level_formatter::~short_level_formatter()
00000000000c3810  w   DF .text	00000000000000b6  Base        std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::_Identity<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::equal_range(std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > const&)
0000000000312458  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::PeriodicEventData
0000000000085120  w   DF .text	0000000000000089  Base        std::vector<drake::copyable_unique_ptr<drake::systems::CacheEntryValue>, std::allocator<drake::copyable_unique_ptr<drake::systems::CacheEntryValue> > >::~vector()
00000000000ca3e0  w   DF .text	0000000000000312  Base        drake::systems::DiagramContinuousState<double>::Span(std::vector<drake::systems::ContinuousState<double>*, std::allocator<drake::systems::ContinuousState<double>*> > const&, std::function<drake::systems::VectorBase<double>& (drake::systems::ContinuousState<double>*)>)
00000000003117d8  w   DO .data.rel.ro	0000000000000020  Base        typeinfo for drake::systems::VectorBase<double>& (*)(drake::systems::ContinuousState<double>*)
00000000000b1e20  w   DF .text	00000000000001a4  Base        drake::systems::Diagram<drake::symbolic::Expression>::AllocateCompositeEventCollection() const
00000000000c3140  w   DF .text	0000000000000166  Base        void std::vector<std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > >, std::allocator<std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > > > >::emplace_back<std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > > >(std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > >&&)
0000000000314de0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >
00000000000866e0  w   DF .text	000000000000006e  Base        std::_Hashtable<drake::systems::WitnessFunction<double> const*, std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, std::allocator<std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > > >, std::__detail::_Select1st, std::equal_to<drake::systems::WitnessFunction<double> const*>, std::hash<drake::systems::WitnessFunction<double> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::~_Hashtable()
00000000000a6f90  w   DF .text	0000000000000080  Base        std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_get_insert_unique_pos(drake::systems::System<double> const* const&)
00000000000b0db0  w   DF .text	0000000000000268  Base        drake::systems::Diagram<double>::DoMapVelocityToQDot(drake::systems::Context<double> const&, Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<double>*) const
0000000000087a90  w   DF .text	0000000000000024  Base        drake::systems::DiagramContext<drake::symbolic::Expression>::~DiagramContext()
0000000000314058  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::DiagramBuilder<double>
00000000000caa50  w   DF .text	000000000000027a  Base        drake::systems::Diagram<double>::AllocateTimeDerivatives() const
00000000003115d0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*) const>
000000000008eb10  w   DF .text	000000000000009e  Base        std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_get_insert_unique_pos(std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&)
0000000000312eb8  w   DO .data.rel.ro	0000000000000028  Base        vtable for fmt::internal::MemoryBuffer<char, 500ul, std::allocator<char> >
00000000000ef720  w   DO .rodata	000000000000008b  Base        typeinfo name for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
0000000000316900 u    DO .bss	0000000000000008  Base        guard variable for drake::NiceTypeName::Get<int>()::canonical
000000000006ee78 g    DF .init	0000000000000000  Base        _init
00000000000732f0  w   DF .text	000000000000000a  Base        drake::systems::DiagramContinuousState<drake::symbolic::Expression>::q_selector(drake::systems::ContinuousState<drake::symbolic::Expression>*)
0000000000312528  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::SystemOutput<drake::symbolic::Expression>
0000000000312d60  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>
00000000000727e0  w   DF .text	0000000000000012  Base        drake::systems::System<drake::symbolic::Expression>::DoGetTargetSystemState(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*) const
00000000000f1f00  w   DO .rodata	0000000000000024  Base        typeinfo name for drake::systems::DiscreteValues<double>
0000000000312c50  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const
0000000000072b60  w   DF .text	0000000000000035  Base        std::_Function_handler<drake::systems::Context<drake::symbolic::Expression>& (drake::systems::DiagramContext<drake::symbolic::Expression>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<drake::symbolic::Expression>& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>::_M_invoke(std::_Any_data const&, drake::systems::DiagramContext<drake::symbolic::Expression>*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000310e38  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000316728 g    DO .data	0000000000000008  Base        fLD::FLAGS_notarget_realtime_rate
00000000000d1b20  w   DF .text	0000000000000055  Base        drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCloneWithoutPointers() const
0000000000075690  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<double>::DoGetMutableTargetSystemContext(drake::systems::System<double> const&, drake::systems::Context<double>*) const
000000000008d970  w   DF .text	00000000000001c6  Base        drake::systems::IntegratorBase<double>::ValidateSmallerStepSize(double const&, double const&) const
00000000003109e8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (int)
0000000000090c40  w   DF .text	0000000000000085  Base        void Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<double, -1, 1, 0, -1, 1>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1, 0, -1, 1> >, Eigen::internal::assign_op<double, double> >(Eigen::Matrix<double, -1, 1, 0, -1, 1>&, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1, 0, -1, 1> > const&, Eigen::internal::assign_op<double, double> const&)
00000000000df580  w   DF .text	00000000000000a3  Base        void std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> >::_M_emplace_back_aux<drake::systems::Event<double> const*>(drake::systems::Event<double> const*&&)
000000000007b600  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*), drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000daf50  w   DF .text	00000000000000cb  Base        void std::vector<drake::systems::DiscreteUpdateEvent<double> const*, std::allocator<drake::systems::DiscreteUpdateEvent<double> const*> >::emplace_back<drake::systems::DiscreteUpdateEvent<double> const*>(drake::systems::DiscreteUpdateEvent<double> const*&&)
0000000000079b50  w   DF .text	0000000000000028  Base        drake::systems::BasicVector<double>::~BasicVector()
000000000008d2c0  w   DF .text	000000000000015d  Base        drake::systems::System<double>::~System()
00000000000b82c0  w   DF .text	00000000000007bd  Base        drake::systems::Diagram<double>::SetDefaultParameters(drake::systems::Context<double> const&, drake::systems::Parameters<double>*) const
00000000000ee8e0  w   DO .rodata	000000000000006d  Base        typeinfo name for drake::systems::WitnessTriggeredEventData<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000a1920  w   DF .text	00000000000000f1  Base        void std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::emplace_back<drake::systems::System<double> const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&>(drake::systems::System<double> const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&)
00000000000e2c40  w   DF .text	0000000000000006  Base        std::_Sp_counted_ptr_inplace<RigidBodyFrame<double>, Eigen::aligned_allocator<RigidBodyFrame<double> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
00000000000d88e0  w   DF .text	000000000000016e  Base        drake::systems::LeafOutputPort<double>::DoCalc(drake::systems::Context<double> const&, drake::systems::AbstractValue*) const
0000000000071730  w   DF .text	0000000000000006  Base        drake::systems::IntegratorBase<double>::DoInitialize()
0000000000084850  w   DF .text	0000000000000018  Base        spdlog::details::ch_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000072020  w   DF .text	0000000000000006  Base        spdlog::details::f_formatter::~f_formatter()
0000000000071b90  w   DF .text	0000000000000037  Base        std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}> const&, std::_Manager_operation)
00000000000c6090  w   DF .text	0000000000000287  Base        void std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> >::_M_range_insert<__gnu_cxx::__normal_iterator<drake::systems::Event<double> const* const*, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > > >(__gnu_cxx::__normal_iterator<drake::systems::Event<double> const**, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > >, __gnu_cxx::__normal_iterator<drake::systems::Event<double> const* const*, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > >, __gnu_cxx::__normal_iterator<drake::systems::Event<double> const* const*, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > >, std::forward_iterator_tag)
000000000008bc30  w   DF .text	0000000000000094  Base        void fmt::BasicWriter<char>::write_int<unsigned int, fmt::IntFormatSpec<unsigned int, fmt::AlignTypeSpec<(char)0>, char> >(unsigned int, fmt::IntFormatSpec<unsigned int, fmt::AlignTypeSpec<(char)0>, char>)
0000000000082d80  w   DF .text	00000000000001fe  Base        drake::systems::Diagram<double>::DoGetInitializationEvents(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*) const
0000000000074e00  w   DF .text	000000000000006e  Base        drake::systems::DiagramContext<double>::GetSubsystemContext(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const
00000000000db730  w   DF .text	000000000000005a  Base        drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::add_event(std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > >)
0000000000071a80  w   DF .text	0000000000000006  Base        drake::systems::DiagramOutputPort<double>::~DiagramOutputPort()
00000000000b0690  w   DF .text	00000000000000cb  Base        drake::systems::PublishEvent<double>::DoClone() const
00000000000f15f0  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::I_formatter
0000000000312db0  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
00000000000a1f70  w   DF .text	00000000000000a6  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateForcedPublishEventCollection() const
00000000000852d0  w   DF .text	0000000000000103  Base        drake::systems::ContextBase::ContextBase()
00000000000ee160  w   DO .rodata	0000000000000043  Base        typeinfo name for drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>
00000000000b7ae0  w   DF .text	0000000000000144  Base        void std::vector<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > > > >::emplace_back<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > > >(std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >&&)
0000000000073720  w   DF .text	0000000000000009  Base        drake::systems::Subvector<drake::symbolic::Expression>::size() const
00000000000e4780  w   DF .text	000000000000007f  Base        std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)
00000000000d7a00  w   DF .text	00000000000000d1  Base        std::_Function_base::_Base_manager<drake::systems::LeafOutputPort<double>::set_calculation_function(std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>)::{lambda(drake::systems::Context<double> const&, drake::systems::AbstractValue*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::LeafOutputPort<double>::set_calculation_function(std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>)::{lambda(drake::systems::Context<double> const&, drake::systems::AbstractValue*)#1}> const&, std::_Manager_operation)
00000000003129f0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}
0000000000084eb0  w   DF .text	00000000000000a6  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)
00000000000927b0  w   DF .text	0000000000000338  Base        drake::systems::IntegratorBase<double>::Initialize()
00000000000b0cf0  w   DF .text	00000000000000b4  Base        drake::systems::Subvector<double>::Subvector(drake::systems::VectorBase<double>*, int, int)
00000000000afb90  w   DF .text	00000000000000b4  Base        drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Subvector(drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, int, int)
00000000000752f0  w   DF .text	0000000000000047  Base        drake::systems::DiagramState<drake::symbolic::Expression>::get_substate(int) const
00000000003109a8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (int)
0000000000312430  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::Value<int>
0000000000314268  w   DO .data.rel.ro	0000000000000030  Base        vtable for drake::systems::WitnessTriggeredEventData<double>
0000000000311b20  w   DO .data.rel.ro	0000000000000080  Base        vtable for drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000081fe0  w   DF .text	0000000000000324  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::HasEvents() const
0000000000312e90  w   DO .data.rel.ro	0000000000000028  Base        vtable for stx::bad_optional_access
00000000000cfcf0  w   DF .text	0000000000000018  Base        drake::systems::Supervector<drake::symbolic::Expression>::GetAtIndex(int) const
00000000000f1da0  w   DO .rodata	000000000000002b  Base        typeinfo name for drake::systems::RungeKutta3Integrator<double>
000000000009d7b0  w   DF .text	000000000000005e  Base        std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)>::function(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)
0000000000073840  w   DF .text	000000000000000d  Base        drake::systems::DiagramContext<double>::get_mutable_parameters()
00000000000ed000  w   DO .rodata	0000000000000045  Base        typeinfo name for drake::systems::CompositeEventCollection<double>* (drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*)
00000000000d1470  w   DF .text	00000000000006a2  Base        drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiagramContext(drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)
0000000000311580  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::State<drake::symbolic::Expression> const& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int) const>
00000000000b2350  w   DF .text	00000000000000d3  Base        void std::vector<drake::systems::AbstractValue*, std::allocator<drake::systems::AbstractValue*> >::emplace_back<drake::systems::AbstractValue*>(drake::systems::AbstractValue*&&)
0000000000312ae0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
00000000003135e0  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::State<double>
0000000000075660  w   DF .text	000000000000001b  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetParentPathname() const
00000000000a29f0  w   DF .text	0000000000000171  Base        void std::vector<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::emplace_back<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > >(std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >&&)
00000000000cd9e0  w   DF .text	0000000000000287  Base        std::_MakeUniq<drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::__single_object std::make_unique<drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, int&>(int&)
0000000000071b10  w   DF .text	0000000000000037  Base        std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}> const&, std::_Manager_operation)
00000000000720e0  w   DF .text	0000000000000006  Base        spdlog::details::B_formatter::~B_formatter()
000000000007cf40  w   DF .text	0000000000000049  Base        drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Supervector()
000000000007f530  w   DF .text	000000000000018f  Base        drake::systems::Diagram<double>::SetDefaultState(drake::systems::Context<double> const&, drake::systems::State<double>*) const
00000000003117f8  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::CompositeEventCollection<drake::symbolic::Expression>
00000000000ba4b0  w   DF .text	000000000000001f  Base        drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoAllocate() const
0000000000073530  w   DF .text	0000000000000060  Base        drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~State()
0000000000315878  w   DO .data.rel.ro	0000000000000040  Base        vtable for drake::systems::Value<drake::systems::BasicVector<double> >
00000000000ba140  w   DF .text	0000000000000219  Base        drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetPortIdString() const
00000000000c3390  w   DF .text	000000000000018a  Base        drake::systems::PublishEvent<double>::add_to_composite(drake::systems::CompositeEventCollection<double>*) const
00000000000736a0  w   DF .text	0000000000000009  Base        drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::size() const
00000000000747e0  w   DF .text	0000000000000024  Base        drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~CompositeEventCollection()
0000000000314138  w   DO .data.rel.ro	0000000000000038  Base        vtable for drake::systems::Event<double>
00000000000f36c0  w   DO .rodata	0000000000000053  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double> const*) const>
0000000000310c60  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > ()
0000000000084680  w   DF .text	00000000000000d2  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)
00000000000f04e0  w   DO .rodata	0000000000000090  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>
00000000003167c0 u    DO .bss	0000000000000008  Base        guard variable for drake::NiceTypeName::Get<drake::systems::BasicVector<double> >()::canonical
000000000007c080  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*), drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
000000000007eb90  w   DF .text	000000000000007d  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::~DiagramEventCollection()
0000000000074a60  w   DF .text	0000000000000018  Base        fmt::FormatError::~FormatError()
000000000008d220  w   DF .text	0000000000000098  Base        std::_Hashtable<drake::systems::SystemScalarConverter::Key, std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> >, std::allocator<std::pair<drake::systems::SystemScalarConverter::Key const, std::function<void* (void const*)> > >, std::__detail::_Select1st, std::equal_to<drake::systems::SystemScalarConverter::Key>, drake::systems::SystemScalarConverter::KeyHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()
000000000007c7f0  w   DF .text	0000000000000069  Base        drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetAtIndex(int) const
000000000009de30  w   DF .text	00000000000002cb  Base        drake::systems::SystemScalarConverter::SystemScalarConverter<drake::systems::Diagram>(drake::systems::SystemTypeTag<drake::systems::Diagram>, drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)
0000000000071e50  w   DF .text	0000000000000006  Base        drake::systems::DiagramOutputPort<drake::symbolic::Expression>::~DiagramOutputPort()
000000000008d5c0  w   DF .text	000000000000014e  Base        std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::operator=(std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > const&)
00000000000a1c90  w   DF .text	00000000000002da  Base        std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateForcedEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >(std::function<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)>) const
0000000000090090  w   DF .text	0000000000000186  Base        void drake::systems::ContinuousState<double>::SetFromGeneric<double>(drake::systems::ContinuousState<double> const&)
00000000000e3640  w   DF .text	000000000000004c  Base        std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)
0000000000075560  w   DF .text	0000000000000047  Base        drake::systems::DiagramState<double>::get_mutable_substate(int)
00000000000a0480  w   DF .text	0000000000000354  Base        drake::systems::IntegratorBase<double>::IntegrateAtMost(double const&, double const&, double const&)
000000000009d540  w   DF .text	000000000000005e  Base        std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)>::function(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)
00000000000b4de0  w   DF .text	0000000000000047  Base        drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiscreteValues()
0000000000312300  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::pid_formatter
0000000000311f90  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for fmt::internal::RuntimeError
00000000000db9b0  w   DF .text	000000000000003f  Base        drake::systems::Value<drake::systems::BasicVector<double> >::SetFromOrThrow(drake::systems::AbstractValue const&)
0000000000074500  w   DF .text	000000000000000f  Base        spdlog::details::Y_formatter::~Y_formatter()
00000000000b0a20  w   DF .text	0000000000000032  Base        drake::systems::DiagramCompositeEventCollection<double>::~DiagramCompositeEventCollection()
0000000000073d90  w   DF .text	000000000000007b  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::~DiagramEventCollection()
00000000000b0b50  w   DF .text	000000000000004d  Base        drake::systems::DiagramContinuousState<double>::~DiagramContinuousState()
00000000000a1520  w   DF .text	00000000000000f1  Base        void std::vector<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::emplace_back<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&>(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&)
00000000000ef1e0  w   DO .rodata	00000000000000a5  Base        typeinfo name for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000000b6770  w   DF .text	00000000000008d2  Base        drake::systems::ContinuousState<double>::ContinuousState(std::unique_ptr<drake::systems::VectorBase<double>, std::default_delete<drake::systems::VectorBase<double> > >, int, int, int)
00000000000e4650  w   DF .text	0000000000000125  Base        std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&>&&, std::tuple<>&&)
00000000000dadc0  w   DF .text	0000000000000026  Base        drake::systems::LeafSystem<double>::AllocateForcedPublishEventCollection() const
00000000000ecb80  w   DO .rodata	000000000000007d  Base        typeinfo name for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)
000000000007b190  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000b25b0  w   DF .text	0000000000000067  Base        drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>::~DiagramDiscreteValues()
0000000000089770  w   DF .text	0000000000000144  Base        void std::vector<std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> >, std::allocator<std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> > > >::emplace_back<std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> > >(std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> >&&)
0000000000074d60  w   DF .text	000000000000002a  Base        std::_Function_handler<void* (void const*), drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}>::_M_invoke(std::_Any_data const&, void const*&&)
0000000000085250  w   DF .text	0000000000000079  Base        std::vector<drake::copyable_unique_ptr<drake::systems::FixedInputPortValue>, std::allocator<drake::copyable_unique_ptr<drake::systems::FixedInputPortValue> > >::~vector()
0000000000084fa0  w   DF .text	0000000000000011  Base        drake::systems::Context<drake::symbolic::Expression>::set_accuracy(stx::optional<double> const&)
000000000008a130  w   DF .text	0000000000000024  Base        drake::systems::IntegratorBase<double>::~IntegratorBase()
00000000000e4bc0  w   DF .text	000000000000015a  Base        std::vector<float, std::allocator<float> >::operator=(std::vector<float, std::allocator<float> > const&)
000000000009bec0  w   DF .text	000000000000021d  Base        drake::systems::DiagramBuilder<double>::HasCycleRecurse(std::pair<drake::systems::System<double> const*, int> const&, std::map<std::pair<drake::systems::System<double> const*, int>, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > >, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > > > const&, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > >*, std::vector<std::pair<drake::systems::System<double> const*, int>, std::allocator<std::pair<drake::systems::System<double> const*, int> > >*)
0000000000310958  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
000000000008aae0  w   DF .text	000000000000004c  Base        std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_erase(std::_Rb_tree_node<std::pair<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >*)
00000000000bff10  w   DF .text	00000000000001ef  Base        std::_Rb_tree<drake::systems::PeriodicEventData, std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > >, std::_Select1st<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > > >, drake::systems::PeriodicEventDataComparator, std::allocator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > > >, drake::systems::PeriodicEventData const&)
0000000000314bb0  w   DO .data.rel.ro	0000000000000040  Base        vtable for drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >
0000000000312270  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::p_formatter
00000000000741b0  w   DF .text	0000000000000078  Base        drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramState()
0000000000312990  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > (drake::systems::System<double>::*)() const>
00000000000eda80  w   DO .rodata	0000000000000033  Base        typeinfo name for drake::systems::Context<double>* (drake::systems::System<double> const&, drake::systems::Context<double>*)
0000000000084590  w   DF .text	00000000000000ec  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)
00000000000f22c0  w   DO .rodata	0000000000000048  Base        typeinfo name for drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >
000000000009d0f0  w   DF .text	00000000000001ad  Base        drake::systems::System<drake::symbolic::Expression>::~System()
00000000003127f0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Diagram<double>::Initialize(std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> >)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}
0000000000071fc0  w   DF .text	0000000000000006  Base        spdlog::details::T_formatter::~T_formatter()
000000000008c290  w   DF .text	000000000000024a  Base        spdlog::details::c_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000b4c90  w   DF .text	00000000000000d3  Base        void std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> >::emplace_back<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*>(drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*&&)
00000000003121b0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::H_formatter
00000000000f5ca0  w   DO .rodata	0000000000000034  Base        typeinfo name for std::default_delete<drake::systems::AbstractValue>
000000000007e760  w   DF .text	0000000000000124  Base        drake::systems::System<double>::DoCalcConstraintErrorNorm(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&) const
0000000000074550  w   DF .text	000000000000000f  Base        spdlog::details::b_formatter::~b_formatter()
000000000007bb40  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000089d70  w   DF .text	000000000000005e  Base        std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >*)
00000000000f16f0  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::r_formatter
00000000003111b8  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
0000000000089540  w   DF .text	0000000000000101  Base        spdlog::logger::_set_pattern(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, spdlog::pattern_time_type)
0000000000071660  w   DF .text	000000000000000a  Base        drake::systems::BasicVector<drake::symbolic::Expression>::size() const
0000000000084fc0  w   DF .text	0000000000000011  Base        drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::set_accuracy(stx::optional<double> const&)
0000000000087950  w   DF .text	0000000000000137  Base        drake::systems::DiagramContext<drake::symbolic::Expression>::~DiagramContext()
00000000000eedc0  w   DO .rodata	0000000000000051  Base        typeinfo name for drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*) const
00000000000eebe0  w   DO .rodata	000000000000003e  Base        typeinfo name for drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >
0000000000073f90  w   DF .text	000000000000002a  Base        drake::systems::internal::DiagramOutput<double>::~DiagramOutput()
00000000000862d0  w   DF .text	000000000000003e  Base        drake::systems::Diagram<double>::DoAllocateInputAbstract(drake::systems::InputPortDescriptor<double> const&) const
00000000000ee100  w   DO .rodata	0000000000000044  Base        typeinfo name for drake::systems::DiagramContinuousState<drake::symbolic::Expression>
00000000000851b0  w   DF .text	0000000000000091  Base        std::vector<std::unique_ptr<drake::systems::DependencyTracker, std::default_delete<drake::systems::DependencyTracker> >, std::allocator<std::unique_ptr<drake::systems::DependencyTracker, std::default_delete<drake::systems::DependencyTracker> > > >::~vector()
00000000000bda90  w   DF .text	0000000000000086  Base        std::vector<double, std::allocator<double> >::vector(std::vector<double, std::allocator<double> > const&)
0000000000072420  w   DF .text	000000000000000a  Base        drake::systems::System<double>::DoCalcConservativePower(drake::systems::Context<double> const&) const
00000000000dffa0  w   DF .text	00000000000001e7  Base        drake::systems::LeafSystem<double>::AllocateDiscreteState() const
00000000000a3990  w   DF .text	000000000000004c  Base        std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> >, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >*)
00000000000ba120  w   DF .text	000000000000001f  Base        drake::systems::DiagramOutputPort<double>::DoAllocate() const
00000000000d8fc0  w   DF .text	000000000000005e  Base        std::function<void (drake::systems::Context<double> const&, drake::systems::AbstractValue*)>::function(std::function<void (drake::systems::Context<double> const&, drake::systems::AbstractValue*)> const&)
00000000000d2c90  w   DF .text	00000000000008d2  Base        drake::systems::ContinuousState<drake::symbolic::Expression>::ContinuousState(std::unique_ptr<drake::systems::VectorBase<drake::symbolic::Expression>, std::default_delete<drake::systems::VectorBase<drake::symbolic::Expression> > >, int, int, int)
00000000003124e0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::ContinuousState<drake::symbolic::Expression>
0000000000311f48  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>
00000000000f3500  w   DO .rodata	00000000000000a6  Base        typeinfo name for drake::systems::SystemScalarConverter::Add<double, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}
000000000007a370  w   DF .text	0000000000000088  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetGraphvizOutputPortToken(drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
0000000000311370  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::State<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double>*) const
00000000000c4a90  w   DF .text	000000000000003a  Base        drake::systems::BasicVector<double>** std::move_backward<drake::systems::BasicVector<double>**, drake::systems::BasicVector<double>**>(drake::systems::BasicVector<double>**, drake::systems::BasicVector<double>**, drake::systems::BasicVector<double>**)
00000000000a2b70  w   DF .text	0000000000000096  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Diagram()
00000000000f18b0  w   DO .rodata	0000000000000011  Base        typeinfo name for spdlog::logger
00000000000a7d80  w   DF .text	000000000000008d  Base        std::_Rb_tree_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> > std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<double> const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&>&&, std::tuple<>&&)
00000000000f40a0  w   DO .rodata	00000000000000b5  Base        typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const
0000000000312068  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for spdlog::details::flag_formatter
0000000000312090  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::level_formatter
0000000000079b40  w   DF .text	000000000000000e  Base        drake::systems::BasicVector<double>::~BasicVector()
0000000000078270  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetMutableTargetSystemCompositeEventCollection(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000312390  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for spdlog::logger
00000000000f1180  w   DO .rodata	000000000000003e  Base        typeinfo name for drake::systems::VectorBase<double>& (*)(drake::systems::ContinuousState<double>*)
00000000000ee680  w   DO .rodata	0000000000000069  Base        typeinfo name for drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
000000000009d2d0  w   DF .text	000000000000005e  Base        std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)>::function(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)> const&)
0000000000310b88  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>
00000000000d5140  w   DF .text	0000000000000022  Base        std::_Sp_counted_deleter<drake::systems::AbstractValue*, std::default_delete<drake::systems::AbstractValue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
00000000000b4d70  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
000000000007dea0  w   DF .text	00000000000001ed  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DispatchPublishHandler(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > const&) const
0000000000072b10  w   DF .text	0000000000000012  Base        drake::systems::internal::DiagramOutput<drake::symbolic::Expression>::get_num_ports() const
0000000000074ac0  w   DF .text	0000000000000018  Base        fmt::internal::RuntimeError::~RuntimeError()
00000000000f02a0  w   DO .rodata	000000000000006c  Base        typeinfo name for drake::systems::Value<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
00000000000edde0  w   DO .rodata	000000000000003d  Base        typeinfo name for drake::systems::ContinuousState<drake::symbolic::Expression>
0000000000071fa0  w   DF .text	0000000000000006  Base        spdlog::details::t_formatter::~t_formatter()
00000000000ba5b0  w   DF .text	000000000000004c  Base        std::_Rb_tree<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::_Identity<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::less<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >*)
0000000000074810  w   DF .text	0000000000000024  Base        drake::systems::CompositeEventCollection<drake::symbolic::Expression>::~CompositeEventCollection()
0000000000071f00  w   DF .text	0000000000000035  Base        std::_Function_handler<drake::systems::Context<drake::symbolic::Expression> const& (drake::systems::DiagramContext<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<drake::symbolic::Expression> const& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramContext<drake::symbolic::Expression> const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000073c10  w   DF .text	000000000000007b  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::~DiagramEventCollection()
00000000000b1280  w   DF .text	0000000000000151  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<int>()
00000000000a3e10  w   DF .text	000000000000000c  Base        non-virtual thunk to drake::systems::Diagram<drake::symbolic::Expression>::~Diagram()
0000000000310ce8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::internal::DiagramOutput<drake::symbolic::Expression>
000000000007e630  w   DF .text	0000000000000124  Base        drake::systems::System<drake::symbolic::Expression>::DoCalcConstraintErrorNorm(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&) const
00000000000cec40  w   DF .text	00000000000000e7  Base        drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetZero()
00000000003143c8  w   DO .data.rel.ro	0000000000000038  Base        vtable for std::_Sp_counted_ptr_inplace<spdlog::sinks::stderr_sink<std::mutex>, std::allocator<spdlog::sinks::stderr_sink<std::mutex> >, (__gnu_cxx::_Lock_policy)2>
00000000000ef320  w   DO .rodata	0000000000000075  Base        typeinfo name for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)
00000000000a89a0  w   DF .text	000000000000008d  Base        std::_Rb_tree_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> > std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&>&&, std::tuple<>&&)
0000000000310bc8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for std::allocator<char>
0000000000078530  w   DF .text	00000000000001f8  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AddTriggeredWitnessFunctionToCompositeEventCollection(drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000af080  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteValues<drake::symbolic::Expression> > > > >::~vector()
00000000000d0c90  w   DF .text	0000000000000108  Base        drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Clone() const
0000000000072450  w   DF .text	0000000000000008  Base        drake::systems::System<double>::do_get_num_constraint_equations(drake::systems::Context<double> const&) const
00000000000f1950  w   DO .rodata	0000000000000018  Base        typeinfo name for spdlog::async_logger
0000000000071880  w   DF .text	0000000000000006  Base        drake::systems::System<double>::DoGetInitializationEvents(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*) const
0000000000073410  w   DF .text	000000000000000a  Base        drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::q_selector(drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
0000000000074010  w   DF .text	0000000000000047  Base        drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Supervector()
0000000000082810  w   DF .text	00000000000003f6  Base        drake::systems::Diagram<double>::DoCalcNextUpdateTime(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*, double*) const
0000000000074be0  w   DF .text	0000000000000082  Base        spdlog::sinks::base_sink<std::mutex>::log(spdlog::details::log_msg const&)
000000000007c580  w   DF .text	000000000000018c  Base        drake::systems::BasicVector<double>::ScaleAndAddToVector(double const&, Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1>, 0, Eigen::InnerStride<1> >) const
0000000000072bd0  w   DF .text	0000000000000023  Base        std::_Function_handler<drake::systems::State<drake::symbolic::Expression>& (drake::systems::DiagramState<drake::symbolic::Expression>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<drake::symbolic::Expression>& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int)>::_M_invoke(std::_Any_data const&, drake::systems::DiagramState<drake::symbolic::Expression>*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000311a20  w   DO .data.rel.ro	0000000000000028  Base        vtable for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000a29e0  w   DF .text	000000000000000c  Base        non-virtual thunk to drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Diagram()
00000000000893d0  w   DF .text	0000000000000164  Base        spdlog::async_logger::_set_pattern(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, spdlog::pattern_time_type)
0000000000073320  w   DF .text	0000000000000060  Base        drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~CompositeEventCollection()
0000000000313a70  w   DO .data.rel.ro	00000000000001c8  Base        vtable for drake::systems::System<double>
00000000000cc330  w   DF .text	000000000000005f  Base        drake::systems::BasicVector<drake::symbolic::Expression>::DoClone() const
00000000000b05e0  w   DF .text	00000000000000a6  Base        drake::systems::Event<double>::Event(drake::systems::Event<double> const&)
00000000000ed6a0  w   DO .rodata	0000000000000065  Base        typeinfo name for drake::systems::Context<drake::symbolic::Expression> const& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
0000000000083400  w   DF .text	0000000000000024  Base        drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramContext()
00000000003113c0  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::State<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double> const*) const
0000000000316788 u    DO .bss	0000000000000008  Base        guard variable for drake::NiceTypeName::Get<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >()::canonical
00000000003121c8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::I_formatter
000000000007c9b0  w   DF .text	0000000000000069  Base        drake::systems::Subvector<drake::symbolic::Expression>::GetAtIndex(int) const
0000000000073e90  w   DF .text	000000000000007b  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::~DiagramEventCollection()
000000000008f440  w   DF .text	00000000000002da  Base        std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > drake::systems::Diagram<double>::AllocateForcedEventCollection<drake::systems::DiscreteUpdateEvent<double> >(std::function<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > (drake::systems::System<double> const*)>) const
000000000008c010  w   DF .text	000000000000003c  Base        spdlog::details::M_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000089650  w   DF .text	000000000000011f  Base        std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)
0000000000095730  w   DF .text	0000000000000093  Base        std::_MakeUniq<drake::systems::BasicVector<double> >::__single_object std::make_unique<drake::systems::BasicVector<double>, int>(int&&)
00000000000cfd30  w   DF .text	0000000000000c4f  Base        drake::systems::ContextBase::ContextBase(drake::systems::ContextBase const&)
00000000000f3720  w   DO .rodata	0000000000000082  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<double> const& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>
00000000000f19c0  w   DO .rodata	000000000000001a  Base        typeinfo name for drake::systems::State<double>
0000000000075340  w   DF .text	0000000000000047  Base        drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_mutable_subevent_collection(int)
0000000000073450  w   DF .text	000000000000000a  Base        drake::systems::DiagramContinuousState<double>::q_selector(drake::systems::ContinuousState<double>*)
000000000008fc40  w   DF .text	000000000000000c  Base        non-virtual thunk to drake::systems::Diagram<double>::~Diagram()
0000000000071a90  w   DF .text	0000000000000037  Base        std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}> const&, std::_Manager_operation)
0000000000313098  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::c_formatter
00000000000dfa10  w   DF .text	00000000000001d1  Base        std::_MakeUniq<drake::systems::State<double> >::__single_object std::make_unique<drake::systems::State<double>>()
00000000000a9fc0  w   DF .text	000000000000008d  Base        std::_Rb_tree_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<drake::symbolic::Expression> const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<drake::symbolic::Expression> const* const&>&&, std::tuple<>&&)
00000000003111e0  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000720a0  w   DF .text	0000000000000006  Base        spdlog::details::Y_formatter::~Y_formatter()
00000000000a35b0  w   DF .text	00000000000002da  Base        std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > drake::systems::Diagram<drake::symbolic::Expression>::AllocateForcedEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >(std::function<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression> const*)>) const
00000000000ac8a0  w   DF .text	0000000000000080  Base        std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> >, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > > >::_M_get_insert_unique_pos(drake::systems::System<drake::symbolic::Expression> const* const&)
00000000000dba70  w   DF .text	0000000000000155  Base        drake::systems::LeafSystem<double>::DispatchDiscreteVariableUpdateHandler(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > const&, drake::systems::DiscreteValues<double>*) const
0000000000312018  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for fmt::BasicMemoryWriter<char, std::allocator<char> >
00000000000b0b10  w   DF .text	0000000000000040  Base        drake::systems::DiagramContinuousState<double>::~DiagramContinuousState()
00000000000d5170  w   DF .text	0000000000000008  Base        drake::systems::UnrestrictedUpdateEvent<double>::is_discrete_update() const
00000000000a1820  w   DF .text	00000000000000f1  Base        void std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::emplace_back<drake::systems::System<double> const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&>(drake::systems::System<double> const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&)
00000000000b66a0  w   DF .text	000000000000005a  Base        std::_Rb_tree<drake::systems::PeriodicEventData, std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >, std::_Select1st<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > >, drake::systems::PeriodicEventDataComparator, std::allocator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > >*)
00000000000dbf30  w   DF .text	00000000000001a5  Base        drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::MakeForcedEventCollection()
0000000000072740  w   DF .text	0000000000000006  Base        drake::systems::System<double>::GetGraphvizInputPortToken(drake::systems::InputPortDescriptor<double> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
0000000000089f80  w   DF .text	000000000000011e  Base        drake::systems::Simulator<double>::~Simulator()
0000000000311690  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>
00000000000956c0  w   DF .text	000000000000006f  Base        drake::systems::Diagram<double>::GetSystemIndexOrAbort(drake::systems::System<double> const*) const
00000000000e4ea0  w   DF .text	0000000000001559  Base        Eigen::internal::gebp_kernel<double, double, long, Eigen::internal::blas_data_mapper<double, long, 0, 0>, 4, 4, false, false>::operator()(Eigen::internal::blas_data_mapper<double, long, 0, 0> const&, double const*, double const*, long, long, long, double, long, long, long, long)
000000000008db40  w   DF .text	00000000000000b3  Base        void std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >::_M_emplace_back_aux<drake::systems::WitnessFunction<double> const* const&>(drake::systems::WitnessFunction<double> const* const&)
0000000000312760  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >
00000000000a8800  w   DF .text	0000000000000025  Base        std::_Function_handler<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&), drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)
0000000000310da8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000073f60  w   DF .text	000000000000002a  Base        drake::systems::internal::DiagramOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramOutput()
00000000000d2b50  w   DF .text	000000000000013f  Base        drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoClone() const
00000000000b4b40  w   DF .text	0000000000000144  Base        void std::vector<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::emplace_back<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > >(std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >&&)
0000000000089e60  w   DF .text	000000000000009e  Base        drake::systems::IntegratorBase<double>::~IntegratorBase()
000000000008beb0  w   DF .text	0000000000000085  Base        spdlog::details::f_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000074840  w   DF .text	000000000000000f  Base        drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramOutputPort()
00000000003142d0  w   DO .data.rel.ro	0000000000000038  Base        vtable for drake::systems::DiagramOutputPort<double>
00000000000f29c0  w   DO .rodata	0000000000000034  Base        typeinfo name for drake::systems::Diagram<drake::symbolic::Expression>
00000000000bdfc0  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::SystemOutput<double>, std::default_delete<drake::systems::SystemOutput<double> > >, std::allocator<std::unique_ptr<drake::systems::SystemOutput<double>, std::default_delete<drake::systems::SystemOutput<double> > > > >::~vector()
00000000000f1330  w   DO .rodata	0000000000000015  Base        typeinfo name for spdlog::sinks::sink
0000000000081cb0  w   DF .text	0000000000000324  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::HasEvents() const
0000000000314a08  w   DO .data.rel.ro	0000000000000038  Base        vtable for drake::systems::OutputPort<drake::symbolic::Expression>
00000000000a3940  w   DF .text	000000000000004c  Base        std::_Rb_tree<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_erase(std::_Rb_tree_node<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >*)
00000000000dbed0  w   DF .text	000000000000005e  Base        std::function<void (drake::systems::Context<double> const&, drake::systems::UnrestrictedUpdateEvent<double> const&, drake::systems::State<double>*)>::function(std::function<void (drake::systems::Context<double> const&, drake::systems::UnrestrictedUpdateEvent<double> const&, drake::systems::State<double>*)> const&)
00000000000be030  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::Context<double>, std::default_delete<drake::systems::Context<double> > >, std::allocator<std::unique_ptr<drake::systems::Context<double>, std::default_delete<drake::systems::Context<double> > > > >::~vector()
00000000000720f0  w   DF .text	0000000000000006  Base        spdlog::details::b_formatter::~b_formatter()
000000000008c5a0  w   DF .text	0000000000000025  Base        spdlog::details::T_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000c7740  w   DF .text	0000000000000314  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoGetPeriodicEvents() const
00000000000edf00  w   DO .rodata	000000000000003a  Base        typeinfo name for drake::systems::SystemOutput<drake::symbolic::Expression>
00000000000d55e0  w   DF .text	0000000000000037  Base        drake::systems::Value<drake::systems::BasicVector<double> >::~Value()
0000000000074450  w   DF .text	000000000000000f  Base        spdlog::details::p_formatter::~p_formatter()
0000000000310c80  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > ()
0000000000074970  w   DF .text	0000000000000024  Base        drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~ContinuousState()
00000000000c1290  w   DF .text	00000000000000f5  Base        std::vector<drake::systems::OutputPortValue*, std::allocator<drake::systems::OutputPortValue*> >::_M_default_append(unsigned long)
00000000000e3ca0  w   DF .text	00000000000002c4  Base        decltype(auto) transformSpatialForce<Eigen::Transpose<Eigen::Matrix<double, 6, 6, 0, 6, 6> > >(Eigen::Transform<Eigen::Transpose<Eigen::Matrix<double, 6, 6, 0, 6, 6> >::Scalar, 3, 1, 0> const&, Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<double, 6, 6, 0, 6, 6> > > const&)
0000000000072210  w   DF .text	0000000000000006  Base        std::_Sp_counted_ptr_inplace<spdlog::sinks::stderr_sink<std::mutex>, std::allocator<spdlog::sinks::stderr_sink<std::mutex> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
000000000007c710  w   DF .text	0000000000000069  Base        drake::systems::Subvector<double>::GetAtIndex(int) const
00000000000c1b80  w   DF .text	000000000000032d  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateOutput(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
0000000000311ac0  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000a2790  w   DF .text	000000000000004c  Base        std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> >, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >*)
000000000009b980  w   DF .text	000000000000018a  Base        spdlog::logger::_sink_it(spdlog::details::log_msg&)
0000000000086840  w   DF .text	0000000000000030  Base        spdlog::details::B_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000720c0  w   DF .text	0000000000000006  Base        spdlog::details::C_formatter::~C_formatter()
00000000000906d0  w   DF .text	000000000000021f  Base        drake::systems::Diagram<double>::DispatchUnrestrictedUpdateHandler(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > const&, drake::systems::State<double>*) const
000000000007b310  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000074c70  w   DF .text	000000000000002a  Base        std::_Function_handler<void* (void const*), drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}>::_M_invoke(std::_Any_data const&, void const*&&)
00000000000d1b80  w   DF .text	0000000000000555  Base        drake::systems::DiagramContext<double>::DiagramContext(drake::systems::DiagramContext<double> const&)
00000000000f4ca0  w   DO .rodata	0000000000000093  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>
00000000000f5f40  w   DO .rodata	0000000000000049  Base        typeinfo name for drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >
00000000000985a0  w   DF .text	00000000000004bb  Base        void fmt::BasicWriter<char>::write_double<double, fmt::FormatSpec>(double, fmt::FormatSpec const&)
00000000000d5da0  w   DF .text	000000000000007a  Base        drake::systems::LeafSystemOutput<double>::get_mutable_port_value(int)
0000000000083b90  w   DF .text	0000000000000053  Base        spdlog::details::async_log_helper::async_msg::operator=(spdlog::details::async_log_helper::async_msg&&)
000000000008e7b0  w   DF .text	0000000000000190  Base        drake::systems::VectorBase<drake::symbolic::Expression>::CopyToVector() const
00000000000f2900  w   DO .rodata	000000000000003f  Base        typeinfo name for Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >
0000000000312a70  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::SystemScalarConverter::Add<double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)::{lambda(void const*)#1}
0000000000313dc0  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::CompositeEventCollection<double>
0000000000317140 u    DO .bss	0000000000000020  Base        drake::NiceTypeName::Get<drake::systems::ContactResults<double> >()::canonical[abi:cxx11]
000000000008a600  w   DF .text	00000000000001cf  Base        void fmt::internal::format_decimal<unsigned long, char, fmt::internal::ThousandsSep>(char*, unsigned long, unsigned int, fmt::internal::ThousandsSep)
0000000000073300  w   DF .text	000000000000000a  Base        drake::systems::DiagramContinuousState<drake::symbolic::Expression>::v_selector(drake::systems::ContinuousState<drake::symbolic::Expression>*)
000000000008dc00  w   DF .text	000000000000014e  Base        drake::systems::Simulator<double>::GetCurrentWitnessTimeIsolation() const
00000000000a2950  w   DF .text	0000000000000089  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Diagram()
0000000000310938  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (int)
0000000000071c80  w   DF .text	0000000000000036  Base        std::_Function_handler<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&)
0000000000073110  w   DF .text	0000000000000023  Base        std::_Function_handler<drake::systems::ContinuousState<double> const& (drake::systems::DiagramContinuousState<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::ContinuousState<double> const& (drake::systems::DiagramContinuousState<double>::*)(int) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramContinuousState<double> const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
00000000000d0da0  w   DF .text	000000000000066c  Base        drake::systems::DiagramContext<drake::symbolic::Expression>::DiagramContext(drake::systems::DiagramContext<drake::symbolic::Expression> const&)
00000000003110f0  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const
000000000008f7d0  w   DF .text	00000000000002da  Base        std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > drake::systems::Diagram<double>::AllocateForcedEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >(std::function<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > (drake::systems::System<double> const*)>) const
0000000000312708  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::Context<double>& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
00000000003120a8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::short_level_formatter
0000000000099e70  w   DF .text	0000000000000051  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fmt::format<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(fmt::BasicCStringRef<char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000727a0  w   DF .text	0000000000000012  Base        drake::systems::System<drake::symbolic::Expression>::DoGetMutableTargetSystemContext(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*) const
000000000008a950  w   DF .text	0000000000000035  Base        drake::systems::BasicVector<drake::symbolic::Expression>::~BasicVector()
00000000000f2f40  w   DO .rodata	000000000000009f  Base        typeinfo name for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}
00000000000716f0  w   DF .text	0000000000000010  Base        drake::systems::System<double>::AllocateDiscreteVariables() const
00000000000c8c90  w   DF .text	00000000000004a5  Base        drake::systems::DiagramState<drake::symbolic::Expression>::Finalize()
0000000000310b48  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*)
0000000000071a20  w   DF .text	0000000000000036  Base        std::_Function_handler<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > (drake::systems::System<double> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > (drake::systems::System<double>::*)() const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&)
00000000000f14b0  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::A_formatter
00000000000bbb60  w   DF .text	0000000000000226  Base        drake::systems::Diagram<drake::symbolic::Expression>::EvalConnectedSubsystemInputPort(drake::systems::ContextBase const&, drake::systems::InputPortBase const&) const
00000000000cbf60  w   DF .text	000000000000018d  Base        drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ContinuousState(std::unique_ptr<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >)
0000000000071e60  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&)
00000000000db4d0  w   DF .text	0000000000000026  Base        drake::systems::LeafSystem<double>::AllocateForcedDiscreteUpdateEventCollection() const
00000000000ed480  w   DO .rodata	0000000000000057  Base        typeinfo name for drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*)
00000000000719e0  w   DF .text	0000000000000036  Base        std::_Function_handler<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > (drake::systems::System<double> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > (drake::systems::System<double>::*)() const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&)
000000000007d7e0  w   DF .text	00000000000000fd  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >::DoMerge(drake::systems::EventCollection<drake::systems::PublishEvent<double> > const&)
0000000000093630  w   DF .text	0000000000000078  Base        void Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<double, -1, 1, 0, -1, 1>, Eigen::Matrix<double, -1, 1, 0, -1, 1>, Eigen::internal::assign_op<double, double> >(Eigen::Matrix<double, -1, 1, 0, -1, 1>&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, Eigen::internal::assign_op<double, double> const&)
00000000000a9e50  w   DF .text	0000000000000080  Base        std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_get_insert_unique_pos(drake::systems::System<drake::symbolic::Expression> const* const&)
00000000000dc0e0  w   DF .text	00000000000005ec  Base        drake::systems::LeafSystem<double>::LeafSystem(drake::systems::SystemScalarConverter)
0000000000083b00  w   DF .text	000000000000008b  Base        spdlog::details::log_msg::~log_msg()
000000000007b1f0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000312288  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::r_formatter
000000000008c050  w   DF .text	0000000000000044  Base        spdlog::details::I_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000073200  w   DF .text	0000000000000060  Base        drake::systems::CompositeEventCollection<drake::symbolic::Expression>::~CompositeEventCollection()
00000000000f60a0  w   DO .rodata	0000000000000029  Base        typeinfo name for drake::systems::DiscreteUpdateEvent<double>
00000000000db660  w   DF .text	00000000000000cb  Base        void std::vector<drake::systems::UnrestrictedUpdateEvent<double> const*, std::allocator<drake::systems::UnrestrictedUpdateEvent<double> const*> >::emplace_back<drake::systems::UnrestrictedUpdateEvent<double> const*>(drake::systems::UnrestrictedUpdateEvent<double> const*&&)
0000000000074910  w   DF .text	0000000000000024  Base        drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Parameters()
00000000000eeb40  w   DO .rodata	000000000000002b  Base        typeinfo name for drake::systems::DiagramDiscreteValues<double>
0000000000314b78  w   DO .data.rel.ro	0000000000000038  Base        vtable for drake::systems::DiagramOutputPort<drake::symbolic::Expression>
00000000000af0f0  w   DF .text	0000000000000055  Base        std::_MakeUniq<drake::systems::AbstractValues>::__single_object std::make_unique<drake::systems::AbstractValues, std::vector<drake::systems::AbstractValue*, std::allocator<drake::systems::AbstractValue*> >&>(std::vector<drake::systems::AbstractValue*, std::allocator<drake::systems::AbstractValue*> >&)
00000000000f0e60  w   DO .rodata	0000000000000064  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*) const>
00000000000d5280  w   DF .text	000000000000000d  Base        drake::systems::LeafContext<double>::get_mutable_state()
00000000000f1a40  w   DO .rodata	0000000000000024  Base        typeinfo name for drake::systems::PeriodicEventData
00000000000ed600  w   DO .rodata	000000000000002f  Base        typeinfo name for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>
00000000000efd40  w   DO .rodata	000000000000006b  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const>
0000000000072130  w   DF .text	0000000000000006  Base        spdlog::details::level_formatter::~level_formatter()
0000000000096e80  w   DF .text	000000000000006b  Base        fmt::BasicWriter<char>::write(fmt::BasicCStringRef<char>, fmt::ArgList)
00000000000a2e90  w   DF .text	00000000000002da  Base        std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > drake::systems::Diagram<drake::symbolic::Expression>::AllocateForcedEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >(std::function<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression> const*)>) const
00000000000957d0  w   DF .text	000000000000010f  Base        std::_Hashtable<drake::systems::WitnessFunction<double> const*, std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, std::allocator<std::pair<drake::systems::WitnessFunction<double> const* const, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > > >, std::__detail::_Select1st, std::equal_to<drake::systems::WitnessFunction<double> const*>, std::hash<drake::systems::WitnessFunction<double> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)
0000000000095f10  w   DF .text	000000000000014b  Base        char* fmt::BasicWriter<char>::write_str<char>(char const*, unsigned long, fmt::AlignSpec const&)
00000000000f19e0  w   DO .rodata	000000000000001c  Base        typeinfo name for drake::systems::Context<double>
0000000000313160  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::d_formatter
00000000000e48f0  w   DF .text	00000000000002d0  Base        std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator=(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)
00000000003128e0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >
00000000000a1920  w   DF .text	00000000000000f1  Base        void std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::emplace_back<drake::systems::System<double> const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&>(drake::systems::System<double> const*&, drake::TypeSafeIndex<drake::systems::OutputPortTag> const&)
0000000000074530  w   DF .text	000000000000000f  Base        spdlog::details::c_formatter::~c_formatter()
00000000000f4440  w   DO .rodata	0000000000000096  Base        typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const
000000000007a030  w   DF .text	000000000000001e  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::add_event(std::unique_ptr<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression>, std::default_delete<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > >)
00000000000723e0  w   DF .text	000000000000000b  Base        drake::systems::RungeKutta3Integrator<double>::get_error_estimate_order() const
00000000000ecc80  w   DO .rodata	0000000000000085  Base        typeinfo name for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
00000000000dcc70  w   DF .text	00000000000002c5  Base        drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::DoMerge(drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > const&)
00000000000bbe80  w   DF .text	000000000000004c  Base        std::_Rb_tree<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::_Identity<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::less<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >*)
0000000000071c10  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::Context<double> const* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::Context<double> const*), drake::systems::Context<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double> const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&, drake::systems::System<double> const&, drake::systems::Context<double> const*&&)
0000000000072890  w   DF .text	0000000000000006  Base        drake::systems::System<drake::symbolic::Expression>::DoGetWitnessFunctions(drake::systems::Context<drake::symbolic::Expression> const&, std::vector<drake::systems::WitnessFunction<drake::symbolic::Expression> const*, std::allocator<drake::systems::WitnessFunction<drake::symbolic::Expression> const*> >*) const
000000000008a450  w   DF .text	00000000000001af  Base        void fmt::internal::format_decimal<unsigned int, char, fmt::internal::ThousandsSep>(char*, unsigned int, unsigned int, fmt::internal::ThousandsSep)
0000000000072760  w   DF .text	0000000000000010  Base        drake::systems::System<drake::symbolic::Expression>::AllocateTimeDerivatives() const
0000000000076430  w   DF .text	00000000000000b3  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoValidateAllocatedContext(drake::systems::ContextBase const&) const
0000000000310b38  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::State<drake::symbolic::Expression> const& (int)
0000000000077a30  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetMutableTargetSystemState(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000cc240  w   DF .text	00000000000000e7  Base        drake::systems::BasicVector<drake::symbolic::Expression>::BasicVector(int)
00000000000f4d40  w   DO .rodata	00000000000000c2  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>
00000000000ed720  w   DO .rodata	0000000000000074  Base        typeinfo name for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)
0000000000311788  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<double> const& (drake::systems::DiagramCompositeEventCollection<double>::*)(int) const>
00000000000730e0  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::ContinuousState<double> const* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*), drake::systems::ContinuousState<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&, drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*&&)
00000000000b2820  w   DF .text	000000000000086a  Base        drake::systems::Diagram<drake::symbolic::Expression>::SetDefaultParameters(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::Parameters<drake::symbolic::Expression>*) const
00000000000eee80  w   DO .rodata	000000000000005c  Base        typeinfo name for drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*) const
00000000000f1820  w   DO .rodata	0000000000000020  Base        typeinfo name for spdlog::details::ch_formatter
000000000008fbb0  w   DF .text	0000000000000089  Base        drake::systems::Diagram<double>::~Diagram()
00000000003109b8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)
00000000000736b0  w   DF .text	000000000000006b  Base        drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoPlusEqScaled(std::initializer_list<std::pair<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&> > const&)
000000000007bba0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000d76a0  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::AbstractValue const, std::default_delete<drake::systems::AbstractValue const> >, std::allocator<std::unique_ptr<drake::systems::AbstractValue const, std::default_delete<drake::systems::AbstractValue const> > > >::~vector()
00000000000832d0  w   DF .text	000000000000012f  Base        drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramContext()
0000000000076d30  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoGetTargetSystemContinuousState(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*) const
0000000000085850  w   DF .text	0000000000000a33  Base        drake::systems::Diagram<double>::GetGraphvizFragment(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
0000000000086290  w   DF .text	000000000000003e  Base        drake::systems::Diagram<double>::DoAllocateInputVector(drake::systems::InputPortDescriptor<double> const&) const
00000000000723b0  w   DF .text	0000000000000006  Base        std::_Sp_counted_ptr_inplace<spdlog::pattern_formatter, std::allocator<spdlog::pattern_formatter>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
00000000000729f0  w   DF .text	0000000000000006  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetWitnessFunctions(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, std::vector<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >*) const
00000000000a93a0  w   DF .text	000000000000008d  Base        std::_Rb_tree_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> > std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<drake::symbolic::Expression> const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<drake::symbolic::Expression> const* const&>&&, std::tuple<>&&)
0000000000312f00  w   DO .data.rel.ro	0000000000000028  Base        vtable for fmt::internal::RuntimeError
00000000000b0cf0  w   DF .text	00000000000000b4  Base        drake::systems::Subvector<double>::Subvector(drake::systems::VectorBase<double>*, int, int)
0000000000084870  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >, std::allocator<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > > >::~vector()
00000000000b09b0  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<double>, std::default_delete<drake::systems::CompositeEventCollection<double> > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<double>, std::default_delete<drake::systems::CompositeEventCollection<double> > > > >::~vector()
00000000000f1ba0  w   DO .rodata	0000000000000038  Base        typeinfo name for drake::systems::VectorBase<drake::symbolic::Expression>
00000000000743b0  w   DF .text	000000000000000f  Base        spdlog::details::full_formatter::~full_formatter()
0000000000072900  w   DF .text	0000000000000012  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetMutableTargetSystemContext(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000d5530  w   DF .text	0000000000000024  Base        drake::systems::DiscreteUpdateEvent<double>::~DiscreteUpdateEvent()
00000000000b4f60  w   DF .text	00000000000001fb  Base        drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Parameters()
0000000000078b80  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<double>::DoGetMutableTargetSystemState(drake::systems::System<double> const&, drake::systems::State<double>*) const
00000000000df580  w   DF .text	00000000000000a3  Base        void std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> >::_M_emplace_back_aux<drake::systems::Event<double> const*>(drake::systems::Event<double> const*&&)
000000000008ab90  w   DF .text	00000000000000e5  Base        drake::systems::DiagramBuilder<double>::~DiagramBuilder()
000000000008aa20  w   DF .text	0000000000000070  Base        Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >* Eigen::internal::conditional_aligned_new_auto<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, true>(unsigned long)
0000000000088120  w   DF .text	0000000000000355  Base        spdlog::async_logger::~async_logger()
00000000000f3180  w   DO .rodata	00000000000000cc  Base        typeinfo name for drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}
00000000000a3f60  w   DF .text	0000000000000063  Base        Eigen::internal::copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<double, 4, 4, 0, 4, 4> >, Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>, Eigen::Matrix<double, 4, 4, 0, 4, 4> > >, Eigen::internal::assign_op<double, double>, 0>, 1, 16>::run(Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<double, 4, 4, 0, 4, 4> >, Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>, Eigen::Matrix<double, 4, 4, 0, 4, 4> > >, Eigen::internal::assign_op<double, double>, 0>&)
00000000000b3d60  w   DF .text	0000000000000098  Base        std::_Rb_tree_iterator<std::pair<int const, int> > std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_emplace_equal<drake::TypeSafeIndex<drake::systems::InputPortTag>&, drake::TypeSafeIndex<drake::systems::OutputPortTag>&>(drake::TypeSafeIndex<drake::systems::InputPortTag>&, drake::TypeSafeIndex<drake::systems::OutputPortTag>&)
0000000000071e20  w   DF .text	0000000000000006  Base        drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramOutputPort()
00000000000f3ee0  w   DO .rodata	0000000000000060  Base        typeinfo name for drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >
0000000000314078  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::InputPortDescriptor<double>
0000000000314df8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >
0000000000310ac8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
00000000000ef8a0  w   DO .rodata	0000000000000035  Base        typeinfo name for drake::systems::State<double>& (drake::systems::DiagramState<double>::*)(int)
0000000000311838  w   DO .data.rel.ro	0000000000000040  Base        vtable for drake::systems::internal::DiagramOutput<drake::symbolic::Expression>
0000000000072070  w   DF .text	0000000000000006  Base        spdlog::details::H_formatter::~H_formatter()
00000000000729e0  w   DF .text	0000000000000006  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetGraphvizOutputPortToken(drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
0000000000072920  w   DF .text	0000000000000012  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetMutableTargetSystemState(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000d54f0  w   DF .text	0000000000000032  Base        drake::systems::LeafCompositeEventCollection<double>::~LeafCompositeEventCollection()
00000000000917a0  w   DF .text	000000000000049e  Base        drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::NormInf() const
00000000000de470  w   DF .text	000000000000007b  Base        std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > drake::systems::detail::ModelValues::CloneVectorModel<double>(int) const
00000000000d6110  w   DF .text	00000000000000cb  Base        drake::systems::DiscreteUpdateEvent<double>::DoClone() const
0000000000310bb8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*)
000000000008d8d0  w   DF .text	0000000000000047  Base        drake::systems::DiscreteValues<double>::~DiscreteValues()
0000000000072d80  w   DF .text	000000000000000a  Base        drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::size() const
000000000007a070  w   DF .text	000000000000001e  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::add_event(std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >)
0000000000074ba0  w   DF .text	000000000000003a  Base        spdlog::sinks::stderr_sink<std::mutex>::_sink_it(spdlog::details::log_msg const&)
000000000008d4c0  w   DF .text	00000000000000be  Base        auto drake::systems::DiagramBuilder<double>::ThrowIfAlgebraicLoopsExist() const::{lambda(auto:1 const&)#2}::operator()<std::pair<drake::systems::System<double> const*, int> >(std::pair<drake::systems::System<double> const*, int> const&) const
0000000000310a88  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::CompositeEventCollection<double>& (int)
0000000000071ff0  w   DF .text	0000000000000006  Base        spdlog::details::p_formatter::~p_formatter()
00000000000f14f0  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::B_formatter
0000000000311fe0  w   DO .data.rel.ro	0000000000000038  Base        typeinfo for fmt::internal::MemoryBuffer<char, 500ul, std::allocator<char> >
0000000000074730  w   DF .text	0000000000000024  Base        drake::systems::Parameters<double>::~Parameters()
0000000000073380  w   DF .text	000000000000007b  Base        drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~ContinuousState()
0000000000074230  w   DF .text	000000000000003f  Base        drake::systems::PeriodicEventData::DoClone() const
0000000000312c10  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >
0000000000071800  w   DF .text	000000000000007b  Base        drake::systems::ContinuousState<double>::~ContinuousState()
00000000003128a8  w   DO .data.rel.ro	0000000000000038  Base        typeinfo for drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
000000000009a8f0  w   DF .text	00000000000000e2  Base        spdlog::pattern_formatter::format(spdlog::details::log_msg&)
00000000000f5de0  w   DO .rodata	0000000000000020  Base        typeinfo name for drake::systems::LeafSystem<double>
0000000000311028  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::State<drake::symbolic::Expression>& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int)
00000000000f3ac0  w   DO .rodata	000000000000005d  Base        typeinfo name for drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >
0000000000074880  w   DF .text	0000000000000024  Base        drake::systems::Parameters<drake::symbolic::Expression>::~Parameters()
0000000000311550  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const>
00000000000edba0  w   DO .rodata	0000000000000034  Base        typeinfo name for drake::systems::Context<double> const* (drake::systems::System<double> const&, drake::systems::Context<double> const*)
0000000000083570  w   DF .text	0000000000000094  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoAllocateInputAbstract(drake::systems::InputPortDescriptor<drake::symbolic::Expression> const&) const
00000000000f23e0  w   DO .rodata	0000000000000080  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<double>& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>
00000000000a27e0  w   DF .text	0000000000000109  Base        std::vector<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
0000000000071640  w   DF .text	000000000000000e  Base        drake::systems::SystemBase::ThrowIfContextNotCompatible(drake::systems::ContextBase const&) const
00000000000a3890  w   DF .text	00000000000000a6  Base        drake::systems::Diagram<drake::symbolic::Expression>::AllocateForcedUnrestrictedUpdateEventCollection() const
00000000000ae8f0  w   DF .text	00000000000000c4  Base        drake::systems::OutputPort<drake::symbolic::Expression>::Calc(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::AbstractValue*) const
0000000000072c30  w   DF .text	0000000000000023  Base        std::_Function_handler<drake::systems::State<drake::symbolic::Expression> const& (drake::systems::DiagramState<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<drake::symbolic::Expression> const& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramState<drake::symbolic::Expression> const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
00000000000ef860  w   DO .rodata	0000000000000036  Base        typeinfo name for drake::systems::State<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double>*) const
0000000000072cf0  w   DF .text	0000000000000023  Base        std::_Function_handler<drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int)>::_M_invoke(std::_Any_data const&, drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000075630  w   DF .text	000000000000001b  Base        drake::systems::Diagram<drake::symbolic::Expression>::GetParentPathname() const
00000000000d5210  w   DF .text	000000000000001f  Base        drake::systems::LeafSystem<double>::AllocateDiscreteVariables() const
00000000000b2350  w   DF .text	00000000000000d3  Base        void std::vector<drake::systems::AbstractValue*, std::allocator<drake::systems::AbstractValue*> >::emplace_back<drake::systems::AbstractValue*>(drake::systems::AbstractValue*&&)
0000000000314c70  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::LeafContext<double>
000000000008bd90  w   DF .text	00000000000000a4  Base        void fmt::BasicWriter<char>::write_int<int, fmt::IntFormatSpec<int, fmt::AlignTypeSpec<(char)0>, char> >(int, fmt::IntFormatSpec<int, fmt::AlignTypeSpec<(char)0>, char>)
0000000000311a48  w   DO .data.rel.ro	0000000000000028  Base        vtable for drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000f2e60  w   DO .rodata	00000000000000dd  Base        typeinfo name for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}
00000000000d5bb0  w   DF .text	00000000000000d1  Base        std::_Function_base::_Base_manager<drake::systems::LeafSystem<double>::MakeAllocCallback<drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::LeafSystem<double>::MakeAllocCallback<drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&)::{lambda()#1}> const&, std::_Manager_operation)
0000000000311ed0  w   DO .data.rel.ro	0000000000000078  Base        vtable for drake::systems::Supervector<double>
00000000000d8640  w   DF .text	000000000000029f  Base        drake::systems::LeafOutputPort<double>::DoAllocate() const
00000000003144e0  w   DO .data.rel.ro	0000000000000208  Base        vtable for drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000313228  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::e_formatter
0000000000314ec8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::LeafSystem<double>::MaybeDeclareVectorBaseInequalityConstraint(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, drake::systems::VectorBase<double> const&, std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)> const&)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}
00000000003123a0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::sinks::base_sink<std::mutex>
000000000007a690  w   DF .text	0000000000000018  Base        drake::systems::InputPortDescriptor<drake::symbolic::Expression>::~InputPortDescriptor()
000000000008fd00  w   DF .text	0000000000000151  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::ContextBase>()
0000000000080730  w   DF .text	00000000000002df  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::Clear()
00000000000ed140  w   DO .rodata	0000000000000057  Base        typeinfo name for drake::systems::VectorBase<drake::symbolic::Expression>& (drake::systems::ContinuousState<drake::symbolic::Expression>*)
000000000007ba80  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
000000000008f390  w   DF .text	00000000000000a6  Base        drake::systems::Diagram<double>::AllocateForcedPublishEventCollection() const
00000000000b3ed0  w   DF .text	0000000000000153  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >()
00000000000f1d60  w   DO .rodata	0000000000000024  Base        typeinfo name for drake::systems::IntegratorBase<double>
00000000000ed340  w   DO .rodata	000000000000004b  Base        typeinfo name for drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*)
0000000000089d00  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > >, std::allocator<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > > >::~vector()
00000000000c8a10  w   DF .text	000000000000027a  Base        drake::systems::Diagram<drake::symbolic::Expression>::AllocateTimeDerivatives() const
0000000000084c20  w   DF .text	0000000000000281  Base        spdlog::async_logger::_sink_it(spdlog::details::log_msg&)
0000000000076310  w   DF .text	000000000000005d  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoCalcWitnessValue(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::WitnessFunction<drake::symbolic::Expression> const&) const
00000000000f5d20  w   DO .rodata	0000000000000026  Base        typeinfo name for drake::systems::LeafSystemOutput<double>
00000000000af930  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
00000000003118e8  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::DiagramState<drake::symbolic::Expression>
00000000000d8340  w   DF .text	0000000000000141  Base        drake::systems::LeafCompositeEventCollection<double>::LeafCompositeEventCollection()
00000000000728a0  w   DF .text	0000000000000006  Base        drake::systems::System<drake::symbolic::Expression>::DoGetPerStepEvents(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const
0000000000072a70  w   DF .text	000000000000004f  Base        drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Parameters()
00000000000b0ba0  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > > > >::~vector()
00000000000f1200  w   DO .rodata	000000000000001c  Base        typeinfo name for stx::bad_optional_access
0000000000071650  w   DF .text	0000000000000006  Base        fmt::BasicWriter<char>::~BasicWriter()
0000000000312b80  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramEventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000084250  w   DF .text	00000000000000fe  Base        std::_Function_handler<void (drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*), drake::systems::Diagram<double>::Initialize(std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> >)::{lambda(drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*)#1}>::_M_invoke(std::_Any_data const&, drake::systems::Context<double> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1>*&&)
0000000000311928  w   DO .data.rel.ro	0000000000000078  Base        vtable for drake::systems::Subvector<drake::symbolic::Expression>
00000000000c5210  w   DF .text	0000000000000287  Base        void std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> >::_M_range_insert<__gnu_cxx::__normal_iterator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* const*, std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> > > >(__gnu_cxx::__normal_iterator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >**, std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> > >, __gnu_cxx::__normal_iterator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* const*, std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> > >, __gnu_cxx::__normal_iterator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* const*, std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> > >, std::forward_iterator_tag)
00000000000d65b0  w   DF .text	00000000000000c9  Base        drake::systems::LeafEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::~LeafEventCollection()
00000000000db020  w   DF .text	000000000000005a  Base        drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >::add_event(std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > >)
00000000000b80c0  w   DF .text	00000000000001fb  Base        drake::systems::Parameters<double>::Parameters()
0000000000086bd0  w   DF .text	0000000000000083  Base        drake::symbolic::Expression::Expression()
00000000000b17d0  w   DF .text	0000000000000648  Base        drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::DiagramCompositeEventCollection(std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, std::default_delete<drake::systems::CompositeEventCollection<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, std::default_delete<drake::systems::CompositeEventCollection<drake::symbolic::Expression> > > > >)
00000000000ee880  w   DO .rodata	000000000000005f  Base        typeinfo name for drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000d5130  w   DF .text	0000000000000006  Base        std::_Sp_counted_deleter<drake::systems::AbstractValue*, std::default_delete<drake::systems::AbstractValue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()
0000000000311280  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
0000000000071670  w   DF .text	0000000000000067  Base        drake::systems::PublishEvent<double>::~PublishEvent()
00000000000df940  w   DF .text	00000000000000cc  Base        drake::systems::ContinuousState<double>::ContinuousState()
00000000000720d0  w   DF .text	0000000000000006  Base        spdlog::details::c_formatter::~c_formatter()
0000000000314470  w   DO .data.rel.ro	0000000000000070  Base        vtable for drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000000effc0  w   DO .rodata	0000000000000081  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::ContinuousState<drake::symbolic::Expression> const& (drake::systems::DiagramContinuousState<drake::symbolic::Expression>::*)(int) const>
00000000000a6330  w   DF .text	000000000000009e  Base        std::_Rb_tree<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_get_insert_unique_pos(std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&)
00000000000f1b40  w   DO .rodata	0000000000000020  Base        typeinfo name for drake::systems::VectorBase<double>
00000000000b2620  w   DF .text	00000000000001fb  Base        drake::systems::Parameters<drake::symbolic::Expression>::Parameters()
0000000000086f00  w   DF .text	0000000000000057  Base        drake::systems::System<drake::symbolic::Expression>::DoCalcNextUpdateTime(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*, drake::symbolic::Expression*) const
00000000000d6a60  w   DF .text	0000000000000072  Base        drake::systems::LeafOutputPort<double>::~LeafOutputPort()
0000000000073690  w   DF .text	0000000000000009  Base        drake::systems::Subvector<double>::size() const
00000000000767b0  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoGetMutableTargetSystemState(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const
0000000000072440  w   DF .text	0000000000000006  Base        drake::systems::Subvector<double>::~Subvector()
00000000000b4c90  w   DF .text	00000000000000d3  Base        void std::vector<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> >::emplace_back<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*>(drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*&&)
0000000000074510  w   DF .text	000000000000000f  Base        spdlog::details::D_formatter::~D_formatter()
00000000000df350  w   DF .text	000000000000016a  Base        drake::systems::LeafSystem<double>::AllocateOutput(drake::systems::Context<double> const&) const
00000000000b3d60  w   DF .text	0000000000000098  Base        std::_Rb_tree_iterator<std::pair<int const, int> > std::_Rb_tree<int, std::pair<int const, int>, std::_Select1st<std::pair<int const, int> >, std::less<int>, std::allocator<std::pair<int const, int> > >::_M_emplace_equal<drake::TypeSafeIndex<drake::systems::InputPortTag>&, drake::TypeSafeIndex<drake::systems::OutputPortTag>&>(drake::TypeSafeIndex<drake::systems::InputPortTag>&, drake::TypeSafeIndex<drake::systems::OutputPortTag>&)
0000000000310f50  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramDiscreteValues<double>
00000000003120d8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::A_formatter
0000000000073420  w   DF .text	000000000000000a  Base        drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::v_selector(drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
000000000009dc90  w   DF .text	000000000000005e  Base        std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)>::function(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)
00000000000e3030  w   DF .text	00000000000000b7  Base        KinematicsCache<double>::~KinematicsCache()
00000000003167a0 u    DO .bss	0000000000000020  Base        drake::NiceTypeName::Get<drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >()::canonical[abi:cxx11]
00000000000d52b0  w   DF .text	000000000000004b  Base        drake::systems::LeafSystem<double>::DoPublish(drake::systems::Context<double> const&, std::vector<drake::systems::PublishEvent<double> const*, std::allocator<drake::systems::PublishEvent<double> const*> > const&) const
0000000000071980  w   DF .text	0000000000000006  Base        drake::systems::System<double>::DoGetWitnessFunctions(drake::systems::Context<double> const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*) const
0000000000074410  w   DF .text	000000000000000f  Base        spdlog::details::z_formatter::~z_formatter()
000000000007c940  w   DF .text	0000000000000069  Base        drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetAtIndex(int)
00000000000f1530  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::C_formatter
00000000000f6120  w   DO .rodata	0000000000000024  Base        typeinfo name for drake::systems::ContactResults<double>
0000000000312970  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > (drake::systems::System<double>::*)() const>
00000000000930d0  w   DF .text	0000000000000153  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::BasicVector<drake::symbolic::Expression> >()
00000000000d3570  w   DF .text	000000000000013f  Base        drake::systems::ContinuousState<drake::symbolic::Expression>::DoClone() const
00000000000deeb0  w   DF .text	00000000000000f9  Base        std::vector<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > > >::reserve(unsigned long)
0000000000072960  w   DF .text	0000000000000012  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetTargetSystemContinuousState(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
0000000000312650  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::ContinuousState<double>
0000000000071f50  w   DF .text	0000000000000006  Base        spdlog::details::full_formatter::~full_formatter()
000000000007cb00  w   DF .text	0000000000000061  Base        drake::systems::BasicVector<drake::symbolic::Expression>::GetAtIndex(int)
0000000000072050  w   DF .text	0000000000000006  Base        spdlog::details::M_formatter::~M_formatter()
00000000000d4fb0  w   DF .text	0000000000000067  Base        drake::systems::DiscreteUpdateEvent<double>::~DiscreteUpdateEvent()
0000000000312d70  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>
000000000007f850  w   DF .text	000000000000018f  Base        drake::systems::Diagram<drake::symbolic::Expression>::SetDefaultState(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const
00000000003124c8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::BasicVector<double>
00000000000f1cb0  w   DO .rodata	000000000000001c  Base        typeinfo name for drake::systems::Diagram<double>
000000000007a5b0  w   DF .text	000000000000001f  Base        drake::systems::System<drake::symbolic::Expression>::DoCalcPotentialEnergy(drake::systems::Context<drake::symbolic::Expression> const&) const
0000000000310a38  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::State<double> const* (drake::systems::System<double> const&, drake::systems::State<double> const*)
00000000000904d0  w   DF .text	00000000000000bd  Base        void drake::systems::DiscreteValues<double>::SetFromGeneric<double>(drake::systems::DiscreteValues<double> const&)
0000000000071610  w   DF .text	0000000000000022  Base        drake::systems::EventData::Clone() const
0000000000311630  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>
00000000000dadf0  w   DF .text	0000000000000156  Base        void std::vector<std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > > > >::emplace_back<std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > > >(std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > >&&)
00000000000746c0  w   DF .text	0000000000000024  Base        drake::systems::CompositeEventCollection<double>::~CompositeEventCollection()
0000000000313368  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::z_formatter
00000000000ed860  w   DO .rodata	00000000000000a9  Base        typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > ()
0000000000089b10  w   DF .text	00000000000001e9  Base        drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::CopyToVector() const
0000000000073790  w   DF .text	000000000000000d  Base        drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_parameters() const
0000000000313250  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::f_formatter
00000000000eca20  w   DO .rodata	000000000000001f  Base        typeinfo name for __gnu_cxx::new_allocator<char>
00000000000d8490  w   DF .text	0000000000000043  Base        drake::systems::LeafSystem<double>::AllocateCompositeEventCollection() const
000000000008aa90  w   DF .text	000000000000004c  Base        std::_Rb_tree<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::_Identity<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::less<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >*)
0000000000313318  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::R_formatter
00000000000898c0  w   DF .text	0000000000000059  Base        void Eigen::internal::conditional_aligned_delete_auto<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, true>(Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >*, unsigned long)
00000000000ba4d0  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::SystemOutput<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemOutput<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::SystemOutput<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemOutput<drake::symbolic::Expression> > > > >::~vector()
00000000000aef40  w   DF .text	000000000000003f  Base        drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::~DiagramCompositeEventCollection()
00000000000d4f10  w   DF .text	0000000000000018  Base        drake::systems::LeafCompositeEventCollection<double>::~LeafCompositeEventCollection()
00000000000a5030  w   DF .text	000000000000006f  Base        drake::systems::Diagram<drake::symbolic::Expression>::GetSystemIndexOrAbort(drake::systems::System<drake::symbolic::Expression> const*) const
00000000000cc0f0  w   DF .text	0000000000000145  Base        void Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<drake::symbolic::Expression>, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> >, Eigen::internal::assign_op<drake::symbolic::Expression, drake::symbolic::Expression> >(Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>&, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<drake::symbolic::Expression>, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1> > const&, Eigen::internal::assign_op<drake::symbolic::Expression, drake::symbolic::Expression> const&)
00000000000cdc70  w   DF .text	0000000000000160  Base        drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCloneState() const
0000000000073b90  w   DF .text	000000000000007b  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::~DiagramEventCollection()
000000000008d860  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > > >::~vector()
0000000000072ac0  w   DF .text	000000000000004f  Base        drake::systems::Parameters<double>::~Parameters()
00000000000e0730  w   DF .text	000000000000019d  Base        drake::systems::Parameters<double>::Parameters(std::vector<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > > > >&&, std::vector<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> >, std::allocator<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > > >&&)
00000000000cc390  w   DF .text	0000000000000287  Base        std::_MakeUniq<drake::systems::DiagramState<drake::symbolic::Expression> >::__single_object std::make_unique<drake::systems::DiagramState<drake::symbolic::Expression>, int&>(int&)
00000000000cacd0  w   DF .text	00000000000004a5  Base        drake::systems::DiagramState<double>::Finalize()
00000000000a1820  w   DF .text	00000000000000f1  Base        void std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::emplace_back<drake::systems::System<double> const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&>(drake::systems::System<double> const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&)
00000000000efe40  w   DO .rodata	000000000000006c  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*) const>
00000000000f0bc0  w   DO .rodata	0000000000000021  Base        typeinfo name for drake::systems::Supervector<double>
00000000000cb2b0  w   DF .text	00000000000008cf  Base        drake::systems::Diagram<double>::DoMakeContext() const
0000000000072870  w   DF .text	0000000000000006  Base        drake::systems::System<drake::symbolic::Expression>::GetGraphvizInputPortToken(drake::systems::InputPortDescriptor<drake::symbolic::Expression> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000f1a20  w   DO .rodata	000000000000001b  Base        typeinfo name for drake::systems::EventData
0000000000075950  w   DF .text	00000000000000b3  Base        drake::systems::Diagram<double>::DoValidateAllocatedContext(drake::systems::ContextBase const&) const
00000000000a4420  w   DF .text	0000000000000bbf  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetGraphvizFragment(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
0000000000312da0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>
00000000000db500  w   DF .text	0000000000000156  Base        void std::vector<std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > >, std::allocator<std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > > > >::emplace_back<std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > > >(std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > >&&)
0000000000072a20  w   DF .text	000000000000004f  Base        drake::systems::Parameters<drake::symbolic::Expression>::~Parameters()
0000000000314308  w   DO .data.rel.ro	0000000000000040  Base        vtable for drake::systems::DiagramEventCollection<drake::systems::PublishEvent<double> >
0000000000074760  w   DF .text	000000000000003f  Base        spdlog::details::aggregate_formatter::~aggregate_formatter()
00000000000747d0  w   DF .text	000000000000000f  Base        spdlog::sinks::stderr_sink<std::mutex>::~stderr_sink()
00000000000ecec0  w   DO .rodata	0000000000000031  Base        typeinfo name for drake::systems::State<double>* (drake::systems::System<double> const&, drake::systems::State<double>*)
000000000009cd80  w   DF .text	000000000000013c  Base        void drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)> const&)
00000000000ee7c0  w   DO .rodata	000000000000005e  Base        typeinfo name for drake::systems::Parameters<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000310d00  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramContinuousState<drake::symbolic::Expression>
0000000000086810  w   DF .text	000000000000002e  Base        spdlog::details::p_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000075040  w   DF .text	000000000000006e  Base        drake::systems::DiagramContinuousState<drake::symbolic::Expression>::get_substate(int) const
0000000000312e50  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>
00000000000737a0  w   DF .text	000000000000000d  Base        drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_mutable_parameters()
0000000000311908  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::Parameters<drake::symbolic::Expression>
0000000000072db0  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*), drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*&&)
00000000000b63a0  w   DF .text	00000000000002f3  Base        drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::MakeParameters()
00000000003123f8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Parameters<double>
0000000000095180  w   DF .text	0000000000000059  Base        std::_Rb_tree<std::pair<drake::systems::System<double> const*, int>, std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > >, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > > >::_M_erase(std::_Rb_tree_node<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > >*)
0000000000310b28  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*)
00000000000b0aa0  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<double>, std::default_delete<drake::systems::ContinuousState<double> > > > >::~vector()
00000000000716e0  w   DF .text	0000000000000006  Base        drake::systems::PeriodicEventData::~PeriodicEventData()
00000000000c32b0  w   DF .text	00000000000000d3  Base        void std::vector<drake::systems::PublishEvent<double> const*, std::allocator<drake::systems::PublishEvent<double> const*> >::emplace_back<drake::systems::PublishEvent<double> const*>(drake::systems::PublishEvent<double> const*&&)
00000000000c6aa0  w   DF .text	0000000000000287  Base        void std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >::_M_range_insert<__gnu_cxx::__normal_iterator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const*, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > > >(__gnu_cxx::__normal_iterator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const**, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >, __gnu_cxx::__normal_iterator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const*, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >, __gnu_cxx::__normal_iterator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const*, std::vector<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::Event<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >, std::forward_iterator_tag)
000000000007b780  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*), drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000b9db0  w   DF .text	0000000000000219  Base        drake::systems::OutputPort<double>::GetPortIdString() const
000000000007b960  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000b2270  w   DF .text	00000000000000d3  Base        void std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> >::emplace_back<drake::systems::BasicVector<drake::symbolic::Expression>*>(drake::systems::BasicVector<drake::symbolic::Expression>*&&)
000000000007ba20  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000f1ce0  w   DO .rodata	0000000000000024  Base        typeinfo name for drake::systems::DiagramBuilder<double>
00000000003127b8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::Context<double>& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>
0000000000310ae8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*)
00000000000d2270  w   DF .text	00000000000008d2  Base        drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ContinuousState(std::unique_ptr<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, int, int, int)
0000000000311190  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000b9a20  w   DF .text	0000000000000219  Base        drake::systems::OutputPort<drake::symbolic::Expression>::GetPortIdString() const
00000000000edd80  w   DO .rodata	000000000000004d  Base        typeinfo name for drake::systems::Context<double> const& (drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)
0000000000072cc0  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*), drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*&&)
00000000000ecfc0  w   DO .rodata	000000000000002a  Base        typeinfo name for drake::systems::ContinuousState<double> const& (int)
0000000000071ad0  w   DF .text	0000000000000037  Base        std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}> const&, std::_Manager_operation)
00000000000948a0  w   DF .text	000000000000010f  Base        std::_Hashtable<drake::systems::System<double> const*, drake::systems::System<double> const*, std::allocator<drake::systems::System<double> const*>, std::__detail::_Identity, std::equal_to<drake::systems::System<double> const*>, std::hash<drake::systems::System<double> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_rehash(unsigned long, unsigned long const&)
0000000000312510  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::BasicVector<drake::symbolic::Expression>
00000000000a3d70  w   DF .text	0000000000000096  Base        drake::systems::Diagram<drake::symbolic::Expression>::~Diagram()
0000000000074270  w   DF .text	0000000000000057  Base        drake::systems::WitnessTriggeredEventData<double>::DoClone() const
00000000000ef3a0  w   DO .rodata	0000000000000077  Base        typeinfo name for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
00000000000764f0  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoGetMutableTargetSystemContext(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*) const
0000000000312108  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::B_formatter
00000000000f2a00  w   DO .rodata	000000000000001e  Base        typeinfo name for drake::symbolic::Expression
00000000000ee500  w   DO .rodata	0000000000000063  Base        typeinfo name for drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
00000000003124f0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::DiscreteValues<drake::symbolic::Expression>
00000000000b7190  w   DF .text	0000000000000648  Base        drake::systems::DiagramCompositeEventCollection<double>::DiagramCompositeEventCollection(std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<double>, std::default_delete<drake::systems::CompositeEventCollection<double> > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<double>, std::default_delete<drake::systems::CompositeEventCollection<double> > > > >)
00000000000f38a0  w   DO .rodata	000000000000007f  Base        typeinfo name for drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
00000000000c1eb0  w   DF .text	00000000000000fc  Base        std::vector<double, std::allocator<double> >::_M_default_append(unsigned long)
0000000000071dc0  w   DF .text	0000000000000036  Base        std::_Function_handler<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&)
00000000003109d8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
00000000000e3280  w   DF .text	0000000000000224  Base        void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_emplace_back_aux<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000eed60  w   DO .rodata	000000000000004f  Base        typeinfo name for drake::systems::State<drake::symbolic::Expression>& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int)
0000000000311d68  w   DO .data.rel.ro	0000000000000078  Base        vtable for drake::systems::Subvector<double>
000000000008d710  w   DF .text	000000000000014e  Base        std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >::operator=(std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > const&)
00000000000744c0  w   DF .text	000000000000000f  Base        spdlog::details::I_formatter::~I_formatter()
0000000000314f58  w   DO .data.rel.ro	0000000000000218  Base        vtable for drake::systems::LeafSystem<double>
000000000007a1c0  w   DF .text	0000000000000088  Base        drake::systems::Diagram<double>::GetGraphvizInputPortToken(drake::systems::InputPortDescriptor<double> const&, std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >*) const
00000000000f1550  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::D_formatter
0000000000310a18  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::State<double>* (drake::systems::System<double> const&, drake::systems::State<double>*)
0000000000310a68  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::ContinuousState<double> const& (int)
00000000000a2300  w   DF .text	00000000000000a6  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::AllocateForcedDiscreteUpdateEventCollection() const
000000000008bf40  w   DF .text	0000000000000085  Base        spdlog::details::e_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000f1fa0  w   DO .rodata	0000000000000041  Base        typeinfo name for drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >
0000000000312a00  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::Context<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double> const*) const
00000000000f4ae0  w   DO .rodata	00000000000000a7  Base        typeinfo name for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const
00000000000a9430  w   DF .text	0000000000000721  Base        std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> > drake::systems::Diagram<drake::symbolic::Expression>::ConvertScalarType<double>() const
0000000000097020  w   DF .text	000000000000002a  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fmt::format<char>(fmt::BasicCStringRef<char>, char const&)
000000000009a090  w   DF .text	000000000000085a  Base        drake::systems::Simulator<double>::Simulator(drake::systems::System<double> const&, std::unique_ptr<drake::systems::Context<double>, std::default_delete<drake::systems::Context<double> > >)
00000000000a9fc0  w   DF .text	000000000000008d  Base        std::_Rb_tree_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<drake::symbolic::Expression> const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<drake::symbolic::Expression> const* const&>&&, std::tuple<>&&)
00000000000d5020  w   DF .text	000000000000006f  Base        drake::systems::LeafOutputPort<double>::~LeafOutputPort()
0000000000088880  w   DF .text	00000000000000e6  Base        drake::systems::VectorBase<drake::symbolic::Expression>::SetFrom(drake::systems::VectorBase<drake::symbolic::Expression> const&)
0000000000083430  w   DF .text	0000000000000094  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoAllocateInputAbstract(drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
0000000000074060  w   DF .text	0000000000000078  Base        drake::systems::DiagramState<double>::~DiagramState()
00000000000d7710  w   DF .text	0000000000000107  Base        drake::systems::LeafSystem<double>::~LeafSystem()
00000000000df100  w   DF .text	00000000000000f9  Base        std::vector<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> >, std::allocator<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > > >::reserve(unsigned long)
000000000008bfd0  w   DF .text	000000000000003b  Base        spdlog::details::S_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000f10c0  w   DO .rodata	000000000000007e  Base        typeinfo name for drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (*)(drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
00000000000f0380  w   DO .rodata	0000000000000092  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>
0000000000311348  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const
00000000000727c0  w   DF .text	0000000000000012  Base        drake::systems::System<drake::symbolic::Expression>::DoGetMutableTargetSystemState(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*) const
0000000000073480  w   DF .text	0000000000000060  Base        drake::systems::State<drake::symbolic::Expression>::~State()
0000000000090db0  w   DF .text	000000000000003d  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcNextUpdateTime(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >*) const
0000000000313d08  w   DO .data.rel.ro	0000000000000080  Base        vtable for drake::systems::BasicVector<drake::symbolic::Expression>
00000000000720b0  w   DF .text	0000000000000006  Base        spdlog::details::D_formatter::~D_formatter()
00000000000c4ad0  w   DF .text	0000000000000287  Base        void std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> >::_M_range_insert<__gnu_cxx::__normal_iterator<drake::systems::BasicVector<double>* const*, std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> > > >(__gnu_cxx::__normal_iterator<drake::systems::BasicVector<double>**, std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> > >, __gnu_cxx::__normal_iterator<drake::systems::BasicVector<double>* const*, std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> > >, __gnu_cxx::__normal_iterator<drake::systems::BasicVector<double>* const*, std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> > >, std::forward_iterator_tag)
00000000000cc8e0  w   DF .text	0000000000000cef  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoMakeContext() const
00000000000729a0  w   DF .text	0000000000000012  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetTargetSystemCompositeEventCollection(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
0000000000074430  w   DF .text	000000000000000f  Base        spdlog::details::R_formatter::~R_formatter()
00000000000c3cf0  w   DF .text	00000000000000c9  Base        std::_Rb_tree<drake::systems::PeriodicEventData, std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > >, std::_Select1st<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > > >, drake::systems::PeriodicEventDataComparator, std::allocator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<double> const*, std::allocator<drake::systems::Event<double> const*> > > > >::_M_get_insert_unique_pos(drake::systems::PeriodicEventData const&)
0000000000312c40  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Initialize(std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> >)::{lambda(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>*)#1}
00000000000aee90  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, std::default_delete<drake::systems::CompositeEventCollection<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<drake::symbolic::Expression>, std::default_delete<drake::systems::CompositeEventCollection<drake::symbolic::Expression> > > > >::~vector()
0000000000312408  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::State<double>
00000000000f1ec0  w   DO .rodata	0000000000000025  Base        typeinfo name for drake::systems::ContinuousState<double>
00000000000eee20  w   DO .rodata	0000000000000051  Base        typeinfo name for drake::systems::State<drake::symbolic::Expression> const& (drake::systems::DiagramState<drake::symbolic::Expression>::*)(int) const
000000000009d2d0  w   DF .text	000000000000005e  Base        std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)>::function(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)> const&)
0000000000073c90  w   DF .text	000000000000007b  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::~DiagramEventCollection()
00000000000db860  w   DF .text	0000000000000105  Base        drake::systems::LeafSystem<double>::DeclareVectorOutputPort(drake::systems::BasicVector<double> const&, std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>)
000000000007bfc0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*), drake::systems::CompositeEventCollection<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
000000000008b430  w   DF .text	0000000000000097  Base        unsigned int fmt::internal::parse_nonnegative_int<char>(char const*&)
0000000000072d20  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*), drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*&&)
000000000007bc00  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*), drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000a6130  w   DF .text	0000000000000080  Base        std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> > >::_M_get_insert_unique_pos(drake::systems::System<double> const* const&)
0000000000071fb0  w   DF .text	0000000000000006  Base        spdlog::details::z_formatter::~z_formatter()
0000000000310cd0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>
0000000000073b10  w   DF .text	000000000000007b  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::~DiagramEventCollection()
0000000000316a00 u    DO .bss	0000000000000008  Base        guard variable for drake::NiceTypeName::Get<drake::systems::BasicVector<drake::symbolic::Expression> >()::canonical
00000000000ba360  w   DF .text	000000000000014b  Base        drake::systems::OutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Allocate() const
00000000000ee420  w   DO .rodata	0000000000000060  Base        typeinfo name for drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000315978  w   DO .data.rel.ro	0000000000000038  Base        vtable for std::_Sp_counted_ptr_inplace<RigidBodyFrame<double>, Eigen::aligned_allocator<RigidBodyFrame<double> >, (__gnu_cxx::_Lock_policy)2>
0000000000097220  w   DF .text	0000000000000111  Base        fmt::internal::report_unknown_type(char, char const*)
0000000000097340  w   DF .text	000000000000034d  Base        void fmt::BasicWriter<char>::write_int<int, fmt::FormatSpec>(int, fmt::FormatSpec)
00000000000b9250  w   DF .text	0000000000000148  Base        drake::systems::DiscreteValues<double>::DiscreteValues(std::vector<drake::systems::BasicVector<double>*, std::allocator<drake::systems::BasicVector<double>*> > const&)
000000000008fb60  w   DF .text	000000000000004c  Base        std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> >, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<double> const* const, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag> > >*)
00000000000dd080  w   DF .text	000000000000061c  Base        drake::systems::LeafSystem<double>::MaybeDeclareVectorBaseInequalityConstraint(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, drake::systems::VectorBase<double> const&, std::function<drake::systems::VectorBase<double> const& (drake::systems::Context<double> const&)> const&)
00000000003116d0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int) const>
00000000003118c8  w   DO .data.rel.ro	0000000000000020  Base        vtable for drake::systems::State<drake::symbolic::Expression>
00000000000cfd10  w   DF .text	0000000000000018  Base        drake::systems::Supervector<drake::symbolic::Expression>::GetAtIndex(int)
00000000000f2b60  w   DO .rodata	000000000000009a  Base        typeinfo name for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > > > (drake::systems::System<double>::*)() const>
0000000000071c40  w   DF .text	0000000000000035  Base        std::_Function_handler<drake::systems::Context<double> const& (drake::systems::DiagramContext<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<double> const& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramContext<double> const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
00000000000dbbd0  w   DF .text	00000000000002fc  Base        drake::systems::LeafSystem<double>::SetDefaultState(drake::systems::Context<double> const&, drake::systems::State<double>*) const
00000000003110c8  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::ContinuousState<drake::symbolic::Expression> const& (drake::systems::DiagramContinuousState<drake::symbolic::Expression>::*)(int) const
00000000000752a0  w   DF .text	0000000000000047  Base        drake::systems::DiagramState<drake::symbolic::Expression>::get_mutable_substate(int)
00000000000f0c00  w   DO .rodata	0000000000000050  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::State<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double>*) const>
0000000000088000  w   DF .text	0000000000000117  Base        spdlog::logger::~logger()
00000000003129c0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, double, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}
0000000000311708  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::State<double>& (drake::systems::DiagramState<double>::*)(int)>
0000000000071740  w   DF .text	0000000000000060  Base        drake::systems::CompositeEventCollection<double>::~CompositeEventCollection()
00000000000f4580  w   DO .rodata	00000000000000cf  Base        typeinfo name for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>
00000000000bf0f0  w   DF .text	000000000000054f  Base        drake::systems::Diagram<drake::symbolic::Expression>::GetDirectFeedthroughs() const
0000000000073140  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::CompositeEventCollection<double>* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*), drake::systems::CompositeEventCollection<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&, drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*&&)
000000000007cc70  w   DF .text	000000000000007a  Base        drake::systems::internal::DiagramOutput<double>::get_mutable_port_value(int)
00000000000aef00  w   DF .text	0000000000000032  Base        drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::~DiagramCompositeEventCollection()
000000000008c0a0  w   DF .text	000000000000003c  Base        spdlog::details::H_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000d5f10  w   DF .text	00000000000000c0  Base        drake::systems::LeafSystem<double>::DispatchPublishHandler(drake::systems::Context<double> const&, drake::systems::EventCollection<drake::systems::PublishEvent<double> > const&) const
0000000000312c78  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const
00000000000e34b0  w   DF .text	0000000000000182  Base        void std::vector<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >, std::allocator<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > > >::_M_emplace_back_aux<std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> > >(std::unique_ptr<spdlog::details::flag_formatter, std::default_delete<spdlog::details::flag_formatter> >&&)
00000000000ec9a0  w   DO .rodata	0000000000000071  Base        typeinfo name for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
00000000000f3100  w   DO .rodata	0000000000000067  Base        typeinfo name for drake::systems::Context<double> const& (drake::systems::DiagramContext<double>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const
00000000000c4690  w   DF .text	00000000000003f5  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCheckValidContext(drake::systems::ContextBase const&) const
00000000000745d0  w   DF .text	000000000000004e  Base        fmt::BasicMemoryWriter<char, std::allocator<char> >::~BasicMemoryWriter()
00000000000b8a80  w   DF .text	00000000000007c7  Base        drake::systems::Diagram<double>::SetRandomParameters(drake::systems::Context<double> const&, drake::systems::Parameters<double>*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
0000000000072080  w   DF .text	0000000000000006  Base        spdlog::details::d_formatter::~d_formatter()
00000000000c8120  w   DF .text	000000000000018d  Base        drake::systems::ContinuousState<drake::symbolic::Expression>::ContinuousState(std::unique_ptr<drake::systems::VectorBase<drake::symbolic::Expression>, std::default_delete<drake::systems::VectorBase<drake::symbolic::Expression> > >)
00000000000da960  w   DF .text	0000000000000303  Base        drake::systems::LeafEventCollection<drake::systems::PublishEvent<double> >::DoMerge(drake::systems::EventCollection<drake::systems::PublishEvent<double> > const&)
00000000000b1420  w   DF .text	0000000000000039  Base        drake::systems::Context<drake::symbolic::Expression>::~Context()
00000000000b3910  w   DF .text	0000000000000148  Base        drake::systems::DiscreteValues<drake::symbolic::Expression>::DiscreteValues(std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> > const&)
00000000000eeb00  w   DO .rodata	000000000000002c  Base        typeinfo name for drake::systems::DiagramContinuousState<double>
00000000000f3f40  w   DO .rodata	0000000000000064  Base        typeinfo name for drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >
00000000000f1f40  w   DO .rodata	0000000000000045  Base        typeinfo name for drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> >
00000000000b3e00  w   DF .text	000000000000005a  Base        std::_Rb_tree<drake::systems::PeriodicEventData, std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > >, std::_Select1st<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > > >, drake::systems::PeriodicEventDataComparator, std::allocator<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > > > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::PeriodicEventData const, std::vector<drake::systems::Event<drake::symbolic::Expression> const*, std::allocator<drake::systems::Event<drake::symbolic::Expression> const*> > > >*)
0000000000075200  w   DF .text	0000000000000047  Base        drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::get_mutable_subevent_collection(int)
00000000000743c0  w   DF .text	000000000000000f  Base        spdlog::details::ch_formatter::~ch_formatter()
00000000000a7100  w   DF .text	000000000000008d  Base        std::_Rb_tree_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> > std::_Rb_tree<drake::systems::System<double> const*, std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<double> const*>, std::allocator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<double> const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<double> const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<double> const* const&>&&, std::tuple<>&&)
000000000007b3d0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramContext<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<drake::symbolic::Expression> const& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000099ed0  w   DF .text	00000000000001be  Base        std::unique_ptr<drake::systems::Context<double>, std::default_delete<drake::systems::Context<double> > > drake::dynamic_pointer_cast_or_throw<drake::systems::Context<double>, drake::systems::ContextBase>(std::unique_ptr<drake::systems::ContextBase, std::default_delete<drake::systems::ContextBase> >&&)
000000000007b480  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*), drake::systems::Context<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression>*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000312138  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::C_formatter
0000000000071f40  w   DF .text	0000000000000006  Base        spdlog::sinks::stderr_sink<std::mutex>::~stderr_sink()
0000000000073950  w   DF .text	0000000000000032  Base        spdlog::details::aggregate_formatter::~aggregate_formatter()
00000000000839b0  w   DF .text	000000000000014b  Base        fmt::internal::FormatterBase::do_get_arg(unsigned int, char const*&)
00000000000c96e0  w   DF .text	0000000000000345  Base        drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiagramContinuousState(std::vector<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> >)
00000000000b41f0  w   DF .text	0000000000000648  Base        drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiagramCompositeEventCollection(std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >)
0000000000074460  w   DF .text	000000000000000f  Base        spdlog::details::E_formatter::~E_formatter()
00000000000735e0  w   DF .text	000000000000000d  Base        std::_Function_handler<drake::systems::VectorBase<double>& (drake::systems::ContinuousState<double>*), drake::systems::VectorBase<double>& (*)(drake::systems::ContinuousState<double>*)>::_M_invoke(std::_Any_data const&, drake::systems::ContinuousState<double>*&&)
00000000000848e0  w   DF .text	000000000000005e  Base        std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::function(std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)> const&)
00000000000f1590  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::m_formatter
0000000000312b30  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >
0000000000098f10  w   DF .text	000000000000033e  Base        void fmt::BasicWriter<char>::write_int<unsigned long, fmt::FormatSpec>(unsigned long, fmt::FormatSpec)
00000000000868d0  w   DF .text	0000000000000030  Base        spdlog::details::a_formatter::format(spdlog::details::log_msg&, tm const&)
00000000000c96e0  w   DF .text	0000000000000345  Base        drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DiagramContinuousState(std::vector<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::allocator<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*> >)
000000000007a490  w   DF .text	0000000000000018  Base        stx::bad_optional_access::~bad_optional_access()
00000000000bbda0  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::SystemOutput<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
00000000000f1570  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::Y_formatter
0000000000074b40  w   DF .text	0000000000000032  Base        fmt::SystemError::~SystemError()
00000000003131b0  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::I_formatter
00000000000efca0  w   DO .rodata	000000000000009b  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::Context<drake::symbolic::Expression>& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>
00000000000c5950  w   DF .text	0000000000000287  Base        void std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> >::_M_range_insert<__gnu_cxx::__normal_iterator<drake::systems::BasicVector<drake::symbolic::Expression>* const*, std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> > > >(__gnu_cxx::__normal_iterator<drake::systems::BasicVector<drake::symbolic::Expression>**, std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> > >, __gnu_cxx::__normal_iterator<drake::systems::BasicVector<drake::symbolic::Expression>* const*, std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> > >, __gnu_cxx::__normal_iterator<drake::systems::BasicVector<drake::symbolic::Expression>* const*, std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> > >, std::forward_iterator_tag)
00000000000d2c90  w   DF .text	00000000000008d2  Base        drake::systems::ContinuousState<drake::symbolic::Expression>::ContinuousState(std::unique_ptr<drake::systems::VectorBase<drake::symbolic::Expression>, std::default_delete<drake::systems::VectorBase<drake::symbolic::Expression> > >, int, int, int)
0000000000072090  w   DF .text	0000000000000006  Base        spdlog::details::m_formatter::~m_formatter()
0000000000072520  w   DF .text	000000000000000a  Base        drake::systems::BasicVector<double>::size() const
00000000000d57f0  w   DF .text	000000000000003a  Base        drake::systems::LeafOutputPort<double>::DoEval(drake::systems::Context<double> const&) const
00000000000721b0  w   DF .text	0000000000000020  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcConservativePower(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
0000000000074940  w   DF .text	0000000000000024  Base        drake::systems::ContinuousState<drake::symbolic::Expression>::~ContinuousState()
00000000000ef960  w   DO .rodata	0000000000000042  Base        typeinfo name for drake::systems::ContinuousState<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::ContinuousState<double> const*) const
00000000000e4270  w   DF .text	00000000000000f0  Base        void std::vector<float, std::allocator<float> >::_M_emplace_back_aux<float>(float&&)
00000000003129d0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)#1}
0000000000312b68  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramOutputPort<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000310d18  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>
0000000000310978  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for __gnu_cxx::new_allocator<char>
000000000007b4e0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramContext<drake::symbolic::Expression>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<drake::symbolic::Expression>& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000723d0  w   DF .text	000000000000000b  Base        drake::systems::RungeKutta3Integrator<double>::supports_error_estimation() const
00000000000b14b0  w   DF .text	0000000000000153  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& drake::NiceTypeName::Get<drake::systems::Context<drake::symbolic::Expression> >()
0000000000312360  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::aggregate_formatter
0000000000312e00  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*) const
000000000007ca20  w   DF .text	0000000000000069  Base        drake::systems::Subvector<drake::symbolic::Expression>::GetAtIndex(int)
00000000000f2220  w   DO .rodata	0000000000000027  Base        typeinfo name for drake::systems::DiagramOutputPort<double>
00000000000c4d60  w   DF .text	0000000000000201  Base        drake::systems::DiagramDiscreteValues<double>::DiagramDiscreteValues(std::vector<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > > > >)
00000000000a3500  w   DF .text	00000000000000a6  Base        drake::systems::Diagram<drake::symbolic::Expression>::AllocateForcedDiscreteUpdateEventCollection() const
00000000000721d0  w   DF .text	0000000000000020  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcNonConservativePower(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&) const
00000000000a1620  w   DF .text	00000000000000f1  Base        void std::vector<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > >::emplace_back<drake::systems::System<drake::symbolic::Expression> const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&>(drake::systems::System<drake::symbolic::Expression> const*&, drake::TypeSafeIndex<drake::systems::InputPortTag> const&)
00000000000f4c00  w   DO .rodata	0000000000000081  Base        typeinfo name for drake::systems::Context<drake::symbolic::Expression> const& (drake::systems::DiagramContext<drake::symbolic::Expression>::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const
0000000000083bf0  w   DF .text	000000000000003f  Base        spdlog::details::async_log_helper::async_msg::~async_msg()
00000000000f2460  w   DO .rodata	00000000000000a5  Base        typeinfo name for drake::systems::Simulator<double>::IsolateWitnessTriggers(std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> > const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, double const&, std::vector<drake::systems::WitnessFunction<double> const*, std::allocator<drake::systems::WitnessFunction<double> const*> >*)::{lambda(double const&)#1}
00000000003116b0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)>
00000000000d72b0  w   DF .text	000000000000006b  Base        Eigen::Matrix<double, -1, 1, 0, -1, 1>::Matrix<int>(int const&)
00000000000724e0  w   DF .text	0000000000000012  Base        drake::systems::System<double>::DoGetMutableTargetSystemCompositeEventCollection(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*) const
0000000000000000 u    D  .tbss	0000000000000008  Base        guard variable for spdlog::details::os::thread_id()::tid
00000000000a88b0  w   DF .text	00000000000000ee  Base        std::_Rb_tree<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*>, std::_Select1st<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >, std::less<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*>, std::allocator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const, drake::systems::System<drake::symbolic::Expression> const*> >, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* const&)
00000000000a3b50  w   DF .text	0000000000000089  Base        drake::systems::Diagram<drake::symbolic::Expression>::~Diagram()
0000000000071d80  w   DF .text	0000000000000036  Base        std::_Function_handler<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&)
0000000000071f70  w   DF .text	0000000000000006  Base        spdlog::details::v_formatter::~v_formatter()
0000000000083180  w   DF .text	000000000000011f  Base        drake::systems::DiagramContext<double>::~DiagramContext()
000000000007f9e0  w   DF .text	000000000000018f  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetRandomState(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>*) const
0000000000073310  w   DF .text	000000000000000a  Base        drake::systems::DiagramContinuousState<drake::symbolic::Expression>::z_selector(drake::systems::ContinuousState<drake::symbolic::Expression>*)
000000000007a6f0  w   DF .text	0000000000000018  Base        drake::systems::InputPortDescriptor<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~InputPortDescriptor()
0000000000312660  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::DiscreteValues<double>
0000000000090d80  w   DF .text	000000000000002b  Base        drake::systems::BasicVector<double>::SetZero()
00000000000f3820  w   DO .rodata	0000000000000078  Base        typeinfo name for drake::systems::EventCollection<drake::systems::PublishEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000079fd0  w   DF .text	000000000000001e  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::add_event(std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > >)
00000000000a93a0  w   DF .text	000000000000008d  Base        std::_Rb_tree_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> > std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<drake::systems::System<drake::symbolic::Expression> const* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >, std::piecewise_construct_t const&, std::tuple<drake::systems::System<drake::symbolic::Expression> const* const&>&&, std::tuple<>&&)
0000000000072060  w   DF .text	0000000000000006  Base        spdlog::details::I_formatter::~I_formatter()
000000000007acd0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<double> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > (drake::systems::System<double>::*)() const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
0000000000084ad0  w   DF .text	0000000000000098  Base        spdlog::logger::set_error_handler(std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>)
00000000000d9cb0  w   DF .text	0000000000000601  Base        drake::systems::LeafSystem<double>::CreateVectorLeafOutputPort(int, std::function<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > ()>, std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>)
00000000000857e0  w   DF .text	0000000000000068  Base        drake::systems::System<double>::get_input_port(int) const
00000000000e30f0  w   DF .text	0000000000000063  Base        std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()
0000000000312470  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000071e30  w   DF .text	0000000000000012  Base        drake::systems::System<drake::symbolic::Expression>::DoGetTargetSystemContext(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*) const
000000000008f0b0  w   DF .text	00000000000002da  Base        std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > drake::systems::Diagram<double>::AllocateForcedEventCollection<drake::systems::PublishEvent<double> >(std::function<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > (drake::systems::System<double> const*)>) const
0000000000315928  w   DO .data.rel.ro	0000000000000038  Base        vtable for std::_Sp_counted_deleter<drake::systems::AbstractValue*, std::default_delete<drake::systems::AbstractValue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>
00000000000f1980  w   DO .rodata	0000000000000038  Base        typeinfo name for drake::systems::internal::SystemParentServiceInterface
00000000000d6c60  w   DF .text	00000000000000c9  Base        drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >::~LeafEventCollection()
0000000000073080  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::State<double> const* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::State<double> const*), drake::systems::State<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double> const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&, drake::systems::System<double> const&, drake::systems::State<double> const*&&)
0000000000310aa8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::CompositeEventCollection<double> const& (int)
00000000000e44f0  w   DF .text	0000000000000153  Base        std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000745c0  w   DF .text	000000000000000f  Base        drake::systems::WitnessTriggeredEventData<double>::~WitnessTriggeredEventData()
00000000000ef8e0  w   DO .rodata	0000000000000037  Base        typeinfo name for drake::systems::State<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double> const*) const
00000000000753e0  w   DF .text	0000000000000047  Base        drake::systems::DiagramState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::get_mutable_substate(int)
0000000000311878  w   DO .data.rel.ro	0000000000000028  Base        vtable for drake::systems::DiagramContinuousState<drake::symbolic::Expression>
0000000000076050  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoGetTargetSystemContext(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*) const
000000000008c4e0  w   DF .text	0000000000000041  Base        spdlog::details::D_formatter::format(spdlog::details::log_msg&, tm const&)
000000000007d6e0  w   DF .text	00000000000000fd  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<double> >::DoMerge(drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > const&)
00000000000eeee0  w   DO .rodata	0000000000000066  Base        typeinfo name for drake::systems::ContinuousState<drake::symbolic::Expression> const& (drake::systems::DiagramContinuousState<drake::symbolic::Expression>::*)(int) const
0000000000312bc8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::InputPortDescriptor<drake::symbolic::Expression>
00000000000b77e0  w   DF .text	00000000000001a4  Base        drake::systems::Diagram<double>::AllocateCompositeEventCollection() const
00000000000edc80  w   DO .rodata	000000000000006b  Base        typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > ()
0000000000071fd0  w   DF .text	0000000000000006  Base        spdlog::details::R_formatter::~R_formatter()
0000000000310c40  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > ()
0000000000312890  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000075680  w   DF .text	0000000000000009  Base        non-virtual thunk to drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetParentPathname() const
00000000000b4ef0  w   DF .text	0000000000000067  Base        drake::systems::DiagramDiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramDiscreteValues()
00000000000f4a60  w   DO .rodata	0000000000000079  Base        typeinfo name for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
00000000000f18e0  w   DO .rodata	0000000000000024  Base        typeinfo name for spdlog::sinks::base_sink<std::mutex>
0000000000312928  w   DO .data.rel.ro	0000000000000038  Base        typeinfo for drake::systems::Diagram<drake::symbolic::Expression>
00000000000efba0  w   DO .rodata	000000000000002e  Base        typeinfo name for drake::systems::Value<drake::systems::BasicVector<double> >
0000000000311050  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::State<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression> const*) const
00000000000ae4c0  w   DF .text	0000000000000025  Base        std::_Function_handler<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&), drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, drake::symbolic::Expression, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const&)
0000000000099e20  w   DF .text	0000000000000042  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fmt::format<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(fmt::BasicCStringRef<char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000eebb0  w   DO .rodata	000000000000001e  Base        typeinfo name for drake::systems::Subvector<double>
0000000000073050  w   DF .text	0000000000000023  Base        std::_Function_handler<drake::systems::State<double>& (drake::systems::DiagramState<double>*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::State<double>& (drake::systems::DiagramState<double>::*)(int)>::_M_invoke(std::_Any_data const&, drake::systems::DiagramState<double>*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000078730  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetTargetSystemCompositeEventCollection(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
00000000000ee3a0  w   DO .rodata	0000000000000073  Base        typeinfo name for drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000316880 u    DO .bss	0000000000000008  Base        guard variable for drake::NiceTypeName::Get<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >()::canonical
00000000000d6d30  w   DF .text	0000000000000061  Base        drake::systems::UnrestrictedUpdateEvent<double>::~UnrestrictedUpdateEvent()
00000000003133b8  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::pid_formatter
00000000000d5570  w   DF .text	000000000000006f  Base        drake::systems::LeafSystemOutput<double>::~LeafSystemOutput()
0000000000310ef8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::DiagramCompositeEventCollection<double>
00000000000dfa10  w   DF .text	00000000000001d1  Base        std::_MakeUniq<drake::systems::State<double> >::__single_object std::make_unique<drake::systems::State<double>>()
0000000000073590  w   DF .text	000000000000000d  Base        std::_Function_handler<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*), drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (*)(drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)>::_M_invoke(std::_Any_data const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*&&)
00000000000da6c0  w   DF .text	0000000000000183  Base        void drake::systems::LeafSystem<double>::DeclarePeriodicEvent<drake::systems::DiscreteUpdateEvent<double> >(double, double)
0000000000314c30  w   DO .data.rel.ro	0000000000000040  Base        vtable for drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >
000000000009d7b0  w   DF .text	000000000000005e  Base        std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)>::function(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)> const&)
0000000000312e70  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*) const>
000000000007b430  w   DF .text	0000000000000023  Base        drake::systems::Diagram<drake::symbolic::Expression>::DoCalcNextUpdateTime(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*, drake::symbolic::Expression*) const
000000000007b6c0  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*), drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000ed920  w   DO .rodata	00000000000000ad  Base        typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > ()
0000000000312150  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::D_formatter
00000000000a6090  w   DF .text	0000000000000046  Base        std::_Rb_tree<drake::systems::System<drake::symbolic::Expression> const*, std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*>, std::_Select1st<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >, std::less<drake::systems::System<drake::symbolic::Expression> const*>, std::allocator<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> > >::_M_insert_node(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node<std::pair<drake::systems::System<drake::symbolic::Expression> const* const, drake::systems::System<double> const*> >*)
0000000000314ad8  w   DO .data.rel.ro	0000000000000040  Base        vtable for drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000075510  w   DF .text	0000000000000047  Base        drake::systems::DiagramCompositeEventCollection<double>::get_subevent_collection(int) const
00000000000bf640  w   DF .text	00000000000001c6  Base        void drake::systems::ContinuousState<drake::symbolic::Expression>::SetFromGeneric<drake::symbolic::Expression>(drake::systems::ContinuousState<drake::symbolic::Expression> const&)
00000000003132f0  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::details::r_formatter
0000000000071f80  w   DF .text	0000000000000006  Base        spdlog::details::i_formatter::~i_formatter()
0000000000073000  w   DF .text	0000000000000012  Base        drake::systems::internal::DiagramOutput<double>::get_num_ports() const
0000000000087ac0  w   DF .text	00000000000000a3  Base        spdlog::logger::~logger()
0000000000072530  w   DF .text	000000000000006b  Base        drake::systems::BasicVector<double>::DoPlusEqScaled(std::initializer_list<std::pair<double, drake::systems::VectorBase<double> const&> > const&)
0000000000074870  w   DF .text	000000000000000f  Base        drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Subvector()
00000000000babe0  w   DF .text	00000000000002f5  Base        drake::systems::Diagram<drake::symbolic::Expression>::DispatchDiscreteVariableUpdateHandler(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> > const&, drake::systems::DiscreteValues<drake::symbolic::Expression>*) const
00000000003115b0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression>*) const>
000000000008acb0  w   DF .text	0000000000000144  Base        void std::vector<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > >, std::allocator<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > > >::emplace_back<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > >(std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > >&&)
000000000008e560  w   DF .text	000000000000015f  Base        drake::systems::BasicVector<drake::symbolic::Expression>::CopyToVector() const
0000000000096520  w   DF .text	000000000000005e  Base        std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_erase(std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*)
000000000009cd20  w   DF .text	000000000000005e  Base        std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)>::function(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)> const&)
0000000000073820  w   DF .text	000000000000000d  Base        drake::systems::DiagramContext<double>::get_mutable_state()
00000000000949b0  w   DF .text	00000000000000e5  Base        std::_Hashtable<drake::systems::System<double> const*, drake::systems::System<double> const*, std::allocator<drake::systems::System<double> const*>, std::__detail::_Identity, std::equal_to<drake::systems::System<double> const*>, std::hash<drake::systems::System<double> const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<drake::systems::System<double> const*, false>*)
000000000007fe90  w   DF .text	00000000000002df  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::Clear()
000000000007a750  w   DF .text	0000000000000018  Base        drake::systems::InputPortDescriptor<double>::~InputPortDescriptor()
0000000000089920  w   DF .text	0000000000000020  Base        drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~BasicVector()
0000000000096a00  w   DF .text	00000000000001a5  Base        fmt::internal::ArgMap<char>::init(fmt::ArgList const&)
00000000000c01c0  w   DF .text	0000000000000870  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoHasDirectFeedthrough(int, int) const
000000000009bdb0  w   DF .text	0000000000000104  Base        __gnu_cxx::__normal_iterator<std::pair<drake::systems::System<double> const*, int>*, std::vector<std::pair<drake::systems::System<double> const*, int>, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > std::__find_if<__gnu_cxx::__normal_iterator<std::pair<drake::systems::System<double> const*, int>*, std::vector<std::pair<drake::systems::System<double> const*, int>, std::allocator<std::pair<drake::systems::System<double> const*, int> > > >, __gnu_cxx::__ops::_Iter_equals_val<std::pair<drake::systems::System<double> const*, int> const> >(__gnu_cxx::__normal_iterator<std::pair<drake::systems::System<double> const*, int>*, std::vector<std::pair<drake::systems::System<double> const*, int>, std::allocator<std::pair<drake::systems::System<double> const*, int> > > >, __gnu_cxx::__normal_iterator<std::pair<drake::systems::System<double> const*, int>*, std::vector<std::pair<drake::systems::System<double> const*, int>, std::allocator<std::pair<drake::systems::System<double> const*, int> > > >, __gnu_cxx::__ops::_Iter_equals_val<std::pair<drake::systems::System<double> const*, int> const>, std::random_access_iterator_tag)
00000000003127a8  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::Context<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double>*) const>
000000000007b900  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*), drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000f3fc0  w   DO .rodata	00000000000000d7  Base        typeinfo name for drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Initialize(std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> >)::{lambda(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>*)#1}
00000000000e2d90  w   DF .text	000000000000002d  Base        std::_Sp_counted_ptr_inplace<RigidBodyFrame<double>, Eigen::aligned_allocator<RigidBodyFrame<double> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
000000000009bcc0  w   DF .text	00000000000000f0  Base        std::_Rb_tree_iterator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > > std::_Rb_tree<std::pair<drake::systems::System<double> const*, int>, std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > >, std::_Select1st<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > >, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<double> const*, int> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::pair<drake::systems::System<double> const*, int> const, std::set<std::pair<drake::systems::System<double> const*, int>, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > > > >, std::piecewise_construct_t const&, std::tuple<std::pair<drake::systems::System<double> const*, int> const&>&&, std::tuple<>&&)
00000000000bf810  w   DF .text	0000000000000621  Base        drake::systems::Diagram<drake::symbolic::Expression>::DispatchUnrestrictedUpdateHandler(drake::systems::Context<drake::symbolic::Expression> const&, drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > const&, drake::systems::State<drake::symbolic::Expression>*) const
0000000000073900  w   DF .text	0000000000000042  Base        fmt::BasicMemoryWriter<char, std::allocator<char> >::~BasicMemoryWriter()
00000000000bc320  w   DF .text	00000000000003e3  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DispatchDiscreteVariableUpdateHandler(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > const&, drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
000000000007be40  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::State<double> const*), drake::systems::State<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double> const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
000000000009b5c0  w   DF .text	00000000000003b1  Base        spdlog::logger::_default_err_handler(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000000b49f0  w   DF .text	0000000000000144  Base        void std::vector<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::emplace_back<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > >(std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >&&)
00000000000be240  w   DF .text	0000000000000104  Base        __gnu_cxx::__normal_iterator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > > std::__find_if<__gnu_cxx::__normal_iterator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > >, __gnu_cxx::__ops::_Iter_equals_val<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const> >(__gnu_cxx::__normal_iterator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > >, __gnu_cxx::__normal_iterator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const*, std::vector<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::allocator<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > > > >, __gnu_cxx::__ops::_Iter_equals_val<std::pair<drake::systems::System<double> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const>, std::random_access_iterator_tag)
0000000000312af0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >
0000000000071fe0  w   DF .text	0000000000000006  Base        spdlog::details::r_formatter::~r_formatter()
0000000000072ee0  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&)
00000000000f2fe0  w   DO .rodata	00000000000000dd  Base        typeinfo name for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<drake::symbolic::Expression> const&)#1}
00000000000b7190  w   DF .text	0000000000000648  Base        drake::systems::DiagramCompositeEventCollection<double>::DiagramCompositeEventCollection(std::vector<std::unique_ptr<drake::systems::CompositeEventCollection<double>, std::default_delete<drake::systems::CompositeEventCollection<double> > >, std::allocator<std::unique_ptr<drake::systems::CompositeEventCollection<double>, std::default_delete<drake::systems::CompositeEventCollection<double> > > > >)
0000000000071f60  w   DF .text	0000000000000006  Base        spdlog::details::ch_formatter::~ch_formatter()
000000000007cfe0  w   DF .text	00000000000000fd  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<double> >::DoMerge(drake::systems::EventCollection<drake::systems::UnrestrictedUpdateEvent<double> > const&)
00000000000cbce0  w   DF .text	0000000000000272  Base        drake::systems::DiagramContinuousState<double>::DoClone() const
0000000000317120 u    DO .bss	0000000000000008  Base        guard variable for drake::NiceTypeName::Get<drake::systems::ContactResults<double> >()::canonical
0000000000312878  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000095130  w   DF .text	000000000000004c  Base        std::_Rb_tree<std::pair<drake::systems::System<double> const*, int>, std::pair<drake::systems::System<double> const*, int>, std::_Identity<std::pair<drake::systems::System<double> const*, int> >, std::less<std::pair<drake::systems::System<double> const*, int> >, std::allocator<std::pair<drake::systems::System<double> const*, int> > >::_M_erase(std::_Rb_tree_node<std::pair<drake::systems::System<double> const*, int> >*)
00000000000c3140  w   DF .text	0000000000000166  Base        void std::vector<std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > >, std::allocator<std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > > > >::emplace_back<std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > > >(std::unique_ptr<drake::systems::PublishEvent<double>, std::default_delete<drake::systems::PublishEvent<double> > >&&)
0000000000071e90  w   DF .text	0000000000000035  Base        std::_Function_handler<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const>::_M_invoke(std::_Any_data const&, drake::systems::DiagramContext<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>&&)
0000000000310968  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
00000000000d8a50  w   DF .text	000000000000005e  Base        std::function<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > ()>::function(std::function<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > ()> const&)
0000000000072000  w   DF .text	0000000000000006  Base        spdlog::details::E_formatter::~E_formatter()
000000000007bf60  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::DiagramContinuousState<double> const*, drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>), drake::systems::ContinuousState<double> const& (drake::systems::DiagramContinuousState<double>::*)(int) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000f1460  w   DO .rodata	0000000000000029  Base        typeinfo name for spdlog::details::short_level_formatter
00000000000f11c0  w   DO .rodata	0000000000000034  Base        typeinfo name for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>
0000000000312b10  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::OutputPort<drake::symbolic::Expression>
00000000000744a0  w   DF .text	000000000000000f  Base        spdlog::details::S_formatter::~S_formatter()
000000000007b840  w   DF .text	000000000000005c  Base        std::_Function_handler<void (drake::systems::System<drake::symbolic::Expression> const*, drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*), drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*) const>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00000000000c9140  w   DF .text	0000000000000272  Base        drake::systems::DiagramContinuousState<drake::symbolic::Expression>::DoClone() const
000000000009e100  w   DF .text	00000000000000c9  Base        std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}> const&, std::_Manager_operation)
0000000000073740  w   DF .text	000000000000000d  Base        drake::systems::DiagramContext<drake::symbolic::Expression>::get_mutable_state()
00000000003118a0  w   DO .data.rel.ro	0000000000000028  Base        vtable for drake::systems::DiagramDiscreteValues<drake::symbolic::Expression>
0000000000074b20  w   DF .text	0000000000000018  Base        fmt::SystemError::~SystemError()
0000000000099e70  w   DF .text	0000000000000051  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fmt::format<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(fmt::BasicCStringRef<char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000086a50  w   DF .text	000000000000004e  Base        std::__shared_count<(__gnu_cxx::_Lock_policy)2>::operator=(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&)
00000000000cf9d0  w   DF .text	0000000000000318  Base        drake::systems::Supervector<drake::symbolic::Expression>::GetSubvectorAndOffset(int) const
0000000000073260  w   DF .text	000000000000007b  Base        drake::systems::ContinuousState<drake::symbolic::Expression>::~ContinuousState()
00000000000cd7e0  w   DF .text	0000000000000191  Base        drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::BasicVector(int)
000000000008e940  w   DF .text	00000000000001c2  Base        void std::vector<std::pair<drake::systems::PeriodicEventData, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >, std::allocator<std::pair<drake::systems::PeriodicEventData, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > > > >::_M_emplace_back_aux<std::pair<drake::systems::PeriodicEventData, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > > >(std::pair<drake::systems::PeriodicEventData, std::unique_ptr<drake::systems::Event<double>, std::default_delete<drake::systems::Event<double> > > >&&)
000000000009fb10  w   DF .text	000000000000061b  Base        drake::systems::IntegratorBase<double>::CalcStateChangeNorm(drake::systems::ContinuousState<double> const&) const
00000000000b0c80  w   DF .text	000000000000006a  Base        drake::systems::DiagramDiscreteValues<double>::~DiagramDiscreteValues()
00000000000e6400  w   DF .text	0000000000000b29  Base        Eigen::internal::product_selfadjoint_matrix<double, long, 0, false, false, 0, true, false, 0>::run(long, long, double const*, long, double const*, long, double*, long, double const&, Eigen::internal::level3_blocking<double, double>&)
00000000000d5260  w   DF .text	0000000000000012  Base        drake::systems::LeafSystemOutput<double>::get_num_ports() const
0000000000080170  w   DF .text	00000000000002df  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::Clear()
000000000007c270  w   DF .text	000000000000006b  Base        drake::systems::System<drake::symbolic::Expression>::DoEvalConstraintEquationsDot(drake::systems::Context<drake::symbolic::Expression> const&) const
00000000000c72e0  w   DF .text	00000000000001ca  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetWitnessFunctions(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, std::vector<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, std::allocator<drake::systems::WitnessFunction<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*> >*) const
00000000000ec820  w   DO .rodata	000000000000004b  Base        typeinfo name for drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (int)
00000000000ca700  w   DF .text	0000000000000345  Base        drake::systems::DiagramContinuousState<double>::DiagramContinuousState(std::vector<drake::systems::ContinuousState<double>*, std::allocator<drake::systems::ContinuousState<double>*> >)
0000000000310c70  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > ()
00000000003110a0  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::ContinuousState<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::ContinuousState<drake::symbolic::Expression> const*) const
00000000000de940  w   DF .text	00000000000002aa  Base        drake::systems::CompositeEventCollection<double>::SetFrom(drake::systems::CompositeEventCollection<double> const&)
00000000000d51f0  w   DF .text	000000000000001f  Base        drake::systems::LeafSystem<double>::AllocateTimeDerivatives() const
00000000000daf50  w   DF .text	00000000000000cb  Base        void std::vector<drake::systems::DiscreteUpdateEvent<double> const*, std::allocator<drake::systems::DiscreteUpdateEvent<double> const*> >::emplace_back<drake::systems::DiscreteUpdateEvent<double> const*>(drake::systems::DiscreteUpdateEvent<double> const*&&)
00000000000f1b20  w   DO .rodata	000000000000001b  Base        typeinfo name for drake::systems::System<double>
0000000000086a30  w   DF .text	000000000000001a  Base        std::shared_ptr<spdlog::sinks::stderr_sink<std::mutex> >::~shared_ptr()
000000000009cb60  w   DF .text	000000000000018d  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~System()
000000000007f6c0  w   DF .text	000000000000018f  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::SetDefaultState(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000d79a0  w   DF .text	000000000000005e  Base        std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)>::function(std::function<void (drake::systems::Context<double> const&, drake::systems::BasicVector<double>*)> const&)
0000000000083970  w   DF .text	0000000000000033  Base        std::type_info::operator!=(std::type_info const&) const
00000000003134a8  w   DO .data.rel.ro	0000000000000028  Base        vtable for spdlog::pattern_formatter
00000000000718c0  w   DF .text	0000000000000012  Base        drake::systems::System<double>::DoCalcNextUpdateTime(drake::systems::Context<double> const&, drake::systems::CompositeEventCollection<double>*, double*) const
0000000000311758  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double>*) const>
0000000000311a70  w   DO .data.rel.ro	0000000000000028  Base        vtable for drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000093920  w   DF .text	000000000000062f  Base        drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::NormInf() const
0000000000311140  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*) const
000000000008cd90  w   DF .text	0000000000000036  Base        std::__shared_ptr<drake::symbolic::ExpressionCell, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<drake::symbolic::ExpressionCell, (__gnu_cxx::_Lock_policy)2> const&)
0000000000073020  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::State<double>* (drake::systems::System<double> const*, drake::systems::System<double> const&, drake::systems::State<double>*), drake::systems::State<double>* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double>*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<double> const*&&, drake::systems::System<double> const&, drake::systems::State<double>*&&)
00000000000b3910  w   DF .text	0000000000000148  Base        drake::systems::DiscreteValues<drake::symbolic::Expression>::DiscreteValues(std::vector<drake::systems::BasicVector<drake::symbolic::Expression>*, std::allocator<drake::systems::BasicVector<drake::symbolic::Expression>*> > const&)
000000000008a0a0  w   DF .text	000000000000008e  Base        drake::systems::RungeKutta3Integrator<double>::~RungeKutta3Integrator()
00000000000cbf60  w   DF .text	000000000000018d  Base        drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::ContinuousState(std::unique_ptr<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >)
0000000000312a50  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::SystemScalarConverter::Add<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}
00000000000847f0  w   DF .text	000000000000005a  Base        fmt::BasicWriter<char>::operator<<(char)
00000000003123b8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::sinks::stderr_sink<std::mutex>
00000000000bda90  w   DF .text	0000000000000086  Base        std::vector<double, std::allocator<double> >::vector(std::vector<double, std::allocator<double> > const&)
00000000000d5090  w   DF .text	0000000000000022  Base        std::_Function_handler<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > (), drake::systems::LeafSystem<double>::MakeAllocCallback<drake::systems::BasicVector<double> >(drake::systems::BasicVector<double> const&)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
00000000000717a0  w   DF .text	0000000000000060  Base        drake::systems::State<double>::~State()
00000000000d8fc0  w   DF .text	000000000000005e  Base        std::function<void (drake::systems::Context<double> const&, drake::systems::AbstractValue*)>::function(std::function<void (drake::systems::Context<double> const&, drake::systems::AbstractValue*)> const&)
00000000000f4ba0  w   DO .rodata	0000000000000053  Base        typeinfo name for drake::systems::Context<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::Context<drake::symbolic::Expression> const*) const
0000000000073e10  w   DF .text	000000000000007b  Base        drake::systems::DiagramEventCollection<drake::systems::DiscreteUpdateEvent<drake::symbolic::Expression> >::~DiagramEventCollection()
00000000000899c0  w   DF .text	0000000000000146  Base        std::_Function_handler<void (drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>*), drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Initialize(std::unique_ptr<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint, std::default_delete<drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Blueprint> >)::{lambda(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>*)#1}>::_M_invoke(std::_Any_data const&, drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>*&&)
00000000000d2140  w   DF .text	0000000000000123  Base        drake::systems::BasicVector<drake::symbolic::Expression>::Clone() const
0000000000312180  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::m_formatter
00000000000dadf0  w   DF .text	0000000000000156  Base        void std::vector<std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > > > >::emplace_back<std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > > >(std::unique_ptr<drake::systems::DiscreteUpdateEvent<double>, std::default_delete<drake::systems::DiscreteUpdateEvent<double> > >&&)
000000000007cf90  w   DF .text	0000000000000049  Base        drake::systems::Supervector<drake::symbolic::Expression>::~Supervector()
0000000000311e58  w   DO .data.rel.ro	0000000000000078  Base        vtable for drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
000000000007cef0  w   DF .text	0000000000000049  Base        drake::systems::Supervector<double>::~Supervector()
0000000000079dd0  w   DF .text	000000000000005d  Base        drake::systems::System<double>::DoMapQDotToVelocity(drake::systems::Context<double> const&, Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<double>*) const
0000000000312168  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for spdlog::details::Y_formatter
00000000000f0f60  w   DO .rodata	0000000000000065  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*) const>
00000000000714b0  w   DF .text	000000000000002f  Base        spdlog::logger::flush()
000000000009f920  w   DF .text	0000000000000089  Base        std::vector<std::unique_ptr<drake::systems::SystemConstraint<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemConstraint<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::SystemConstraint<drake::symbolic::Expression>, std::default_delete<drake::systems::SystemConstraint<drake::symbolic::Expression> > > > >::~vector()
00000000000ecb20  w   DO .rodata	000000000000005d  Base        typeinfo name for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const& (int)
0000000000074490  w   DF .text	000000000000000f  Base        spdlog::details::e_formatter::~e_formatter()
00000000000f2640  w   DO .rodata	0000000000000075  Base        typeinfo name for std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > (drake::systems::System<double>::*)() const
00000000000dcf40  w   DF .text	0000000000000137  Base        void std::vector<std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > >, std::allocator<std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > > > >::_M_emplace_back_aux<std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > > >(std::unique_ptr<drake::systems::SystemConstraint<double>, std::default_delete<drake::systems::SystemConstraint<double> > >&&)
00000000000b9fd0  w   DF .text	000000000000014b  Base        drake::systems::OutputPort<double>::Allocate() const
00000000000b2430  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::BasicVector<drake::symbolic::Expression>, std::default_delete<drake::systems::BasicVector<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::BasicVector<drake::symbolic::Expression>, std::default_delete<drake::systems::BasicVector<drake::symbolic::Expression> > > > >::~vector()
00000000000db2b0  w   DF .text	000000000000010d  Base        drake::systems::DiscreteUpdateEvent<double>::add_to_composite(drake::systems::CompositeEventCollection<double>*) const
0000000000074f20  w   DF .text	000000000000006e  Base        drake::systems::DiagramContext<drake::symbolic::Expression>::GetSubsystemContext(drake::TypeSafeIndex<drake::systems::SubsystemIndexTag>) const
0000000000072840  w   DF .text	0000000000000012  Base        drake::systems::System<drake::symbolic::Expression>::DoGetTargetSystemCompositeEventCollection(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*) const
00000000000836b0  w   DF .text	00000000000002b3  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetInitializationEvents(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000073670  w   DF .text	000000000000001c  Base        drake::systems::Supervector<drake::symbolic::Expression>::size() const
0000000000310d98  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >
0000000000071990  w   DF .text	0000000000000006  Base        drake::systems::WitnessTriggeredEventData<double>::~WitnessTriggeredEventData()
00000000000f2c00  w   DO .rodata	00000000000000c3  Base        typeinfo name for drake::systems::SystemScalarConverter::AddIfSupported<drake::systems::Diagram, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, double>(drake::systems::SystemScalarConverter::GuaranteedSubtypePreservation)::{lambda(drake::systems::System<double> const&)#1}
0000000000097120  w   DF .text	00000000000000fa  Base        void fmt::internal::check_sign<char>(char const*&, fmt::internal::Arg const&)
00000000000d72b0  w   DF .text	000000000000006b  Base        Eigen::Matrix<double, -1, 1, 0, -1, 1>::Matrix<int>(int const&)
00000000000efb40  w   DO .rodata	000000000000005e  Base        typeinfo name for drake::systems::CompositeEventCollection<double> const& (drake::systems::DiagramCompositeEventCollection<double>::*)(int) const
0000000000086b50  w   DF .text	000000000000007e  Base        spdlog::async_logger::_set_formatter(std::shared_ptr<spdlog::formatter>)
0000000000086ac0  w   DF .text	0000000000000019  Base        spdlog::logger::_set_formatter(std::shared_ptr<spdlog::formatter>)
000000000007a0d0  w   DF .text	0000000000000018  Base        drake::systems::Value<int>::~Value()
00000000000f17a0  w   DO .rodata	0000000000000021  Base        typeinfo name for spdlog::details::pid_formatter
00000000000bbe10  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
00000000000a3bf0  w   DF .text	0000000000000171  Base        void std::vector<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > >, std::allocator<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > > >::emplace_back<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > >(std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > >&&)
00000000000a29f0  w   DF .text	0000000000000171  Base        void std::vector<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::emplace_back<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > >(std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >&&)
00000000003115e0  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<drake::symbolic::Expression> const& (drake::systems::DiagramCompositeEventCollection<drake::symbolic::Expression>::*)(int) const>
00000000000aff40  w   DF .text	00000000000002e3  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoMapQDotToVelocity(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, Eigen::Ref<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> const, 0, Eigen::InnerStride<1> > const&, drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
000000000008e6c0  w   DF .text	00000000000000f0  Base        std::_Function_handler<void (drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>*), drake::systems::Diagram<drake::symbolic::Expression>::Initialize(std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> >)::{lambda(drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>*)#1}>::_M_invoke(std::_Any_data const&, drake::systems::Context<drake::symbolic::Expression> const&, Eigen::Matrix<drake::symbolic::Expression, -1, 1, 0, -1, 1>*&&)
00000000000853e0  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> >, std::allocator<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > > >::~vector()
00000000000d6ae0  w   DF .text	00000000000000a4  Base        drake::systems::LeafEventCollection<drake::systems::DiscreteUpdateEvent<double> >::Clear()
00000000000e08d0  w   DF .text	00000000000006ba  Base        drake::systems::LeafSystem<double>::DoMakeContext() const
00000000000db500  w   DF .text	0000000000000156  Base        void std::vector<std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > >, std::allocator<std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > > > >::emplace_back<std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > > >(std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<double>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<double> > >&&)
00000000000b0230  w   DF .text	00000000000000c4  Base        drake::systems::OutputPort<double>::Calc(drake::systems::Context<double> const&, drake::systems::AbstractValue*) const
0000000000310d68  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::WitnessTriggeredEventData<drake::symbolic::Expression>
0000000000072e20  w   DF .text	000000000000002a  Base        std::_Function_handler<drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*), drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*&&)
00000000003169e0 u    DO .bss	0000000000000020  Base        drake::NiceTypeName::Get<drake::systems::Diagram<double> >()::canonical[abi:cxx11]
00000000000f0cc0  w   DO .rodata	0000000000000051  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::State<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::State<double> const*) const>
00000000000d5180  w   DF .text	000000000000000b  Base        drake::systems::DiscreteUpdateEvent<double>::is_discrete_update() const
00000000000d50c0  w   DF .text	0000000000000067  Base        drake::systems::UnrestrictedUpdateEvent<double>::~UnrestrictedUpdateEvent()
0000000000310918  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::CompositeEventCollection<drake::symbolic::Expression>& (int)
00000000000cd6b0  w   DF .text	0000000000000122  Base        void Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> >, Eigen::internal::assign_op<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >(Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1>&, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, Eigen::Matrix<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, -1, 1, 0, -1, 1> > const&, Eigen::internal::assign_op<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> >, Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&)
00000000000b9d90  w   DF .text	000000000000001f  Base        drake::systems::DiagramOutputPort<drake::symbolic::Expression>::DoAllocate() const
00000000000d6680  w   DF .text	0000000000000073  Base        drake::systems::LeafSystemOutput<double>::~LeafSystemOutput()
00000000000bda80  w   DF .text	000000000000000c  Base        non-virtual thunk to drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::EvalConnectedSubsystemInputPort(drake::systems::ContextBase const&, drake::systems::InputPortBase const&) const
00000000000afa20  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
00000000000743f0  w   DF .text	000000000000000f  Base        spdlog::details::pid_formatter::~pid_formatter()
0000000000072100  w   DF .text	0000000000000006  Base        spdlog::details::A_formatter::~A_formatter()
000000000007d3e0  w   DF .text	00000000000000fd  Base        drake::systems::DiagramEventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >::DoMerge(drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > const&)
00000000000ef060  w   DO .rodata	0000000000000065  Base        typeinfo name for drake::systems::CompositeEventCollection<drake::symbolic::Expression> const* (drake::systems::System<drake::symbolic::Expression>::*)(drake::systems::System<drake::symbolic::Expression> const&, drake::systems::CompositeEventCollection<drake::symbolic::Expression> const*) const
00000000000e1fc0  w   DF .text	00000000000000a1  Base        std::_MakeUniq<drake::systems::ContinuousState<double> >::__single_object std::make_unique<drake::systems::ContinuousState<double>, std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >, int, int, int>(std::unique_ptr<drake::systems::BasicVector<double>, std::default_delete<drake::systems::BasicVector<double> > >&&, int&&, int&&, int&&)
0000000000073f20  w   DF .text	000000000000000a  Base        std::_Sp_counted_ptr_inplace<spdlog::pattern_formatter, std::allocator<spdlog::pattern_formatter>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
0000000000073f10  w   DF .text	000000000000000a  Base        std::_Sp_counted_ptr_inplace<spdlog::sinks::stderr_sink<std::mutex>, std::allocator<spdlog::sinks::stderr_sink<std::mutex> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
0000000000071cc0  w   DF .text	0000000000000036  Base        std::_Function_handler<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)() const>::_M_invoke(std::_Any_data const&, drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*&&)
0000000000079b80  w   DF .text	00000000000000c3  Base        drake::systems::VectorBase<double>::ScaleAndAddToVector(double const&, Eigen::Ref<Eigen::Matrix<double, -1, 1, 0, -1, 1>, 0, Eigen::InnerStride<1> >) const
0000000000080fd0  w   DF .text	0000000000000083  Base        spdlog::pattern_formatter::~pattern_formatter()
0000000000073430  w   DF .text	000000000000000a  Base        drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::z_selector(drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*)
00000000000c4d60  w   DF .text	0000000000000201  Base        drake::systems::DiagramDiscreteValues<double>::DiagramDiscreteValues(std::vector<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<double>, std::default_delete<drake::systems::DiscreteValues<double> > > > >)
0000000000310c50  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::Context<double> const* (drake::systems::System<double> const&, drake::systems::Context<double> const*)
00000000000721f0  w   DF .text	0000000000000006  Base        drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~Subvector()
000000000007c8d0  w   DF .text	0000000000000069  Base        drake::systems::BasicVector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetAtIndex(int) const
00000000000718a0  w   DF .text	0000000000000012  Base        drake::systems::System<double>::DoGetMutableTargetSystemContext(drake::systems::System<double> const&, drake::systems::Context<double>*) const
00000000000e1440  w   DF .text	0000000000000468  Base        drake::systems::SystemSymbolicInspector::~SystemSymbolicInspector()
00000000000c3520  w   DF .text	00000000000001ac  Base        drake::systems::State<double>::State()
0000000000073f30  w   DF .text	000000000000002a  Base        drake::systems::internal::DiagramOutput<drake::symbolic::Expression>::~DiagramOutput()
00000000000afb90  w   DF .text	00000000000000b4  Base        drake::systems::Subvector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::Subvector(drake::systems::VectorBase<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*, int, int)
00000000000c50c0  w   DF .text	0000000000000141  Base        drake::systems::DiagramDiscreteValues<double>::DoClone() const
0000000000074d30  w   DF .text	000000000000002a  Base        std::_Function_handler<void* (void const*), drake::systems::SystemScalarConverter::Add<double, drake::symbolic::Expression>(std::function<std::unique_ptr<drake::systems::System<double>, std::default_delete<drake::systems::System<double> > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)::{lambda(void const*)#1}>::_M_invoke(std::_Any_data const&, void const*&&)
00000000000afad0  w   DF .text	000000000000004d  Base        drake::systems::DiagramContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramContinuousState()
0000000000311230  w   DO .data.rel.ro	0000000000000028  Base        typeinfo for drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::State<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const*) const
00000000000cf3d0  w   DF .text	0000000000000018  Base        drake::systems::Supervector<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::GetAtIndex(int)
00000000000f1be0  w   DO .rodata	0000000000000039  Base        typeinfo name for drake::systems::BasicVector<drake::symbolic::Expression>
00000000003168e0 u    DO .bss	0000000000000020  Base        drake::NiceTypeName::Get<drake::systems::Context<drake::symbolic::Expression> >()::canonical[abi:cxx11]
0000000000073d10  w   DF .text	000000000000007b  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > >::~DiagramEventCollection()
0000000000071d40  w   DF .text	0000000000000036  Base        std::_Function_handler<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression> const*), std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<drake::symbolic::Expression> > > > (drake::systems::System<drake::symbolic::Expression>::*)() const>::_M_invoke(std::_Any_data const&, drake::systems::System<drake::symbolic::Expression> const*&&)
00000000000f0980  w   DO .rodata	00000000000000b6  Base        typeinfo name for std::_Simple_type_wrapper<drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >& (drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(int)>
000000000007a010  w   DF .text	000000000000001e  Base        drake::systems::DiagramEventCollection<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> >::add_event(std::unique_ptr<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression>, std::default_delete<drake::systems::UnrestrictedUpdateEvent<drake::symbolic::Expression> > >)
00000000000afb20  w   DF .text	0000000000000063  Base        std::vector<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > >, std::allocator<std::unique_ptr<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::DiscreteValues<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > > >::~vector()
0000000000099e20  w   DF .text	0000000000000042  Base        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fmt::format<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(fmt::BasicCStringRef<char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000310b08  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for drake::systems::State<drake::symbolic::Expression>* (drake::systems::System<drake::symbolic::Expression> const&, drake::systems::State<drake::symbolic::Expression>*)
0000000000089770  w   DF .text	0000000000000144  Base        void std::vector<std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> >, std::allocator<std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> > > >::emplace_back<std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> > >(std::unique_ptr<drake::systems::InputPortBase, std::default_delete<drake::systems::InputPortBase> >&&)
000000000009f6b0  w   DF .text	0000000000000270  Base        drake::systems::Diagram<double>::Diagram(std::unique_ptr<drake::systems::Diagram<double>::Blueprint, std::default_delete<drake::systems::Diagram<double>::Blueprint> >)
00000000000af9e0  w   DF .text	000000000000003f  Base        drake::systems::DiagramCompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::~DiagramCompositeEventCollection()
00000000000d5910  w   DF .text	000000000000002d  Base        std::_Sp_counted_deleter<drake::systems::AbstractValue*, std::default_delete<drake::systems::AbstractValue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
00000000000867e0  w   DF .text	0000000000000026  Base        spdlog::details::v_formatter::format(spdlog::details::log_msg&, tm const&)
0000000000083c30  w   DF .text	00000000000001a2  Base        spdlog::details::async_log_helper::push_msg(spdlog::details::async_log_helper::async_msg&&)
00000000000e28e0  w   DF .text	0000000000000353  Base        drake::systems::LeafContext<double>::DoCloneWithoutPointers() const
00000000000ed100  w   DO .rodata	0000000000000033  Base        typeinfo name for drake::systems::CompositeEventCollection<double> const& (int)
00000000000f2a20  w   DO .rodata	000000000000008f  Base        typeinfo name for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::PublishEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::PublishEvent<double> > > > (drake::systems::System<double>::*)() const>
0000000000072980  w   DF .text	0000000000000012  Base        drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoGetMutableTargetSystemCompositeEventCollection(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000969a0  w   DF .text	0000000000000056  Base        void std::vector<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg>, std::allocator<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg> > >::emplace_back<std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg> >(std::pair<fmt::BasicStringRef<char>, fmt::internal::Arg>&&)
00000000000aca10  w   DF .text	0000000000001442  Base        drake::systems::Diagram<drake::symbolic::Expression>::Initialize(std::unique_ptr<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint, std::default_delete<drake::systems::Diagram<drake::symbolic::Expression>::Blueprint> >)
0000000000079880  w   DF .text	00000000000002b4  Base        drake::systems::Diagram<double>::DoGetTargetSystemCompositeEventCollection(drake::systems::System<double> const&, drake::systems::CompositeEventCollection<double> const*) const
0000000000312980  w   DO .data.rel.ro	0000000000000010  Base        typeinfo for std::_Simple_type_wrapper<std::unique_ptr<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> >, std::default_delete<drake::systems::EventCollection<drake::systems::DiscreteUpdateEvent<double> > > > (drake::systems::System<double>::*)() const>
000000000009dc90  w   DF .text	000000000000005e  Base        std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)>::function(std::function<std::unique_ptr<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >, std::default_delete<drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > > > (drake::systems::System<drake::symbolic::Expression> const&)> const&)
00000000003125b8  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::InputPortDescriptor<double>
00000000000ef5e0  w   DO .rodata	000000000000008a  Base        typeinfo name for drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >* (drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::*)(drake::systems::System<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::CompositeEventCollection<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
00000000000f30c0  w   DO .rodata	0000000000000039  Base        typeinfo name for drake::systems::Context<double> const* (drake::systems::System<double>::*)(drake::systems::System<double> const&, drake::systems::Context<double> const*) const
000000000007e270  w   DF .text	00000000000001df  Base        drake::systems::Diagram<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >::DoCalcTimeDerivatives(drake::systems::Context<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > > const&, drake::systems::ContinuousState<Eigen::AutoDiffScalar<Eigen::Matrix<double, -1, 1, 0, -1, 1> > >*) const
0000000000312f28  w   DO .data.rel.ro	0000000000000028  Base        vtable for fmt::FormatError
00000000000f1650  w   DO .rodata	000000000000001f  Base        typeinfo name for spdlog::details::e_formatter
00000000000826d0  w   DF .text	0000000000000137  Base        drake::systems::BasicVector<double>::NormInf() const
00000000000a7190  w   DF .text	000000000000009e  Base        std::_Rb_tree<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> >, std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > >, std::_Select1st<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > >, std::less<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > >, std::allocator<std::pair<std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const, std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::OutputPortTag> > > > >::_M_get_insert_unique_pos(std::pair<drake::systems::System<drake::symbolic::Expression> const*, drake::TypeSafeIndex<drake::systems::InputPortTag> > const&)
0000000000074ca0  w   DF .text	000000000000002a  Base        std::_Function_handler<void* (void const*), drake::systems::SystemScalarConverter::Add<drake::symbolic::Expression, double>(std::function<std::unique_ptr<drake::systems::System<drake::symbolic::Expression>, std::default_delete<drake::systems::System<drake::symbolic::Expression> > > (drake::systems::System<double> const&)> const&)::{lambda(void const*)#1}>::_M_invoke(std::_Any_data const&, void const*&&)
0000000000314170  w   DO .data.rel.ro	0000000000000038  Base        vtable for drake::systems::PublishEvent<double>
00000000003124a0  w   DO .data.rel.ro	0000000000000018  Base        typeinfo for drake::systems::System<double>


DYNAMIC RELOCATION RECORDS
OFFSET           TYPE              VALUE 
0000000000310830 R_X86_64_RELATIVE  *ABS*+0x0000000000071480
0000000000310838 R_X86_64_RELATIVE  *ABS*+0x0000000000070120
0000000000310840 R_X86_64_RELATIVE  *ABS*+0x00000000000708a0
0000000000310848 R_X86_64_RELATIVE  *ABS*+0x0000000000070e10
0000000000310850 R_X86_64_RELATIVE  *ABS*+0x0000000000071440
0000000000310868 R_X86_64_RELATIVE  *ABS*+0x0000000000312078
0000000000310870 R_X86_64_RELATIVE  *ABS*+0x0000000000072140
0000000000310878 R_X86_64_RELATIVE  *ABS*+0x00000000000745a0
0000000000310880 R_X86_64_RELATIVE  *ABS*+0x0000000000086980
00000000003108a0 R_X86_64_RELATIVE  *ABS*+0x00000000000ea492
00000000003108a8 R_X86_64_RELATIVE  *ABS*+0x00000000000ea428
00000000003108b0 R_X86_64_RELATIVE  *ABS*+0x00000000000ea494
00000000003108b8 R_X86_64_RELATIVE  *ABS*+0x00000000000ea496
00000000003108c0 R_X86_64_RELATIVE  *ABS*+0x00000000000ea498
00000000003108c8 R_X86_64_RELATIVE  *ABS*+0x00000000000ea49a
00000000003108d0 R_X86_64_RELATIVE  *ABS*+0x00000000000ea49c
00000000003108e0 R_X86_64_RELATIVE  *ABS*+0x00000000000e9e62
00000000003108e8 R_X86_64_RELATIVE  *ABS*+0x00000000000e9e68
00000000003108f0 R_X86_64_RELATIVE  *ABS*+0x00000000000ea49e
00000000003108f8 R_X86_64_RELATIVE  *ABS*+0x00000000000ea4a3
0000000000310900 R_X86_64_RELATIVE  *ABS*+0x00000000000ea4ab
0000000000310908 R_X86_64_RELATIVE  *ABS*+0x00000000000ea4b1
0000000000310910 R_X86_64_RELATIVE  *ABS*+0x00000000000ea4ba
0000000000310920 R_X86_64_RELATIVE  *ABS*+0x00000000000ec760
0000000000310930 R_X86_64_RELATIVE  *ABS*+0x00000000000ec7c0
0000000000310940 R_X86_64_RELATIVE  *ABS*+0x00000000000ec820
0000000000310950 R_X86_64_RELATIVE  *ABS*+0x00000000000ec880
0000000000310960 R_X86_64_RELATIVE  *ABS*+0x00000000000ec900
0000000000310970 R_X86_64_RELATIVE  *ABS*+0x00000000000ec9a0
0000000000310980 R_X86_64_RELATIVE  *ABS*+0x00000000000eca20
0000000000310990 R_X86_64_RELATIVE  *ABS*+0x00000000000eca40
00000000003109a0 R_X86_64_RELATIVE  *ABS*+0x00000000000ecaa0
00000000003109b0 R_X86_64_RELATIVE  *ABS*+0x00000000000ecb20
00000000003109c0 R_X86_64_RELATIVE  *ABS*+0x00000000000ecb80
00000000003109d0 R_X86_64_RELATIVE  *ABS*+0x00000000000ecc00
00000000003109e0 R_X86_64_RELATIVE  *ABS*+0x00000000000ecc80
00000000003109f0 R_X86_64_RELATIVE  *ABS*+0x00000000000ecd20
0000000000310a00 R_X86_64_RELATIVE  *ABS*+0x00000000000ecda0
0000000000310a10 R_X86_64_RELATIVE  *ABS*+0x00000000000ece40
0000000000310a20 R_X86_64_RELATIVE  *ABS*+0x00000000000ecec0
0000000000310a30 R_X86_64_RELATIVE  *ABS*+0x00000000000ecf00
0000000000310a40 R_X86_64_RELATIVE  *ABS*+0x00000000000ecf20
0000000000310a50 R_X86_64_RELATIVE  *ABS*+0x00000000000ecf60
0000000000310a60 R_X86_64_RELATIVE  *ABS*+0x00000000000ecf80
0000000000310a70 R_X86_64_RELATIVE  *ABS*+0x00000000000ecfc0
0000000000310a80 R_X86_64_RELATIVE  *ABS*+0x00000000000ed000
0000000000310a90 R_X86_64_RELATIVE  *ABS*+0x00000000000ed060
0000000000310aa0 R_X86_64_RELATIVE  *ABS*+0x00000000000ed0a0
0000000000310ab0 R_X86_64_RELATIVE  *ABS*+0x00000000000ed100
0000000000310ac0 R_X86_64_RELATIVE  *ABS*+0x00000000000ed140
0000000000310ad0 R_X86_64_RELATIVE  *ABS*+0x00000000000ed1a0
0000000000310ae0 R_X86_64_RELATIVE  *ABS*+0x00000000000ed220
0000000000310af0 R_X86_64_RELATIVE  *ABS*+0x00000000000ed260
0000000000310b00 R_X86_64_RELATIVE  *ABS*+0x00000000000ed2c0
0000000000310b10 R_X86_64_RELATIVE  *ABS*+0x00000000000ed340
0000000000310b20 R_X86_64_RELATIVE  *ABS*+0x00000000000ed3a0
0000000000310b30 R_X86_64_RELATIVE  *ABS*+0x00000000000ed3e0
0000000000310b40 R_X86_64_RELATIVE  *ABS*+0x00000000000ed440
0000000000310b50 R_X86_64_RELATIVE  *ABS*+0x00000000000ed480
0000000000310b60 R_X86_64_RELATIVE  *ABS*+0x00000000000ed4e0
0000000000310b70 R_X86_64_RELATIVE  *ABS*+0x00000000000ed540
0000000000310b80 R_X86_64_RELATIVE  *ABS*+0x00000000000ed5a0
0000000000310b90 R_X86_64_RELATIVE  *ABS*+0x00000000000ed600
0000000000310ba0 R_X86_64_RELATIVE  *ABS*+0x00000000000ed640
0000000000310bb0 R_X86_64_RELATIVE  *ABS*+0x00000000000ed6a0
0000000000310bc0 R_X86_64_RELATIVE  *ABS*+0x00000000000ed720
0000000000310bd0 R_X86_64_RELATIVE  *ABS*+0x00000000000ed794
0000000000310bd8 R_X86_64_RELATIVE  *ABS*+0x0000000000310978
0000000000310be8 R_X86_64_RELATIVE  *ABS*+0x00000000000ed7a0
0000000000310bf8 R_X86_64_RELATIVE  *ABS*+0x00000000000ed860
0000000000310c08 R_X86_64_RELATIVE  *ABS*+0x00000000000ed920
0000000000310c18 R_X86_64_RELATIVE  *ABS*+0x00000000000ed9e0
0000000000310c28 R_X86_64_RELATIVE  *ABS*+0x00000000000eda80
0000000000310c38 R_X86_64_RELATIVE  *ABS*+0x00000000000edac0
0000000000310c48 R_X86_64_RELATIVE  *ABS*+0x00000000000edb20
0000000000310c58 R_X86_64_RELATIVE  *ABS*+0x00000000000edba0
0000000000310c68 R_X86_64_RELATIVE  *ABS*+0x00000000000edbe0
0000000000310c78 R_X86_64_RELATIVE  *ABS*+0x00000000000edc80
0000000000310c88 R_X86_64_RELATIVE  *ABS*+0x00000000000edd00
0000000000310c98 R_X86_64_RELATIVE  *ABS*+0x00000000000edd80
0000000000310ca8 R_X86_64_RELATIVE  *ABS*+0x00000000000ede60
0000000000310cb8 R_X86_64_RELATIVE  *ABS*+0x00000000000edf40
0000000000310cc8 R_X86_64_RELATIVE  *ABS*+0x00000000000edfe0
0000000000310cd8 R_X86_64_RELATIVE  *ABS*+0x00000000000ee040
0000000000310ce0 R_X86_64_RELATIVE  *ABS*+0x0000000000310cc0
0000000000310cf0 R_X86_64_RELATIVE  *ABS*+0x00000000000ee0a0
0000000000310cf8 R_X86_64_RELATIVE  *ABS*+0x0000000000312528
0000000000310d08 R_X86_64_RELATIVE  *ABS*+0x00000000000ee100
0000000000310d10 R_X86_64_RELATIVE  *ABS*+0x00000000003124e0
0000000000310d20 R_X86_64_RELATIVE  *ABS*+0x00000000000ee160
0000000000310d28 R_X86_64_RELATIVE  *ABS*+0x00000000003124f0
0000000000310d38 R_X86_64_RELATIVE  *ABS*+0x00000000000ee1c0
0000000000310d48 R_X86_64_RELATIVE  *ABS*+0x00000000000ee200
0000000000310d50 R_X86_64_RELATIVE  *ABS*+0x0000000000310d30
0000000000310d60 R_X86_64_RELATIVE  *ABS*+0x00000000000ee240
0000000000310d70 R_X86_64_RELATIVE  *ABS*+0x00000000000ee280
0000000000310d78 R_X86_64_RELATIVE  *ABS*+0x0000000000312448
0000000000310d88 R_X86_64_RELATIVE  *ABS*+0x00000000000ee2e0
0000000000310d90 R_X86_64_RELATIVE  *ABS*+0x0000000000312500
0000000000310da0 R_X86_64_RELATIVE  *ABS*+0x00000000000ee320
0000000000310db0 R_X86_64_RELATIVE  *ABS*+0x00000000000ee3a0
0000000000310db8 R_X86_64_RELATIVE  *ABS*+0x0000000000310d98
0000000000310dc8 R_X86_64_RELATIVE  *ABS*+0x00000000000ee420
0000000000310dd8 R_X86_64_RELATIVE  *ABS*+0x00000000000ee480
0000000000310de0 R_X86_64_RELATIVE  *ABS*+0x0000000000310dc0
0000000000310df0 R_X86_64_RELATIVE  *ABS*+0x00000000000ee500
0000000000310e00 R_X86_64_RELATIVE  *ABS*+0x00000000000ee580
0000000000310e08 R_X86_64_RELATIVE  *ABS*+0x0000000000310de8
0000000000310e18 R_X86_64_RELATIVE  *ABS*+0x00000000000ee600
0000000000310e28 R_X86_64_RELATIVE  *ABS*+0x00000000000ee680
0000000000310e30 R_X86_64_RELATIVE  *ABS*+0x0000000000310e10
0000000000310e40 R_X86_64_RELATIVE  *ABS*+0x00000000000ee700
0000000000310e50 R_X86_64_RELATIVE  *ABS*+0x00000000000ee760
0000000000310e58 R_X86_64_RELATIVE  *ABS*+0x0000000000310e38
0000000000310e68 R_X86_64_RELATIVE  *ABS*+0x00000000000ee7c0
0000000000310e78 R_X86_64_RELATIVE  *ABS*+0x00000000000ee820
0000000000310e88 R_X86_64_RELATIVE  *ABS*+0x00000000000ee880
0000000000310e90 R_X86_64_RELATIVE  *ABS*+0x0000000000310e70
0000000000310ea0 R_X86_64_RELATIVE  *ABS*+0x00000000000ee8e0
0000000000310ea8 R_X86_64_RELATIVE  *ABS*+0x0000000000312448
0000000000310eb8 R_X86_64_RELATIVE  *ABS*+0x00000000000ee960
0000000000310ec0 R_X86_64_RELATIVE  *ABS*+0x0000000000310e70
0000000000310ed0 R_X86_64_RELATIVE  *ABS*+0x00000000000ee9c0
0000000000310ee8 R_X86_64_RELATIVE  *ABS*+0x00000000000eea00
0000000000310f00 R_X86_64_RELATIVE  *ABS*+0x00000000000eea40
0000000000310f08 R_X86_64_RELATIVE  *ABS*+0x0000000000312548
0000000000310f18 R_X86_64_RELATIVE  *ABS*+0x00000000000eea80
0000000000310f28 R_X86_64_RELATIVE  *ABS*+0x00000000000eeac0
0000000000310f30 R_X86_64_RELATIVE  *ABS*+0x0000000000310f10
0000000000310f40 R_X86_64_RELATIVE  *ABS*+0x00000000000eeb00
0000000000310f48 R_X86_64_RELATIVE  *ABS*+0x0000000000312650
0000000000310f58 R_X86_64_RELATIVE  *ABS*+0x00000000000eeb40
0000000000310f60 R_X86_64_RELATIVE  *ABS*+0x0000000000312660
0000000000310f70 R_X86_64_RELATIVE  *ABS*+0x00000000000eeb80
0000000000310f78 R_X86_64_RELATIVE  *ABS*+0x0000000000312408
0000000000310f88 R_X86_64_RELATIVE  *ABS*+0x00000000000eebb0
0000000000310f90 R_X86_64_RELATIVE  *ABS*+0x00000000003124b8
0000000000310fa0 R_X86_64_RELATIVE  *ABS*+0x00000000000eebe0
0000000000310fa8 R_X86_64_RELATIVE  *ABS*+0x0000000000312690
0000000000310fb8 R_X86_64_RELATIVE  *ABS*+0x00000000000eec20
0000000000310fc8 R_X86_64_RELATIVE  *ABS*+0x0000000000310ae8
0000000000310fd0 R_X86_64_RELATIVE  *ABS*+0x0000000000312488
0000000000310fe0 R_X86_64_RELATIVE  *ABS*+0x00000000000eec80
0000000000310ff0 R_X86_64_RELATIVE  *ABS*+0x0000000000310af8
0000000000310ff8 R_X86_64_RELATIVE  *ABS*+0x0000000000312910
0000000000311008 R_X86_64_RELATIVE  *ABS*+0x00000000000eed00
0000000000311018 R_X86_64_RELATIVE  *ABS*+0x0000000000310b08
0000000000311020 R_X86_64_RELATIVE  *ABS*+0x0000000000312488
0000000000311030 R_X86_64_RELATIVE  *ABS*+0x00000000000eed60
0000000000311040 R_X86_64_RELATIVE  *ABS*+0x0000000000310b18
0000000000311048 R_X86_64_RELATIVE  *ABS*+0x0000000000310d40
0000000000311058 R_X86_64_RELATIVE  *ABS*+0x00000000000eedc0
0000000000311068 R_X86_64_RELATIVE  *ABS*+0x0000000000310b28
0000000000311070 R_X86_64_RELATIVE  *ABS*+0x0000000000312488
0000000000311080 R_X86_64_RELATIVE  *ABS*+0x00000000000eee20
0000000000311090 R_X86_64_RELATIVE  *ABS*+0x0000000000310b38
0000000000311098 R_X86_64_RELATIVE  *ABS*+0x0000000000310d40
00000000003110a8 R_X86_64_RELATIVE  *ABS*+0x00000000000eee80
00000000003110b8 R_X86_64_RELATIVE  *ABS*+0x0000000000310b48
00000000003110c0 R_X86_64_RELATIVE  *ABS*+0x0000000000312488
00000000003110d0 R_X86_64_RELATIVE  *ABS*+0x00000000000eeee0
00000000003110e0 R_X86_64_RELATIVE  *ABS*+0x0000000000310b58
00000000003110e8 R_X86_64_RELATIVE  *ABS*+0x0000000000310d00
00000000003110f8 R_X86_64_RELATIVE  *ABS*+0x00000000000eef60
0000000000311108 R_X86_64_RELATIVE  *ABS*+0x0000000000310b68
0000000000311110 R_X86_64_RELATIVE  *ABS*+0x0000000000312488
0000000000311120 R_X86_64_RELATIVE  *ABS*+0x00000000000eefe0
0000000000311130 R_X86_64_RELATIVE  *ABS*+0x0000000000310918
0000000000311138 R_X86_64_RELATIVE  *ABS*+0x0000000000310cd0
0000000000311148 R_X86_64_RELATIVE  *ABS*+0x00000000000ef060
0000000000311158 R_X86_64_RELATIVE  *ABS*+0x0000000000310928
0000000000311160 R_X86_64_RELATIVE  *ABS*+0x0000000000312488
0000000000311170 R_X86_64_RELATIVE  *ABS*+0x00000000000ef0e0
0000000000311180 R_X86_64_RELATIVE  *ABS*+0x0000000000310938
0000000000311188 R_X86_64_RELATIVE  *ABS*+0x0000000000310cd0
0000000000311198 R_X86_64_RELATIVE  *ABS*+0x00000000000ef160
00000000003111a8 R_X86_64_RELATIVE  *ABS*+0x0000000000310948
00000000003111b0 R_X86_64_RELATIVE  *ABS*+0x0000000000312470
00000000003111c0 R_X86_64_RELATIVE  *ABS*+0x00000000000ef1e0
00000000003111d0 R_X86_64_RELATIVE  *ABS*+0x0000000000310958
00000000003111d8 R_X86_64_RELATIVE  *ABS*+0x0000000000312890
00000000003111e8 R_X86_64_RELATIVE  *ABS*+0x00000000000ef2a0
00000000003111f8 R_X86_64_RELATIVE  *ABS*+0x0000000000310968
0000000000311200 R_X86_64_RELATIVE  *ABS*+0x0000000000312470
0000000000311210 R_X86_64_RELATIVE  *ABS*+0x00000000000ef320
0000000000311220 R_X86_64_RELATIVE  *ABS*+0x0000000000310988
0000000000311228 R_X86_64_RELATIVE  *ABS*+0x0000000000310e48
0000000000311238 R_X86_64_RELATIVE  *ABS*+0x00000000000ef3a0
0000000000311248 R_X86_64_RELATIVE  *ABS*+0x0000000000310998
0000000000311250 R_X86_64_RELATIVE  *ABS*+0x0000000000312470
0000000000311260 R_X86_64_RELATIVE  *ABS*+0x00000000000ef420
0000000000311270 R_X86_64_RELATIVE  *ABS*+0x00000000003109a8
0000000000311278 R_X86_64_RELATIVE  *ABS*+0x0000000000310e48
0000000000311288 R_X86_64_RELATIVE  *ABS*+0x00000000000ef4a0
0000000000311298 R_X86_64_RELATIVE  *ABS*+0x00000000003109b8
00000000003112a0 R_X86_64_RELATIVE  *ABS*+0x0000000000312470
00000000003112b0 R_X86_64_RELATIVE  *ABS*+0x00000000000ef540
00000000003112c0 R_X86_64_RELATIVE  *ABS*+0x00000000003109c8
00000000003112c8 R_X86_64_RELATIVE  *ABS*+0x0000000000310df8
00000000003112d8 R_X86_64_RELATIVE  *ABS*+0x00000000000ef5e0
00000000003112e8 R_X86_64_RELATIVE  *ABS*+0x00000000003109d8
00000000003112f0 R_X86_64_RELATIVE  *ABS*+0x0000000000312470
0000000000311300 R_X86_64_RELATIVE  *ABS*+0x00000000000ef680
0000000000311310 R_X86_64_RELATIVE  *ABS*+0x00000000003109e8
0000000000311318 R_X86_64_RELATIVE  *ABS*+0x0000000000310da8
0000000000311328 R_X86_64_RELATIVE  *ABS*+0x00000000000ef720
0000000000311338 R_X86_64_RELATIVE  *ABS*+0x00000000003109f8
0000000000311340 R_X86_64_RELATIVE  *ABS*+0x0000000000312470
0000000000311350 R_X86_64_RELATIVE  *ABS*+0x00000000000ef7c0
0000000000311360 R_X86_64_RELATIVE  *ABS*+0x0000000000310a08
0000000000311368 R_X86_64_RELATIVE  *ABS*+0x0000000000310da8
0000000000311378 R_X86_64_RELATIVE  *ABS*+0x00000000000ef860
0000000000311388 R_X86_64_RELATIVE  *ABS*+0x0000000000310a18
0000000000311390 R_X86_64_RELATIVE  *ABS*+0x00000000003124a0
00000000003113a0 R_X86_64_RELATIVE  *ABS*+0x00000000000ef8a0
00000000003113b0 R_X86_64_RELATIVE  *ABS*+0x0000000000310a28
00000000003113b8 R_X86_64_RELATIVE  *ABS*+0x0000000000310f68
00000000003113c8 R_X86_64_RELATIVE  *ABS*+0x00000000000ef8e0
00000000003113d8 R_X86_64_RELATIVE  *ABS*+0x0000000000310a38
00000000003113e0 R_X86_64_RELATIVE  *ABS*+0x00000000003124a0
00000000003113f0 R_X86_64_RELATIVE  *ABS*+0x00000000000ef920
0000000000311400 R_X86_64_RELATIVE  *ABS*+0x0000000000310a48
0000000000311408 R_X86_64_RELATIVE  *ABS*+0x0000000000310f68
0000000000311418 R_X86_64_RELATIVE  *ABS*+0x00000000000ef960
0000000000311428 R_X86_64_RELATIVE  *ABS*+0x0000000000310a58
0000000000311430 R_X86_64_RELATIVE  *ABS*+0x00000000003124a0
0000000000311440 R_X86_64_RELATIVE  *ABS*+0x00000000000ef9c0
0000000000311450 R_X86_64_RELATIVE  *ABS*+0x0000000000310a68
0000000000311458 R_X86_64_RELATIVE  *ABS*+0x0000000000310f38
0000000000311468 R_X86_64_RELATIVE  *ABS*+0x00000000000efa20
0000000000311478 R_X86_64_RELATIVE  *ABS*+0x0000000000310a78
0000000000311480 R_X86_64_RELATIVE  *ABS*+0x00000000003124a0
0000000000311490 R_X86_64_RELATIVE  *ABS*+0x00000000000efa80
00000000003114a0 R_X86_64_RELATIVE  *ABS*+0x0000000000310a88
00000000003114a8 R_X86_64_RELATIVE  *ABS*+0x0000000000310ef8
00000000003114b8 R_X86_64_RELATIVE  *ABS*+0x00000000000efae0
00000000003114c8 R_X86_64_RELATIVE  *ABS*+0x0000000000310a98
00000000003114d0 R_X86_64_RELATIVE  *ABS*+0x00000000003124a0
00000000003114e0 R_X86_64_RELATIVE  *ABS*+0x00000000000efb40
00000000003114f0 R_X86_64_RELATIVE  *ABS*+0x0000000000310aa8
00000000003114f8 R_X86_64_RELATIVE  *ABS*+0x0000000000310ef8
0000000000311508 R_X86_64_RELATIVE  *ABS*+0x00000000000efba0
0000000000311520 R_X86_64_RELATIVE  *ABS*+0x00000000000efbe0
0000000000311528 R_X86_64_RELATIVE  *ABS*+0x0000000000312500
0000000000311538 R_X86_64_RELATIVE  *ABS*+0x00000000000efc20
0000000000311548 R_X86_64_RELATIVE  *ABS*+0x00000000000efca0
0000000000311558 R_X86_64_RELATIVE  *ABS*+0x00000000000efd40
0000000000311568 R_X86_64_RELATIVE  *ABS*+0x00000000000efdc0
0000000000311578 R_X86_64_RELATIVE  *ABS*+0x00000000000efe40
0000000000311588 R_X86_64_RELATIVE  *ABS*+0x00000000000efec0
0000000000311598 R_X86_64_RELATIVE  *ABS*+0x00000000000eff40
00000000003115a8 R_X86_64_RELATIVE  *ABS*+0x00000000000effc0
00000000003115b8 R_X86_64_RELATIVE  *ABS*+0x00000000000f0060
00000000003115c8 R_X86_64_RELATIVE  *ABS*+0x00000000000f00e0
00000000003115d8 R_X86_64_RELATIVE  *ABS*+0x00000000000f0180
00000000003115e8 R_X86_64_RELATIVE  *ABS*+0x00000000000f0200
00000000003115f8 R_X86_64_RELATIVE  *ABS*+0x00000000000f02a0
0000000000311610 R_X86_64_RELATIVE  *ABS*+0x00000000000f0320
0000000000311618 R_X86_64_RELATIVE  *ABS*+0x0000000000310e70
0000000000311628 R_X86_64_RELATIVE  *ABS*+0x00000000000f0380
0000000000311638 R_X86_64_RELATIVE  *ABS*+0x00000000000f0420
0000000000311648 R_X86_64_RELATIVE  *ABS*+0x00000000000f04e0
0000000000311658 R_X86_64_RELATIVE  *ABS*+0x00000000000f0580
0000000000311668 R_X86_64_RELATIVE  *ABS*+0x00000000000f0620
0000000000311678 R_X86_64_RELATIVE  *ABS*+0x00000000000f06c0
0000000000311688 R_X86_64_RELATIVE  *ABS*+0x00000000000f0760
0000000000311698 R_X86_64_RELATIVE  *ABS*+0x00000000000f0800
00000000003116a8 R_X86_64_RELATIVE  *ABS*+0x00000000000f08c0
00000000003116b8 R_X86_64_RELATIVE  *ABS*+0x00000000000f0980
00000000003116c8 R_X86_64_RELATIVE  *ABS*+0x00000000000f0a40
00000000003116d8 R_X86_64_RELATIVE  *ABS*+0x00000000000f0b00
00000000003116e8 R_X86_64_RELATIVE  *ABS*+0x00000000000f0bc0
00000000003116f0 R_X86_64_RELATIVE  *ABS*+0x00000000003124b8
0000000000311700 R_X86_64_RELATIVE  *ABS*+0x00000000000f0c00
0000000000311710 R_X86_64_RELATIVE  *ABS*+0x00000000000f0c60
0000000000311720 R_X86_64_RELATIVE  *ABS*+0x00000000000f0cc0
0000000000311730 R_X86_64_RELATIVE  *ABS*+0x00000000000f0d20
0000000000311740 R_X86_64_RELATIVE  *ABS*+0x00000000000f0d80
0000000000311750 R_X86_64_RELATIVE  *ABS*+0x00000000000f0de0
0000000000311760 R_X86_64_RELATIVE  *ABS*+0x00000000000f0e60
0000000000311770 R_X86_64_RELATIVE  *ABS*+0x00000000000f0ee0
0000000000311780 R_X86_64_RELATIVE  *ABS*+0x00000000000f0f60
0000000000311790 R_X86_64_RELATIVE  *ABS*+0x00000000000f0fe0
00000000003117a0 R_X86_64_RELATIVE  *ABS*+0x00000000000f1060
00000000003117b0 R_X86_64_RELATIVE  *ABS*+0x0000000000310ab8
00000000003117c0 R_X86_64_RELATIVE  *ABS*+0x00000000000f10c0
00000000003117d0 R_X86_64_RELATIVE  *ABS*+0x0000000000310ac8
00000000003117e0 R_X86_64_RELATIVE  *ABS*+0x00000000000f1180
00000000003117f0 R_X86_64_RELATIVE  *ABS*+0x0000000000310ad8
0000000000311800 R_X86_64_RELATIVE  *ABS*+0x0000000000310cc0
0000000000311808 R_X86_64_RELATIVE  *ABS*+0x0000000000073200
0000000000311810 R_X86_64_RELATIVE  *ABS*+0x0000000000074810
0000000000311820 R_X86_64_RELATIVE  *ABS*+0x0000000000310cd0
0000000000311828 R_X86_64_RELATIVE  *ABS*+0x00000000000aef00
0000000000311830 R_X86_64_RELATIVE  *ABS*+0x00000000000aef40
0000000000311840 R_X86_64_RELATIVE  *ABS*+0x0000000000310ce8
0000000000311848 R_X86_64_RELATIVE  *ABS*+0x0000000000073f30
0000000000311850 R_X86_64_RELATIVE  *ABS*+0x00000000000749a0
0000000000311858 R_X86_64_RELATIVE  *ABS*+0x0000000000072b10
0000000000311860 R_X86_64_RELATIVE  *ABS*+0x000000000007cb70
0000000000311868 R_X86_64_RELATIVE  *ABS*+0x000000000007cbf0
0000000000311870 R_X86_64_RELATIVE  *ABS*+0x00000000000c16f0
0000000000311880 R_X86_64_RELATIVE  *ABS*+0x0000000000310d00
0000000000311888 R_X86_64_RELATIVE  *ABS*+0x00000000000aeff0
0000000000311890 R_X86_64_RELATIVE  *ABS*+0x00000000000af030
0000000000311898 R_X86_64_RELATIVE  *ABS*+0x00000000000c9140
00000000003118a8 R_X86_64_RELATIVE  *ABS*+0x0000000000310d18
00000000003118b0 R_X86_64_RELATIVE  *ABS*+0x00000000000b25b0
00000000003118b8 R_X86_64_RELATIVE  *ABS*+0x00000000000b2540
00000000003118c0 R_X86_64_RELATIVE  *ABS*+0x00000000000c5f40
00000000003118d0 R_X86_64_RELATIVE  *ABS*+0x0000000000310d30
00000000003118d8 R_X86_64_RELATIVE  *ABS*+0x0000000000073480
00000000003118e0 R_X86_64_RELATIVE  *ABS*+0x00000000000748b0
00000000003118f0 R_X86_64_RELATIVE  *ABS*+0x0000000000310d40
00000000003118f8 R_X86_64_RELATIVE  *ABS*+0x0000000000074130
0000000000311900 R_X86_64_RELATIVE  *ABS*+0x000000000007db00
0000000000311910 R_X86_64_RELATIVE  *ABS*+0x0000000000310d58
0000000000311918 R_X86_64_RELATIVE  *ABS*+0x0000000000072a20
0000000000311920 R_X86_64_RELATIVE  *ABS*+0x0000000000074880
0000000000311930 R_X86_64_RELATIVE  *ABS*+0x0000000000310d80
0000000000311938 R_X86_64_RELATIVE  *ABS*+0x0000000000072150
0000000000311940 R_X86_64_RELATIVE  *ABS*+0x0000000000074860
0000000000311948 R_X86_64_RELATIVE  *ABS*+0x0000000000073720
0000000000311950 R_X86_64_RELATIVE  *ABS*+0x000000000007c9b0
0000000000311958 R_X86_64_RELATIVE  *ABS*+0x000000000007ca20
0000000000311960 R_X86_64_RELATIVE  *ABS*+0x0000000000088880
0000000000311968 R_X86_64_RELATIVE  *ABS*+0x0000000000087170
0000000000311970 R_X86_64_RELATIVE  *ABS*+0x0000000000086f60
0000000000311978 R_X86_64_RELATIVE  *ABS*+0x000000000008e7b0
0000000000311980 R_X86_64_RELATIVE  *ABS*+0x00000000000873c0
0000000000311988 R_X86_64_RELATIVE  *ABS*+0x0000000000086c60
0000000000311990 R_X86_64_RELATIVE  *ABS*+0x000000000008a9e0
0000000000311998 R_X86_64_RELATIVE  *ABS*+0x0000000000087b70
00000000003119a8 R_X86_64_RELATIVE  *ABS*+0x0000000000310d98
00000000003119b0 R_X86_64_RELATIVE  *ABS*+0x0000000000073320
00000000003119b8 R_X86_64_RELATIVE  *ABS*+0x00000000000747e0
00000000003119c8 R_X86_64_RELATIVE  *ABS*+0x0000000000310da8
00000000003119d0 R_X86_64_RELATIVE  *ABS*+0x00000000000af9a0
00000000003119d8 R_X86_64_RELATIVE  *ABS*+0x00000000000af9e0
00000000003119e8 R_X86_64_RELATIVE  *ABS*+0x0000000000310dd0
00000000003119f0 R_X86_64_RELATIVE  *ABS*+0x0000000000073f60
00000000003119f8 R_X86_64_RELATIVE  *ABS*+0x00000000000749e0
0000000000311a00 R_X86_64_RELATIVE  *ABS*+0x0000000000072d90
0000000000311a08 R_X86_64_RELATIVE  *ABS*+0x000000000007cd70
0000000000311a10 R_X86_64_RELATIVE  *ABS*+0x000000000007cdf0
0000000000311a18 R_X86_64_RELATIVE  *ABS*+0x00000000000c17a0
0000000000311a28 R_X86_64_RELATIVE  *ABS*+0x0000000000310de8
0000000000311a30 R_X86_64_RELATIVE  *ABS*+0x0000000000073380
0000000000311a38 R_X86_64_RELATIVE  *ABS*+0x0000000000074970
0000000000311a40 R_X86_64_RELATIVE  *ABS*+0x00000000000d2b50
0000000000311a50 R_X86_64_RELATIVE  *ABS*+0x0000000000310df8
0000000000311a58 R_X86_64_RELATIVE  *ABS*+0x00000000000afa90
0000000000311a60 R_X86_64_RELATIVE  *ABS*+0x00000000000afad0
0000000000311a68 R_X86_64_RELATIVE  *ABS*+0x00000000000ca160
0000000000311a78 R_X86_64_RELATIVE  *ABS*+0x0000000000310e10
0000000000311a80 R_X86_64_RELATIVE  *ABS*+0x00000000000b4de0
0000000000311a88 R_X86_64_RELATIVE  *ABS*+0x00000000000b4e30
0000000000311a90 R_X86_64_RELATIVE  *ABS*+0x00000000000bc710
0000000000311aa0 R_X86_64_RELATIVE  *ABS*+0x0000000000310e20
0000000000311aa8 R_X86_64_RELATIVE  *ABS*+0x00000000000b4ef0
0000000000311ab0 R_X86_64_RELATIVE  *ABS*+0x00000000000b4e80
0000000000311ab8 R_X86_64_RELATIVE  *ABS*+0x00000000000c5800
0000000000311ac8 R_X86_64_RELATIVE  *ABS*+0x0000000000310e38
0000000000311ad0 R_X86_64_RELATIVE  *ABS*+0x0000000000073530
0000000000311ad8 R_X86_64_RELATIVE  *ABS*+0x00000000000748e0
0000000000311ae8 R_X86_64_RELATIVE  *ABS*+0x0000000000310e48
0000000000311af0 R_X86_64_RELATIVE  *ABS*+0x00000000000741b0
0000000000311af8 R_X86_64_RELATIVE  *ABS*+0x000000000007dc20
0000000000311b08 R_X86_64_RELATIVE  *ABS*+0x0000000000310e60
0000000000311b10 R_X86_64_RELATIVE  *ABS*+0x0000000000072a70
0000000000311b18 R_X86_64_RELATIVE  *ABS*+0x0000000000074910
0000000000311b28 R_X86_64_RELATIVE  *ABS*+0x0000000000310e80
0000000000311b30 R_X86_64_RELATIVE  *ABS*+0x0000000000089920
0000000000311b38 R_X86_64_RELATIVE  *ABS*+0x0000000000089940
0000000000311b40 R_X86_64_RELATIVE  *ABS*+0x0000000000072d80
0000000000311b48 R_X86_64_RELATIVE  *ABS*+0x000000000007c8d0
0000000000311b50 R_X86_64_RELATIVE  *ABS*+0x000000000007c940
0000000000311b58 R_X86_64_RELATIVE  *ABS*+0x00000000000936e0
0000000000311b60 R_X86_64_RELATIVE  *ABS*+0x00000000000bc310
0000000000311b68 R_X86_64_RELATIVE  *ABS*+0x00000000000cec40
0000000000311b70 R_X86_64_RELATIVE  *ABS*+0x0000000000093810
0000000000311b78 R_X86_64_RELATIVE  *ABS*+0x0000000000094040
0000000000311b80 R_X86_64_RELATIVE  *ABS*+0x0000000000093920
0000000000311b88 R_X86_64_RELATIVE  *ABS*+0x0000000000089980
0000000000311b90 R_X86_64_RELATIVE  *ABS*+0x00000000000736b0
0000000000311b98 R_X86_64_RELATIVE  *ABS*+0x00000000000cd980
0000000000311ba8 R_X86_64_RELATIVE  *ABS*+0x0000000000310eb0
0000000000311bb0 R_X86_64_RELATIVE  *ABS*+0x00000000000721f0
0000000000311bb8 R_X86_64_RELATIVE  *ABS*+0x0000000000074870
0000000000311bc0 R_X86_64_RELATIVE  *ABS*+0x00000000000736a0
0000000000311bc8 R_X86_64_RELATIVE  *ABS*+0x000000000007c7f0
0000000000311bd0 R_X86_64_RELATIVE  *ABS*+0x000000000007c860
0000000000311bd8 R_X86_64_RELATIVE  *ABS*+0x00000000000936e0
0000000000311be0 R_X86_64_RELATIVE  *ABS*+0x0000000000093f50
0000000000311be8 R_X86_64_RELATIVE  *ABS*+0x0000000000084350
0000000000311bf0 R_X86_64_RELATIVE  *ABS*+0x0000000000089b10
0000000000311bf8 R_X86_64_RELATIVE  *ABS*+0x00000000000cf5d0
0000000000311c00 R_X86_64_RELATIVE  *ABS*+0x00000000000917a0
0000000000311c08 R_X86_64_RELATIVE  *ABS*+0x0000000000089980
0000000000311c10 R_X86_64_RELATIVE  *ABS*+0x0000000000091c40
0000000000311c20 R_X86_64_RELATIVE  *ABS*+0x0000000000310ec8
0000000000311c28 R_X86_64_RELATIVE  *ABS*+0x00000000000ae870
0000000000311c30 R_X86_64_RELATIVE  *ABS*+0x00000000000ae8b0
0000000000311c38 R_X86_64_RELATIVE  *ABS*+0x00000000000bddb0
0000000000311c40 R_X86_64_RELATIVE  *ABS*+0x00000000000d0bf0
0000000000311c48 R_X86_64_RELATIVE  *ABS*+0x00000000000d0b00
0000000000311c50 R_X86_64_RELATIVE  *ABS*+0x00000000000c2390
0000000000311c60 R_X86_64_RELATIVE  *ABS*+0x0000000000310ee0
0000000000311c68 R_X86_64_RELATIVE  *ABS*+0x000000000007da10
0000000000311c70 R_X86_64_RELATIVE  *ABS*+0x000000000007da60
0000000000311c78 R_X86_64_RELATIVE  *ABS*+0x00000000000bdf10
0000000000311c80 R_X86_64_RELATIVE  *ABS*+0x00000000000d0ba0
0000000000311c88 R_X86_64_RELATIVE  *ABS*+0x00000000000d0ab0
0000000000311c90 R_X86_64_RELATIVE  *ABS*+0x00000000000c29d0
0000000000311ca0 R_X86_64_RELATIVE  *ABS*+0x0000000000310ef8
0000000000311ca8 R_X86_64_RELATIVE  *ABS*+0x00000000000b0a20
0000000000311cb0 R_X86_64_RELATIVE  *ABS*+0x00000000000b0a60
0000000000311cc0 R_X86_64_RELATIVE  *ABS*+0x0000000000310f20
0000000000311cc8 R_X86_64_RELATIVE  *ABS*+0x0000000000073f90
0000000000311cd0 R_X86_64_RELATIVE  *ABS*+0x0000000000074a20
0000000000311cd8 R_X86_64_RELATIVE  *ABS*+0x0000000000073000
0000000000311ce0 R_X86_64_RELATIVE  *ABS*+0x000000000007cc70
0000000000311ce8 R_X86_64_RELATIVE  *ABS*+0x000000000007ccf0
0000000000311cf0 R_X86_64_RELATIVE  *ABS*+0x00000000000c1640
0000000000311d00 R_X86_64_RELATIVE  *ABS*+0x0000000000310f38
0000000000311d08 R_X86_64_RELATIVE  *ABS*+0x00000000000b0b10
0000000000311d10 R_X86_64_RELATIVE  *ABS*+0x00000000000b0b50
0000000000311d18 R_X86_64_RELATIVE  *ABS*+0x00000000000cbce0
0000000000311d28 R_X86_64_RELATIVE  *ABS*+0x0000000000310f50
0000000000311d30 R_X86_64_RELATIVE  *ABS*+0x00000000000b0c10
0000000000311d38 R_X86_64_RELATIVE  *ABS*+0x00000000000b0c80
0000000000311d40 R_X86_64_RELATIVE  *ABS*+0x00000000000c50c0
0000000000311d50 R_X86_64_RELATIVE  *ABS*+0x0000000000310f68
0000000000311d58 R_X86_64_RELATIVE  *ABS*+0x0000000000074060
0000000000311d60 R_X86_64_RELATIVE  *ABS*+0x000000000007db90
0000000000311d70 R_X86_64_RELATIVE  *ABS*+0x0000000000310f80
0000000000311d78 R_X86_64_RELATIVE  *ABS*+0x0000000000072440
0000000000311d80 R_X86_64_RELATIVE  *ABS*+0x00000000000746f0
0000000000311d88 R_X86_64_RELATIVE  *ABS*+0x0000000000073690
0000000000311d90 R_X86_64_RELATIVE  *ABS*+0x000000000007c710
0000000000311d98 R_X86_64_RELATIVE  *ABS*+0x000000000007c780
0000000000311da0 R_X86_64_RELATIVE  *ABS*+0x0000000000079c50
0000000000311da8 R_X86_64_RELATIVE  *ABS*+0x0000000000079ce0
0000000000311db0 R_X86_64_RELATIVE  *ABS*+0x00000000000725a0
0000000000311db8 R_X86_64_RELATIVE  *ABS*+0x00000000000841b0
0000000000311dc0 R_X86_64_RELATIVE  *ABS*+0x0000000000079b80
0000000000311dc8 R_X86_64_RELATIVE  *ABS*+0x00000000000725f0
0000000000311dd0 R_X86_64_RELATIVE  *ABS*+0x000000000007dac0
0000000000311dd8 R_X86_64_RELATIVE  *ABS*+0x0000000000072660
0000000000311de8 R_X86_64_RELATIVE  *ABS*+0x0000000000311518
0000000000311df0 R_X86_64_RELATIVE  *ABS*+0x0000000000073fc0
0000000000311df8 R_X86_64_RELATIVE  *ABS*+0x000000000007cf90
0000000000311e00 R_X86_64_RELATIVE  *ABS*+0x0000000000073670
0000000000311e08 R_X86_64_RELATIVE  *ABS*+0x00000000000cfcf0
0000000000311e10 R_X86_64_RELATIVE  *ABS*+0x00000000000cfd10
0000000000311e18 R_X86_64_RELATIVE  *ABS*+0x0000000000088880
0000000000311e20 R_X86_64_RELATIVE  *ABS*+0x0000000000087170
0000000000311e28 R_X86_64_RELATIVE  *ABS*+0x0000000000086f60
0000000000311e30 R_X86_64_RELATIVE  *ABS*+0x000000000008e7b0
0000000000311e38 R_X86_64_RELATIVE  *ABS*+0x00000000000873c0
0000000000311e40 R_X86_64_RELATIVE  *ABS*+0x0000000000086c60
0000000000311e48 R_X86_64_RELATIVE  *ABS*+0x000000000008a9e0
0000000000311e50 R_X86_64_RELATIVE  *ABS*+0x0000000000087b70
0000000000311e60 R_X86_64_RELATIVE  *ABS*+0x0000000000311608
0000000000311e68 R_X86_64_RELATIVE  *ABS*+0x0000000000074010
0000000000311e70 R_X86_64_RELATIVE  *ABS*+0x000000000007cf40
0000000000311e78 R_X86_64_RELATIVE  *ABS*+0x0000000000073650
0000000000311e80 R_X86_64_RELATIVE  *ABS*+0x00000000000cf3b0
0000000000311e88 R_X86_64_RELATIVE  *ABS*+0x00000000000cf3d0
0000000000311e90 R_X86_64_RELATIVE  *ABS*+0x00000000000936e0
0000000000311e98 R_X86_64_RELATIVE  *ABS*+0x0000000000093f50
0000000000311ea0 R_X86_64_RELATIVE  *ABS*+0x0000000000084350
0000000000311ea8 R_X86_64_RELATIVE  *ABS*+0x0000000000089b10
0000000000311eb0 R_X86_64_RELATIVE  *ABS*+0x00000000000cf5d0
0000000000311eb8 R_X86_64_RELATIVE  *ABS*+0x00000000000917a0
0000000000311ec0 R_X86_64_RELATIVE  *ABS*+0x0000000000089980
0000000000311ec8 R_X86_64_RELATIVE  *ABS*+0x0000000000091c40
0000000000311ed8 R_X86_64_RELATIVE  *ABS*+0x00000000003116e0
0000000000311ee0 R_X86_64_RELATIVE  *ABS*+0x00000000000740e0
0000000000311ee8 R_X86_64_RELATIVE  *ABS*+0x000000000007cef0
0000000000311ef0 R_X86_64_RELATIVE  *ABS*+0x0000000000073630
0000000000311ef8 R_X86_64_RELATIVE  *ABS*+0x00000000000cf050
0000000000311f00 R_X86_64_RELATIVE  *ABS*+0x00000000000cf070
0000000000311f08 R_X86_64_RELATIVE  *ABS*+0x0000000000079c50
0000000000311f10 R_X86_64_RELATIVE  *ABS*+0x0000000000079ce0
0000000000311f18 R_X86_64_RELATIVE  *ABS*+0x00000000000725a0
0000000000311f20 R_X86_64_RELATIVE  *ABS*+0x00000000000841b0
0000000000311f28 R_X86_64_RELATIVE  *ABS*+0x0000000000079b80
0000000000311f30 R_X86_64_RELATIVE  *ABS*+0x00000000000725f0
0000000000311f38 R_X86_64_RELATIVE  *ABS*+0x000000000007dac0
0000000000311f40 R_X86_64_RELATIVE  *ABS*+0x0000000000072660
0000000000311f50 R_X86_64_RELATIVE  *ABS*+0x00000000000f11c0
0000000000311f58 R_X86_64_RELATIVE  *ABS*+0x0000000000310b88
0000000000311f68 R_X86_64_RELATIVE  *ABS*+0x00000000000f1200
0000000000311f80 R_X86_64_RELATIVE  *ABS*+0x00000000000f1220
0000000000311f98 R_X86_64_RELATIVE  *ABS*+0x00000000000f1240
0000000000311fb0 R_X86_64_RELATIVE  *ABS*+0x00000000000f1260
0000000000311fb8 R_X86_64_RELATIVE  *ABS*+0x0000000000311f90
0000000000311fc8 R_X86_64_RELATIVE  *ABS*+0x00000000000f1280
0000000000311fd8 R_X86_64_RELATIVE  *ABS*+0x00000000000f12a0
0000000000311fe8 R_X86_64_RELATIVE  *ABS*+0x00000000000f12c0
0000000000311ff8 R_X86_64_RELATIVE  *ABS*+0x0000000000310bc8
0000000000312008 R_X86_64_RELATIVE  *ABS*+0x0000000000311fd0
0000000000312020 R_X86_64_RELATIVE  *ABS*+0x00000000000f1300
0000000000312028 R_X86_64_RELATIVE  *ABS*+0x0000000000311fc0
0000000000312038 R_X86_64_RELATIVE  *ABS*+0x00000000000f1330
0000000000312048 R_X86_64_RELATIVE  *ABS*+0x00000000000f1350
0000000000312058 R_X86_64_RELATIVE  *ABS*+0x00000000000f1370
0000000000312060 R_X86_64_RELATIVE  *ABS*+0x0000000000312040
0000000000312070 R_X86_64_RELATIVE  *ABS*+0x00000000000f13a0
0000000000312080 R_X86_64_RELATIVE  *ABS*+0x00000000000f13e0
0000000000312088 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312098 R_X86_64_RELATIVE  *ABS*+0x00000000000f1420
00000000003120a0 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
00000000003120b0 R_X86_64_RELATIVE  *ABS*+0x00000000000f1460
00000000003120b8 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
00000000003120c8 R_X86_64_RELATIVE  *ABS*+0x00000000000f1490
00000000003120d0 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
00000000003120e0 R_X86_64_RELATIVE  *ABS*+0x00000000000f14b0
00000000003120e8 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
00000000003120f8 R_X86_64_RELATIVE  *ABS*+0x00000000000f14d0
0000000000312100 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312110 R_X86_64_RELATIVE  *ABS*+0x00000000000f14f0
0000000000312118 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312128 R_X86_64_RELATIVE  *ABS*+0x00000000000f1510
0000000000312130 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312140 R_X86_64_RELATIVE  *ABS*+0x00000000000f1530
0000000000312148 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312158 R_X86_64_RELATIVE  *ABS*+0x00000000000f1550
0000000000312160 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312170 R_X86_64_RELATIVE  *ABS*+0x00000000000f1570
0000000000312178 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312188 R_X86_64_RELATIVE  *ABS*+0x00000000000f1590
0000000000312190 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
00000000003121a0 R_X86_64_RELATIVE  *ABS*+0x00000000000f15b0
00000000003121a8 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
00000000003121b8 R_X86_64_RELATIVE  *ABS*+0x00000000000f15d0
00000000003121c0 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
00000000003121d0 R_X86_64_RELATIVE  *ABS*+0x00000000000f15f0
00000000003121d8 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
00000000003121e8 R_X86_64_RELATIVE  *ABS*+0x00000000000f1610
00000000003121f0 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312200 R_X86_64_RELATIVE  *ABS*+0x00000000000f1630
0000000000312208 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312218 R_X86_64_RELATIVE  *ABS*+0x00000000000f1650
0000000000312220 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312230 R_X86_64_RELATIVE  *ABS*+0x00000000000f1670
0000000000312238 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312248 R_X86_64_RELATIVE  *ABS*+0x00000000000f1690
0000000000312250 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312260 R_X86_64_RELATIVE  *ABS*+0x00000000000f16b0
0000000000312268 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312278 R_X86_64_RELATIVE  *ABS*+0x00000000000f16d0
0000000000312280 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312290 R_X86_64_RELATIVE  *ABS*+0x00000000000f16f0
0000000000312298 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
00000000003122a8 R_X86_64_RELATIVE  *ABS*+0x00000000000f1710
00000000003122b0 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
00000000003122c0 R_X86_64_RELATIVE  *ABS*+0x00000000000f1730
00000000003122c8 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
00000000003122d8 R_X86_64_RELATIVE  *ABS*+0x00000000000f1750
00000000003122e0 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
00000000003122f0 R_X86_64_RELATIVE  *ABS*+0x00000000000f1770
00000000003122f8 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312308 R_X86_64_RELATIVE  *ABS*+0x00000000000f17a0
0000000000312310 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312320 R_X86_64_RELATIVE  *ABS*+0x00000000000f17d0
0000000000312328 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312338 R_X86_64_RELATIVE  *ABS*+0x00000000000f17f0
0000000000312340 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312350 R_X86_64_RELATIVE  *ABS*+0x00000000000f1820
0000000000312358 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312368 R_X86_64_RELATIVE  *ABS*+0x00000000000f1840
0000000000312370 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312380 R_X86_64_RELATIVE  *ABS*+0x00000000000f1880
0000000000312388 R_X86_64_RELATIVE  *ABS*+0x0000000000312068
0000000000312398 R_X86_64_RELATIVE  *ABS*+0x00000000000f18b0
00000000003123a8 R_X86_64_RELATIVE  *ABS*+0x00000000000f18e0
00000000003123b0 R_X86_64_RELATIVE  *ABS*+0x0000000000312030
00000000003123c0 R_X86_64_RELATIVE  *ABS*+0x00000000000f1920
00000000003123c8 R_X86_64_RELATIVE  *ABS*+0x00000000003123a0
00000000003123d8 R_X86_64_RELATIVE  *ABS*+0x00000000000f1950
00000000003123e0 R_X86_64_RELATIVE  *ABS*+0x0000000000312390
00000000003123f0 R_X86_64_RELATIVE  *ABS*+0x00000000000f1980
0000000000312400 R_X86_64_RELATIVE  *ABS*+0x00000000000edc60
0000000000312410 R_X86_64_RELATIVE  *ABS*+0x00000000000f19c0
0000000000312420 R_X86_64_RELATIVE  *ABS*+0x00000000000f19e0
0000000000312438 R_X86_64_RELATIVE  *ABS*+0x00000000000f1a00
0000000000312450 R_X86_64_RELATIVE  *ABS*+0x00000000000f1a20
0000000000312460 R_X86_64_RELATIVE  *ABS*+0x00000000000f1a40
0000000000312468 R_X86_64_RELATIVE  *ABS*+0x0000000000312448
0000000000312478 R_X86_64_RELATIVE  *ABS*+0x00000000000f1a80
0000000000312490 R_X86_64_RELATIVE  *ABS*+0x00000000000f1ae0
00000000003124a8 R_X86_64_RELATIVE  *ABS*+0x00000000000f1b20
00000000003124c0 R_X86_64_RELATIVE  *ABS*+0x00000000000f1b40
00000000003124d0 R_X86_64_RELATIVE  *ABS*+0x00000000000f1b60
00000000003124d8 R_X86_64_RELATIVE  *ABS*+0x00000000003124b8
00000000003124e8 R_X86_64_RELATIVE  *ABS*+0x00000000000edde0
00000000003124f8 R_X86_64_RELATIVE  *ABS*+0x00000000000ede20
0000000000312508 R_X86_64_RELATIVE  *ABS*+0x00000000000f1ba0
0000000000312518 R_X86_64_RELATIVE  *ABS*+0x00000000000f1be0
0000000000312520 R_X86_64_RELATIVE  *ABS*+0x0000000000312500
0000000000312530 R_X86_64_RELATIVE  *ABS*+0x00000000000edf00
0000000000312540 R_X86_64_RELATIVE  *ABS*+0x00000000000f1c20
0000000000312550 R_X86_64_RELATIVE  *ABS*+0x00000000000f1c40
0000000000312560 R_X86_64_RELATIVE  *ABS*+0x00000000000f1c80
0000000000312568 R_X86_64_RELATIVE  *ABS*+0x0000000000312418
0000000000312578 R_X86_64_RELATIVE  *ABS*+0x00000000000f1cb0
0000000000312588 R_X86_64_RELATIVE  *ABS*+0x00000000003124a0
0000000000312598 R_X86_64_RELATIVE  *ABS*+0x00000000003123e8
00000000003125b0 R_X86_64_RELATIVE  *ABS*+0x00000000000f1ce0
00000000003125c0 R_X86_64_RELATIVE  *ABS*+0x00000000000f1d20
00000000003125d8 R_X86_64_RELATIVE  *ABS*+0x00000000000f1d60
00000000003125e8 R_X86_64_RELATIVE  *ABS*+0x00000000000f1da0
00000000003125f0 R_X86_64_RELATIVE  *ABS*+0x00000000003125d0
0000000000312600 R_X86_64_RELATIVE  *ABS*+0x00000000000f1dd0
0000000000312610 R_X86_64_RELATIVE  *ABS*+0x00000000000f1e00
0000000000312618 R_X86_64_RELATIVE  *ABS*+0x00000000003125f8
0000000000312628 R_X86_64_RELATIVE  *ABS*+0x00000000000f1e40
0000000000312640 R_X86_64_RELATIVE  *ABS*+0x00000000000f1e80
0000000000312658 R_X86_64_RELATIVE  *ABS*+0x00000000000f1ec0
0000000000312668 R_X86_64_RELATIVE  *ABS*+0x00000000000f1f00
0000000000312678 R_X86_64_RELATIVE  *ABS*+0x00000000000f1f40
0000000000312688 R_X86_64_RELATIVE  *ABS*+0x00000000000f1fa0
0000000000312698 R_X86_64_RELATIVE  *ABS*+0x00000000000f2000
00000000003126a8 R_X86_64_RELATIVE  *ABS*+0x00000000000f2040
00000000003126b0 R_X86_64_RELATIVE  *ABS*+0x0000000000312448
00000000003126c0 R_X86_64_RELATIVE  *ABS*+0x00000000000f2080
00000000003126d8 R_X86_64_RELATIVE  *ABS*+0x00000000000f20d0
00000000003126e8 R_X86_64_RELATIVE  *ABS*+0x00000000000f2100
00000000003126f8 R_X86_64_RELATIVE  *ABS*+0x0000000000310c20
0000000000312700 R_X86_64_RELATIVE  *ABS*+0x00000000003124a0
0000000000312710 R_X86_64_RELATIVE  *ABS*+0x00000000000f2140
0000000000312720 R_X86_64_RELATIVE  *ABS*+0x0000000000310c30
0000000000312728 R_X86_64_RELATIVE  *ABS*+0x0000000000312558
0000000000312738 R_X86_64_RELATIVE  *ABS*+0x00000000000f21c0
0000000000312740 R_X86_64_RELATIVE  *ABS*+0x0000000000311f48
0000000000312750 R_X86_64_RELATIVE  *ABS*+0x00000000000f2220
0000000000312758 R_X86_64_RELATIVE  *ABS*+0x0000000000312538
0000000000312768 R_X86_64_RELATIVE  *ABS*+0x00000000000f2260
0000000000312770 R_X86_64_RELATIVE  *ABS*+0x0000000000312690
0000000000312780 R_X86_64_RELATIVE  *ABS*+0x00000000000f22c0
0000000000312788 R_X86_64_RELATIVE  *ABS*+0x0000000000312680
0000000000312798 R_X86_64_RELATIVE  *ABS*+0x00000000000f2320
00000000003127a0 R_X86_64_RELATIVE  *ABS*+0x0000000000312670
00000000003127b0 R_X86_64_RELATIVE  *ABS*+0x00000000000f2380
00000000003127c0 R_X86_64_RELATIVE  *ABS*+0x00000000000f23e0
00000000003127d0 R_X86_64_RELATIVE  *ABS*+0x00000000000f2460
00000000003127e0 R_X86_64_RELATIVE  *ABS*+0x00000000000f2520
00000000003127e8 R_X86_64_RELATIVE  *ABS*+0x0000000000311f48
00000000003127f8 R_X86_64_RELATIVE  *ABS*+0x00000000000f25a0
0000000000312808 R_X86_64_RELATIVE  *ABS*+0x00000000000f2640
0000000000312818 R_X86_64_RELATIVE  *ABS*+0x0000000000310c60
0000000000312820 R_X86_64_RELATIVE  *ABS*+0x00000000003124a0
0000000000312830 R_X86_64_RELATIVE  *ABS*+0x00000000000f26c0
0000000000312840 R_X86_64_RELATIVE  *ABS*+0x0000000000310c70
0000000000312848 R_X86_64_RELATIVE  *ABS*+0x00000000003124a0
0000000000312858 R_X86_64_RELATIVE  *ABS*+0x00000000000f2740
0000000000312868 R_X86_64_RELATIVE  *ABS*+0x0000000000310c80
0000000000312870 R_X86_64_RELATIVE  *ABS*+0x00000000003124a0
0000000000312880 R_X86_64_RELATIVE  *ABS*+0x00000000000f27c0
0000000000312898 R_X86_64_RELATIVE  *ABS*+0x00000000000f2820
00000000003128a0 R_X86_64_RELATIVE  *ABS*+0x0000000000312878
00000000003128b0 R_X86_64_RELATIVE  *ABS*+0x00000000000f28a0
00000000003128c0 R_X86_64_RELATIVE  *ABS*+0x0000000000312470
00000000003128d0 R_X86_64_RELATIVE  *ABS*+0x00000000003123e8
00000000003128e8 R_X86_64_RELATIVE  *ABS*+0x00000000000f2900
00000000003128f0 R_X86_64_RELATIVE  *ABS*+0x0000000000310b78
0000000000312900 R_X86_64_RELATIVE  *ABS*+0x00000000000f2940
0000000000312918 R_X86_64_RELATIVE  *ABS*+0x00000000000f2980
0000000000312920 R_X86_64_RELATIVE  *ABS*+0x00000000003128f8
0000000000312930 R_X86_64_RELATIVE  *ABS*+0x00000000000f29c0
0000000000312940 R_X86_64_RELATIVE  *ABS*+0x0000000000312488
0000000000312950 R_X86_64_RELATIVE  *ABS*+0x00000000003123e8
0000000000312968 R_X86_64_RELATIVE  *ABS*+0x00000000000f2a00
0000000000312978 R_X86_64_RELATIVE  *ABS*+0x00000000000f2a20
0000000000312988 R_X86_64_RELATIVE  *ABS*+0x00000000000f2ac0
0000000000312998 R_X86_64_RELATIVE  *ABS*+0x00000000000f2b60
00000000003129a8 R_X86_64_RELATIVE  *ABS*+0x00000000000f2c00
00000000003129b8 R_X86_64_RELATIVE  *ABS*+0x00000000000f2ce0
00000000003129c8 R_X86_64_RELATIVE  *ABS*+0x00000000000f2d80
00000000003129d8 R_X86_64_RELATIVE  *ABS*+0x00000000000f2e60
00000000003129e8 R_X86_64_RELATIVE  *ABS*+0x00000000000f2f40
00000000003129f8 R_X86_64_RELATIVE  *ABS*+0x00000000000f2fe0
0000000000312a08 R_X86_64_RELATIVE  *ABS*+0x00000000000f30c0
0000000000312a18 R_X86_64_RELATIVE  *ABS*+0x0000000000310c50
0000000000312a20 R_X86_64_RELATIVE  *ABS*+0x00000000003124a0
0000000000312a30 R_X86_64_RELATIVE  *ABS*+0x00000000000f3100
0000000000312a40 R_X86_64_RELATIVE  *ABS*+0x0000000000310c90
0000000000312a48 R_X86_64_RELATIVE  *ABS*+0x0000000000312558
0000000000312a58 R_X86_64_RELATIVE  *ABS*+0x00000000000f3180
0000000000312a68 R_X86_64_RELATIVE  *ABS*+0x00000000000f3260
0000000000312a78 R_X86_64_RELATIVE  *ABS*+0x00000000000f3320
0000000000312a88 R_X86_64_RELATIVE  *ABS*+0x00000000000f3400
0000000000312a98 R_X86_64_RELATIVE  *ABS*+0x00000000000f3500
0000000000312aa8 R_X86_64_RELATIVE  *ABS*+0x00000000000f35c0
0000000000312ab8 R_X86_64_RELATIVE  *ABS*+0x00000000000f36c0
0000000000312ac8 R_X86_64_RELATIVE  *ABS*+0x00000000000f3720
0000000000312ad8 R_X86_64_RELATIVE  *ABS*+0x00000000000f37c0
0000000000312ae8 R_X86_64_RELATIVE  *ABS*+0x00000000000f3820
0000000000312af8 R_X86_64_RELATIVE  *ABS*+0x00000000000f38a0
0000000000312b08 R_X86_64_RELATIVE  *ABS*+0x00000000000f3920
0000000000312b18 R_X86_64_RELATIVE  *ABS*+0x00000000000f39c0
0000000000312b28 R_X86_64_RELATIVE  *ABS*+0x00000000000f3a00
0000000000312b38 R_X86_64_RELATIVE  *ABS*+0x00000000000f3a60
0000000000312b48 R_X86_64_RELATIVE  *ABS*+0x00000000000f3ac0
0000000000312b58 R_X86_64_RELATIVE  *ABS*+0x00000000000f3b20
0000000000312b70 R_X86_64_RELATIVE  *ABS*+0x00000000000f3ba0
0000000000312b78 R_X86_64_RELATIVE  *ABS*+0x0000000000312ad0
0000000000312b88 R_X86_64_RELATIVE  *ABS*+0x00000000000f3c20
0000000000312b90 R_X86_64_RELATIVE  *ABS*+0x0000000000312ae0
0000000000312ba0 R_X86_64_RELATIVE  *ABS*+0x00000000000f3ca0
0000000000312ba8 R_X86_64_RELATIVE  *ABS*+0x0000000000312af0
0000000000312bb8 R_X86_64_RELATIVE  *ABS*+0x00000000000f3d40
0000000000312bc0 R_X86_64_RELATIVE  *ABS*+0x0000000000312b00
0000000000312bd0 R_X86_64_RELATIVE  *ABS*+0x00000000000f3de0
0000000000312be8 R_X86_64_RELATIVE  *ABS*+0x00000000000f3e40
0000000000312bf0 R_X86_64_RELATIVE  *ABS*+0x0000000000312b10
0000000000312c00 R_X86_64_RELATIVE  *ABS*+0x00000000000f3e80
0000000000312c08 R_X86_64_RELATIVE  *ABS*+0x0000000000312b20
0000000000312c18 R_X86_64_RELATIVE  *ABS*+0x00000000000f3ee0
0000000000312c20 R_X86_64_RELATIVE  *ABS*+0x0000000000312b30
0000000000312c30 R_X86_64_RELATIVE  *ABS*+0x00000000000f3f40
0000000000312c38 R_X86_64_RELATIVE  *ABS*+0x0000000000312b40
0000000000312c48 R_X86_64_RELATIVE  *ABS*+0x00000000000f3fc0
0000000000312c58 R_X86_64_RELATIVE  *ABS*+0x00000000000f40a0
0000000000312c68 R_X86_64_RELATIVE  *ABS*+0x0000000000310be0
0000000000312c70 R_X86_64_RELATIVE  *ABS*+0x0000000000312470
0000000000312c80 R_X86_64_RELATIVE  *ABS*+0x00000000000f4160
0000000000312c90 R_X86_64_RELATIVE  *ABS*+0x0000000000310bf0
0000000000312c98 R_X86_64_RELATIVE  *ABS*+0x0000000000312470
0000000000312ca8 R_X86_64_RELATIVE  *ABS*+0x00000000000f4220
0000000000312cb8 R_X86_64_RELATIVE  *ABS*+0x0000000000310c00
0000000000312cc0 R_X86_64_RELATIVE  *ABS*+0x0000000000312470
0000000000312cd0 R_X86_64_RELATIVE  *ABS*+0x00000000000f42e0
0000000000312ce0 R_X86_64_RELATIVE  *ABS*+0x00000000000f43a0
0000000000312cf0 R_X86_64_RELATIVE  *ABS*+0x0000000000310c40
0000000000312cf8 R_X86_64_RELATIVE  *ABS*+0x0000000000312488
0000000000312d08 R_X86_64_RELATIVE  *ABS*+0x00000000000f4440
0000000000312d18 R_X86_64_RELATIVE  *ABS*+0x0000000000310ca0
0000000000312d20 R_X86_64_RELATIVE  *ABS*+0x0000000000312488
0000000000312d30 R_X86_64_RELATIVE  *ABS*+0x00000000000f44e0
0000000000312d40 R_X86_64_RELATIVE  *ABS*+0x0000000000310cb0
0000000000312d48 R_X86_64_RELATIVE  *ABS*+0x0000000000312488
0000000000312d58 R_X86_64_RELATIVE  *ABS*+0x00000000000f4580
0000000000312d68 R_X86_64_RELATIVE  *ABS*+0x00000000000f4660
0000000000312d78 R_X86_64_RELATIVE  *ABS*+0x00000000000f4740
0000000000312d88 R_X86_64_RELATIVE  *ABS*+0x00000000000f4820
0000000000312d98 R_X86_64_RELATIVE  *ABS*+0x00000000000f48e0
0000000000312da8 R_X86_64_RELATIVE  *ABS*+0x00000000000f49a0
0000000000312db8 R_X86_64_RELATIVE  *ABS*+0x00000000000f4a60
0000000000312dc8 R_X86_64_RELATIVE  *ABS*+0x0000000000310bb8
0000000000312dd0 R_X86_64_RELATIVE  *ABS*+0x0000000000312470
0000000000312de0 R_X86_64_RELATIVE  *ABS*+0x00000000000f4ae0
0000000000312df0 R_X86_64_RELATIVE  *ABS*+0x0000000000310c10
0000000000312df8 R_X86_64_RELATIVE  *ABS*+0x0000000000312890
0000000000312e08 R_X86_64_RELATIVE  *ABS*+0x00000000000f4ba0
0000000000312e18 R_X86_64_RELATIVE  *ABS*+0x0000000000310b98
0000000000312e20 R_X86_64_RELATIVE  *ABS*+0x0000000000312488
0000000000312e30 R_X86_64_RELATIVE  *ABS*+0x00000000000f4c00
0000000000312e40 R_X86_64_RELATIVE  *ABS*+0x0000000000310ba8
0000000000312e48 R_X86_64_RELATIVE  *ABS*+0x0000000000312910
0000000000312e58 R_X86_64_RELATIVE  *ABS*+0x00000000000f4ca0
0000000000312e68 R_X86_64_RELATIVE  *ABS*+0x00000000000f4d40
0000000000312e78 R_X86_64_RELATIVE  *ABS*+0x00000000000f4e20
0000000000312e88 R_X86_64_RELATIVE  *ABS*+0x00000000000f4ea0
0000000000312e98 R_X86_64_RELATIVE  *ABS*+0x0000000000311f60
0000000000312ea0 R_X86_64_RELATIVE  *ABS*+0x000000000007a490
0000000000312ea8 R_X86_64_RELATIVE  *ABS*+0x000000000007a4b0
0000000000312ec0 R_X86_64_RELATIVE  *ABS*+0x0000000000311fe0
0000000000312ec8 R_X86_64_RELATIVE  *ABS*+0x0000000000074310
0000000000312ed0 R_X86_64_RELATIVE  *ABS*+0x00000000000738c0
0000000000312ed8 R_X86_64_RELATIVE  *ABS*+0x0000000000074620
0000000000312ee8 R_X86_64_RELATIVE  *ABS*+0x0000000000312018
0000000000312ef0 R_X86_64_RELATIVE  *ABS*+0x0000000000073900
0000000000312ef8 R_X86_64_RELATIVE  *ABS*+0x00000000000745d0
0000000000312f08 R_X86_64_RELATIVE  *ABS*+0x0000000000311f90
0000000000312f10 R_X86_64_RELATIVE  *ABS*+0x0000000000074ac0
0000000000312f18 R_X86_64_RELATIVE  *ABS*+0x0000000000074ae0
0000000000312f30 R_X86_64_RELATIVE  *ABS*+0x0000000000311f78
0000000000312f38 R_X86_64_RELATIVE  *ABS*+0x0000000000074a60
0000000000312f40 R_X86_64_RELATIVE  *ABS*+0x0000000000074a80
0000000000312f58 R_X86_64_RELATIVE  *ABS*+0x0000000000311fa8
0000000000312f60 R_X86_64_RELATIVE  *ABS*+0x0000000000074b20
0000000000312f68 R_X86_64_RELATIVE  *ABS*+0x0000000000074b40
0000000000312f80 R_X86_64_RELATIVE  *ABS*+0x0000000000312030
0000000000312fb0 R_X86_64_RELATIVE  *ABS*+0x0000000000312090
0000000000312fb8 R_X86_64_RELATIVE  *ABS*+0x0000000000072130
0000000000312fc0 R_X86_64_RELATIVE  *ABS*+0x0000000000074590
0000000000312fc8 R_X86_64_RELATIVE  *ABS*+0x0000000000086940
0000000000312fd8 R_X86_64_RELATIVE  *ABS*+0x00000000003120a8
0000000000312fe0 R_X86_64_RELATIVE  *ABS*+0x0000000000072120
0000000000312fe8 R_X86_64_RELATIVE  *ABS*+0x0000000000074580
0000000000312ff0 R_X86_64_RELATIVE  *ABS*+0x0000000000086900
0000000000313000 R_X86_64_RELATIVE  *ABS*+0x00000000003120c0
0000000000313008 R_X86_64_RELATIVE  *ABS*+0x0000000000072110
0000000000313010 R_X86_64_RELATIVE  *ABS*+0x0000000000074570
0000000000313018 R_X86_64_RELATIVE  *ABS*+0x00000000000868d0
0000000000313028 R_X86_64_RELATIVE  *ABS*+0x00000000003120d8
0000000000313030 R_X86_64_RELATIVE  *ABS*+0x0000000000072100
0000000000313038 R_X86_64_RELATIVE  *ABS*+0x0000000000074560
0000000000313040 R_X86_64_RELATIVE  *ABS*+0x00000000000868a0
0000000000313050 R_X86_64_RELATIVE  *ABS*+0x00000000003120f0
0000000000313058 R_X86_64_RELATIVE  *ABS*+0x00000000000720f0
0000000000313060 R_X86_64_RELATIVE  *ABS*+0x0000000000074550
0000000000313068 R_X86_64_RELATIVE  *ABS*+0x0000000000086870
0000000000313078 R_X86_64_RELATIVE  *ABS*+0x0000000000312108
0000000000313080 R_X86_64_RELATIVE  *ABS*+0x00000000000720e0
0000000000313088 R_X86_64_RELATIVE  *ABS*+0x0000000000074540
0000000000313090 R_X86_64_RELATIVE  *ABS*+0x0000000000086840
00000000003130a0 R_X86_64_RELATIVE  *ABS*+0x0000000000312120
00000000003130a8 R_X86_64_RELATIVE  *ABS*+0x00000000000720d0
00000000003130b0 R_X86_64_RELATIVE  *ABS*+0x0000000000074530
00000000003130b8 R_X86_64_RELATIVE  *ABS*+0x000000000008c290
00000000003130c8 R_X86_64_RELATIVE  *ABS*+0x0000000000312138
00000000003130d0 R_X86_64_RELATIVE  *ABS*+0x00000000000720c0
00000000003130d8 R_X86_64_RELATIVE  *ABS*+0x0000000000074520
00000000003130e0 R_X86_64_RELATIVE  *ABS*+0x000000000008c160
00000000003130f0 R_X86_64_RELATIVE  *ABS*+0x0000000000312150
00000000003130f8 R_X86_64_RELATIVE  *ABS*+0x00000000000720b0
0000000000313100 R_X86_64_RELATIVE  *ABS*+0x0000000000074510
0000000000313108 R_X86_64_RELATIVE  *ABS*+0x000000000008c4e0
0000000000313118 R_X86_64_RELATIVE  *ABS*+0x0000000000312168
0000000000313120 R_X86_64_RELATIVE  *ABS*+0x00000000000720a0
0000000000313128 R_X86_64_RELATIVE  *ABS*+0x0000000000074500
0000000000313130 R_X86_64_RELATIVE  *ABS*+0x000000000008a370
0000000000313140 R_X86_64_RELATIVE  *ABS*+0x0000000000312180
0000000000313148 R_X86_64_RELATIVE  *ABS*+0x0000000000072090
0000000000313150 R_X86_64_RELATIVE  *ABS*+0x00000000000744f0
0000000000313158 R_X86_64_RELATIVE  *ABS*+0x000000000008c120
0000000000313168 R_X86_64_RELATIVE  *ABS*+0x0000000000312198
0000000000313170 R_X86_64_RELATIVE  *ABS*+0x0000000000072080
0000000000313178 R_X86_64_RELATIVE  *ABS*+0x00000000000744e0
0000000000313180 R_X86_64_RELATIVE  *ABS*+0x000000000008c0e0
0000000000313190 R_X86_64_RELATIVE  *ABS*+0x00000000003121b0
0000000000313198 R_X86_64_RELATIVE  *ABS*+0x0000000000072070
00000000003131a0 R_X86_64_RELATIVE  *ABS*+0x00000000000744d0
00000000003131a8 R_X86_64_RELATIVE  *ABS*+0x000000000008c0a0
00000000003131b8 R_X86_64_RELATIVE  *ABS*+0x00000000003121c8
00000000003131c0 R_X86_64_RELATIVE  *ABS*+0x0000000000072060
00000000003131c8 R_X86_64_RELATIVE  *ABS*+0x00000000000744c0
00000000003131d0 R_X86_64_RELATIVE  *ABS*+0x000000000008c050
00000000003131e0 R_X86_64_RELATIVE  *ABS*+0x00000000003121e0
00000000003131e8 R_X86_64_RELATIVE  *ABS*+0x0000000000072050
00000000003131f0 R_X86_64_RELATIVE  *ABS*+0x00000000000744b0
00000000003131f8 R_X86_64_RELATIVE  *ABS*+0x000000000008c010
0000000000313208 R_X86_64_RELATIVE  *ABS*+0x00000000003121f8
0000000000313210 R_X86_64_RELATIVE  *ABS*+0x0000000000072040
0000000000313218 R_X86_64_RELATIVE  *ABS*+0x00000000000744a0
0000000000313220 R_X86_64_RELATIVE  *ABS*+0x000000000008bfd0
0000000000313230 R_X86_64_RELATIVE  *ABS*+0x0000000000312210
0000000000313238 R_X86_64_RELATIVE  *ABS*+0x0000000000072030
0000000000313240 R_X86_64_RELATIVE  *ABS*+0x0000000000074490
0000000000313248 R_X86_64_RELATIVE  *ABS*+0x000000000008bf40
0000000000313258 R_X86_64_RELATIVE  *ABS*+0x0000000000312228
0000000000313260 R_X86_64_RELATIVE  *ABS*+0x0000000000072020
0000000000313268 R_X86_64_RELATIVE  *ABS*+0x0000000000074480
0000000000313270 R_X86_64_RELATIVE  *ABS*+0x000000000008beb0
0000000000313280 R_X86_64_RELATIVE  *ABS*+0x0000000000312240
0000000000313288 R_X86_64_RELATIVE  *ABS*+0x0000000000072010
0000000000313290 R_X86_64_RELATIVE  *ABS*+0x0000000000074470
0000000000313298 R_X86_64_RELATIVE  *ABS*+0x000000000008be40
00000000003132a8 R_X86_64_RELATIVE  *ABS*+0x0000000000312258
00000000003132b0 R_X86_64_RELATIVE  *ABS*+0x0000000000072000
00000000003132b8 R_X86_64_RELATIVE  *ABS*+0x0000000000074460
00000000003132c0 R_X86_64_RELATIVE  *ABS*+0x0000000000082c10
00000000003132d0 R_X86_64_RELATIVE  *ABS*+0x0000000000312270
00000000003132d8 R_X86_64_RELATIVE  *ABS*+0x0000000000071ff0
00000000003132e0 R_X86_64_RELATIVE  *ABS*+0x0000000000074450
00000000003132e8 R_X86_64_RELATIVE  *ABS*+0x0000000000086810
00000000003132f8 R_X86_64_RELATIVE  *ABS*+0x0000000000312288
0000000000313300 R_X86_64_RELATIVE  *ABS*+0x0000000000071fe0
0000000000313308 R_X86_64_RELATIVE  *ABS*+0x0000000000074440
0000000000313310 R_X86_64_RELATIVE  *ABS*+0x000000000008c530
0000000000313320 R_X86_64_RELATIVE  *ABS*+0x00000000003122a0
0000000000313328 R_X86_64_RELATIVE  *ABS*+0x0000000000071fd0
0000000000313330 R_X86_64_RELATIVE  *ABS*+0x0000000000074430
0000000000313338 R_X86_64_RELATIVE  *ABS*+0x000000000008c650
0000000000313348 R_X86_64_RELATIVE  *ABS*+0x00000000003122b8
0000000000313350 R_X86_64_RELATIVE  *ABS*+0x0000000000071fc0
0000000000313358 R_X86_64_RELATIVE  *ABS*+0x0000000000074420
0000000000313360 R_X86_64_RELATIVE  *ABS*+0x000000000008c5a0
0000000000313370 R_X86_64_RELATIVE  *ABS*+0x00000000003122d0
0000000000313378 R_X86_64_RELATIVE  *ABS*+0x0000000000071fb0
0000000000313380 R_X86_64_RELATIVE  *ABS*+0x0000000000074410
0000000000313388 R_X86_64_RELATIVE  *ABS*+0x000000000008c670
0000000000313398 R_X86_64_RELATIVE  *ABS*+0x00000000003122e8
00000000003133a0 R_X86_64_RELATIVE  *ABS*+0x0000000000071fa0
00000000003133a8 R_X86_64_RELATIVE  *ABS*+0x0000000000074400
00000000003133b0 R_X86_64_RELATIVE  *ABS*+0x000000000008cbb0
00000000003133c0 R_X86_64_RELATIVE  *ABS*+0x0000000000312300
00000000003133c8 R_X86_64_RELATIVE  *ABS*+0x0000000000071f90
00000000003133d0 R_X86_64_RELATIVE  *ABS*+0x00000000000743f0
00000000003133d8 R_X86_64_RELATIVE  *ABS*+0x000000000008a290
00000000003133e8 R_X86_64_RELATIVE  *ABS*+0x0000000000312318
00000000003133f0 R_X86_64_RELATIVE  *ABS*+0x0000000000071f80
00000000003133f8 R_X86_64_RELATIVE  *ABS*+0x00000000000743e0
0000000000313400 R_X86_64_RELATIVE  *ABS*+0x000000000008bcd0
0000000000313410 R_X86_64_RELATIVE  *ABS*+0x0000000000312330
0000000000313418 R_X86_64_RELATIVE  *ABS*+0x0000000000071f70
0000000000313420 R_X86_64_RELATIVE  *ABS*+0x00000000000743d0
0000000000313428 R_X86_64_RELATIVE  *ABS*+0x00000000000867e0
0000000000313438 R_X86_64_RELATIVE  *ABS*+0x0000000000312348
0000000000313440 R_X86_64_RELATIVE  *ABS*+0x0000000000071f60
0000000000313448 R_X86_64_RELATIVE  *ABS*+0x00000000000743c0
0000000000313450 R_X86_64_RELATIVE  *ABS*+0x0000000000084850
0000000000313460 R_X86_64_RELATIVE  *ABS*+0x0000000000312360
0000000000313468 R_X86_64_RELATIVE  *ABS*+0x0000000000073950
0000000000313470 R_X86_64_RELATIVE  *ABS*+0x0000000000074760
0000000000313478 R_X86_64_RELATIVE  *ABS*+0x00000000000867c0
0000000000313488 R_X86_64_RELATIVE  *ABS*+0x0000000000312378
0000000000313490 R_X86_64_RELATIVE  *ABS*+0x0000000000071f50
0000000000313498 R_X86_64_RELATIVE  *ABS*+0x00000000000743b0
00000000003134a0 R_X86_64_RELATIVE  *ABS*+0x000000000008c7e0
00000000003134b0 R_X86_64_RELATIVE  *ABS*+0x0000000000312050
00000000003134b8 R_X86_64_RELATIVE  *ABS*+0x0000000000080fd0
00000000003134c0 R_X86_64_RELATIVE  *ABS*+0x000000000007f4a0
00000000003134c8 R_X86_64_RELATIVE  *ABS*+0x000000000009a8f0
00000000003134d8 R_X86_64_RELATIVE  *ABS*+0x0000000000312390
00000000003134e0 R_X86_64_RELATIVE  *ABS*+0x0000000000087ac0
00000000003134e8 R_X86_64_RELATIVE  *ABS*+0x0000000000088000
00000000003134f0 R_X86_64_RELATIVE  *ABS*+0x00000000000714b0
00000000003134f8 R_X86_64_RELATIVE  *ABS*+0x0000000000084ad0
0000000000313500 R_X86_64_RELATIVE  *ABS*+0x0000000000084960
0000000000313508 R_X86_64_RELATIVE  *ABS*+0x000000000009b980
0000000000313510 R_X86_64_RELATIVE  *ABS*+0x0000000000089540
0000000000313518 R_X86_64_RELATIVE  *ABS*+0x0000000000086ac0
0000000000313520 R_X86_64_RELATIVE  *ABS*+0x000000000009b5c0
0000000000313530 R_X86_64_RELATIVE  *ABS*+0x00000000003123b8
0000000000313538 R_X86_64_RELATIVE  *ABS*+0x0000000000071f40
0000000000313540 R_X86_64_RELATIVE  *ABS*+0x00000000000747d0
0000000000313548 R_X86_64_RELATIVE  *ABS*+0x0000000000074be0
0000000000313550 R_X86_64_RELATIVE  *ABS*+0x000000000007ce70
0000000000313558 R_X86_64_RELATIVE  *ABS*+0x0000000000074ba0
0000000000313560 R_X86_64_RELATIVE  *ABS*+0x0000000000074b80
0000000000313570 R_X86_64_RELATIVE  *ABS*+0x00000000003123d0
0000000000313578 R_X86_64_RELATIVE  *ABS*+0x0000000000088120
0000000000313580 R_X86_64_RELATIVE  *ABS*+0x0000000000088480
0000000000313588 R_X86_64_RELATIVE  *ABS*+0x0000000000083de0
0000000000313590 R_X86_64_RELATIVE  *ABS*+0x0000000000084a20
0000000000313598 R_X86_64_RELATIVE  *ABS*+0x0000000000084940
00000000003135a0 R_X86_64_RELATIVE  *ABS*+0x0000000000084c20
00000000003135a8 R_X86_64_RELATIVE  *ABS*+0x00000000000893d0
00000000003135b0 R_X86_64_RELATIVE  *ABS*+0x0000000000086b50
00000000003135b8 R_X86_64_RELATIVE  *ABS*+0x000000000009b5c0
00000000003135c8 R_X86_64_RELATIVE  *ABS*+0x00000000003123f8
00000000003135d0 R_X86_64_RELATIVE  *ABS*+0x0000000000072ac0
00000000003135d8 R_X86_64_RELATIVE  *ABS*+0x0000000000074730
00000000003135e8 R_X86_64_RELATIVE  *ABS*+0x0000000000312408
00000000003135f0 R_X86_64_RELATIVE  *ABS*+0x00000000000717a0
00000000003135f8 R_X86_64_RELATIVE  *ABS*+0x0000000000074700
0000000000313608 R_X86_64_RELATIVE  *ABS*+0x0000000000312418
0000000000313620 R_X86_64_RELATIVE  *ABS*+0x0000000000082640
0000000000313638 R_X86_64_RELATIVE  *ABS*+0x00000000000718e0
0000000000313660 R_X86_64_RELATIVE  *ABS*+0x0000000000084fe0
0000000000313678 R_X86_64_RELATIVE  *ABS*+0x0000000000312430
0000000000313680 R_X86_64_RELATIVE  *ABS*+0x000000000007a0d0
0000000000313688 R_X86_64_RELATIVE  *ABS*+0x000000000007a0f0
0000000000313690 R_X86_64_RELATIVE  *ABS*+0x00000000000742d0
0000000000313698 R_X86_64_RELATIVE  *ABS*+0x00000000000b9950
00000000003136a0 R_X86_64_RELATIVE  *ABS*+0x00000000000b9920
00000000003136a8 R_X86_64_RELATIVE  *ABS*+0x00000000000b13e0
00000000003136b8 R_X86_64_RELATIVE  *ABS*+0x0000000000312458
00000000003136c0 R_X86_64_RELATIVE  *ABS*+0x00000000000716e0
00000000003136c8 R_X86_64_RELATIVE  *ABS*+0x00000000000745b0
00000000003136d0 R_X86_64_RELATIVE  *ABS*+0x0000000000071610
00000000003136d8 R_X86_64_RELATIVE  *ABS*+0x0000000000074230
00000000003136e8 R_X86_64_RELATIVE  *ABS*+0x0000000000312470
0000000000313700 R_X86_64_RELATIVE  *ABS*+0x000000000007a9c0
0000000000313710 R_X86_64_RELATIVE  *ABS*+0x000000000007b460
0000000000313718 R_X86_64_RELATIVE  *ABS*+0x0000000000071640
0000000000313730 R_X86_64_RELATIVE  *ABS*+0x00000000000c4690
0000000000313748 R_X86_64_RELATIVE  *ABS*+0x00000000000728c0
0000000000313750 R_X86_64_RELATIVE  *ABS*+0x00000000000728d0
0000000000313768 R_X86_64_RELATIVE  *ABS*+0x00000000000728e0
0000000000313770 R_X86_64_RELATIVE  *ABS*+0x00000000000728f0
0000000000313780 R_X86_64_RELATIVE  *ABS*+0x0000000000072900
0000000000313788 R_X86_64_RELATIVE  *ABS*+0x0000000000071e00
0000000000313790 R_X86_64_RELATIVE  *ABS*+0x0000000000072920
0000000000313798 R_X86_64_RELATIVE  *ABS*+0x0000000000072940
00000000003137a0 R_X86_64_RELATIVE  *ABS*+0x0000000000072960
00000000003137a8 R_X86_64_RELATIVE  *ABS*+0x0000000000072980
00000000003137b0 R_X86_64_RELATIVE  *ABS*+0x00000000000729a0
00000000003137d0 R_X86_64_RELATIVE  *ABS*+0x00000000000729c0
00000000003137d8 R_X86_64_RELATIVE  *ABS*+0x00000000000729d0
00000000003137e0 R_X86_64_RELATIVE  *ABS*+0x00000000000729e0
00000000003137f8 R_X86_64_RELATIVE  *ABS*+0x00000000000729f0
0000000000313828 R_X86_64_RELATIVE  *ABS*+0x0000000000075480
0000000000313830 R_X86_64_RELATIVE  *ABS*+0x0000000000090db0
0000000000313840 R_X86_64_RELATIVE  *ABS*+0x0000000000072a00
0000000000313848 R_X86_64_RELATIVE  *ABS*+0x0000000000072a10
0000000000313850 R_X86_64_RELATIVE  *ABS*+0x0000000000072170
0000000000313858 R_X86_64_RELATIVE  *ABS*+0x0000000000072190
0000000000313860 R_X86_64_RELATIVE  *ABS*+0x00000000000721b0
0000000000313868 R_X86_64_RELATIVE  *ABS*+0x00000000000721d0
0000000000313870 R_X86_64_RELATIVE  *ABS*+0x0000000000079e90
0000000000313878 R_X86_64_RELATIVE  *ABS*+0x0000000000079e30
0000000000313880 R_X86_64_RELATIVE  *ABS*+0x0000000000072200
0000000000313888 R_X86_64_RELATIVE  *ABS*+0x000000000007c2e0
0000000000313890 R_X86_64_RELATIVE  *ABS*+0x000000000007c350
0000000000313898 R_X86_64_RELATIVE  *ABS*+0x0000000000092ca0
00000000003138a0 R_X86_64_RELATIVE  *ABS*+0x000000000007d8e0
00000000003138b0 R_X86_64_RELATIVE  *ABS*+0x0000000000312488
00000000003138c8 R_X86_64_RELATIVE  *ABS*+0x000000000007a9c0
00000000003138d8 R_X86_64_RELATIVE  *ABS*+0x000000000007b460
00000000003138e0 R_X86_64_RELATIVE  *ABS*+0x0000000000071640
00000000003138f8 R_X86_64_RELATIVE  *ABS*+0x0000000000093230
0000000000313910 R_X86_64_RELATIVE  *ABS*+0x0000000000072760
0000000000313918 R_X86_64_RELATIVE  *ABS*+0x0000000000072770
0000000000313930 R_X86_64_RELATIVE  *ABS*+0x0000000000072780
0000000000313938 R_X86_64_RELATIVE  *ABS*+0x0000000000072790
0000000000313948 R_X86_64_RELATIVE  *ABS*+0x00000000000727a0
0000000000313950 R_X86_64_RELATIVE  *ABS*+0x0000000000071e30
0000000000313958 R_X86_64_RELATIVE  *ABS*+0x00000000000727c0
0000000000313960 R_X86_64_RELATIVE  *ABS*+0x00000000000727e0
0000000000313968 R_X86_64_RELATIVE  *ABS*+0x0000000000072800
0000000000313970 R_X86_64_RELATIVE  *ABS*+0x0000000000072820
0000000000313978 R_X86_64_RELATIVE  *ABS*+0x0000000000072840
0000000000313998 R_X86_64_RELATIVE  *ABS*+0x0000000000072860
00000000003139a0 R_X86_64_RELATIVE  *ABS*+0x0000000000072870
00000000003139a8 R_X86_64_RELATIVE  *ABS*+0x0000000000072880
00000000003139c0 R_X86_64_RELATIVE  *ABS*+0x0000000000072890
00000000003139f0 R_X86_64_RELATIVE  *ABS*+0x0000000000074f90
00000000003139f8 R_X86_64_RELATIVE  *ABS*+0x0000000000086f00
0000000000313a08 R_X86_64_RELATIVE  *ABS*+0x00000000000728a0
0000000000313a10 R_X86_64_RELATIVE  *ABS*+0x00000000000728b0
0000000000313a18 R_X86_64_RELATIVE  *ABS*+0x000000000007a5b0
0000000000313a20 R_X86_64_RELATIVE  *ABS*+0x000000000007a590
0000000000313a28 R_X86_64_RELATIVE  *ABS*+0x000000000007a570
0000000000313a30 R_X86_64_RELATIVE  *ABS*+0x000000000007a550
0000000000313a38 R_X86_64_RELATIVE  *ABS*+0x0000000000079f50
0000000000313a40 R_X86_64_RELATIVE  *ABS*+0x0000000000079ef0
0000000000313a48 R_X86_64_RELATIVE  *ABS*+0x0000000000072160
0000000000313a50 R_X86_64_RELATIVE  *ABS*+0x000000000007c200
0000000000313a58 R_X86_64_RELATIVE  *ABS*+0x000000000007c270
0000000000313a60 R_X86_64_RELATIVE  *ABS*+0x0000000000090df0
0000000000313a68 R_X86_64_RELATIVE  *ABS*+0x000000000007e630
0000000000313a78 R_X86_64_RELATIVE  *ABS*+0x00000000003124a0
0000000000313a90 R_X86_64_RELATIVE  *ABS*+0x000000000007a9c0
0000000000313aa0 R_X86_64_RELATIVE  *ABS*+0x000000000007b460
0000000000313aa8 R_X86_64_RELATIVE  *ABS*+0x0000000000071640
0000000000313ac0 R_X86_64_RELATIVE  *ABS*+0x00000000000c4350
0000000000313ad8 R_X86_64_RELATIVE  *ABS*+0x0000000000071700
0000000000313ae0 R_X86_64_RELATIVE  *ABS*+0x00000000000716f0
0000000000313af8 R_X86_64_RELATIVE  *ABS*+0x0000000000072460
0000000000313b00 R_X86_64_RELATIVE  *ABS*+0x0000000000072470
0000000000313b10 R_X86_64_RELATIVE  *ABS*+0x00000000000718a0
0000000000313b18 R_X86_64_RELATIVE  *ABS*+0x0000000000071a60
0000000000313b20 R_X86_64_RELATIVE  *ABS*+0x0000000000072480
0000000000313b28 R_X86_64_RELATIVE  *ABS*+0x00000000000724a0
0000000000313b30 R_X86_64_RELATIVE  *ABS*+0x00000000000724c0
0000000000313b38 R_X86_64_RELATIVE  *ABS*+0x00000000000724e0
0000000000313b40 R_X86_64_RELATIVE  *ABS*+0x0000000000072500
0000000000313b60 R_X86_64_RELATIVE  *ABS*+0x0000000000072730
0000000000313b68 R_X86_64_RELATIVE  *ABS*+0x0000000000072740
0000000000313b70 R_X86_64_RELATIVE  *ABS*+0x0000000000072750
0000000000313b88 R_X86_64_RELATIVE  *ABS*+0x0000000000071980
0000000000313bb8 R_X86_64_RELATIVE  *ABS*+0x0000000000074e70
0000000000313bc0 R_X86_64_RELATIVE  *ABS*+0x00000000000718c0
0000000000313bd0 R_X86_64_RELATIVE  *ABS*+0x0000000000071890
0000000000313bd8 R_X86_64_RELATIVE  *ABS*+0x0000000000071880
0000000000313be0 R_X86_64_RELATIVE  *ABS*+0x0000000000072400
0000000000313be8 R_X86_64_RELATIVE  *ABS*+0x0000000000072410
0000000000313bf0 R_X86_64_RELATIVE  *ABS*+0x0000000000072420
0000000000313bf8 R_X86_64_RELATIVE  *ABS*+0x0000000000072430
0000000000313c00 R_X86_64_RELATIVE  *ABS*+0x0000000000079dd0
0000000000313c08 R_X86_64_RELATIVE  *ABS*+0x0000000000079d70
0000000000313c10 R_X86_64_RELATIVE  *ABS*+0x0000000000072450
0000000000313c18 R_X86_64_RELATIVE  *ABS*+0x000000000007c3c0
0000000000313c20 R_X86_64_RELATIVE  *ABS*+0x000000000007c430
0000000000313c28 R_X86_64_RELATIVE  *ABS*+0x0000000000092d90
0000000000313c30 R_X86_64_RELATIVE  *ABS*+0x000000000007e760
0000000000313c40 R_X86_64_RELATIVE  *ABS*+0x00000000003124c8
0000000000313c48 R_X86_64_RELATIVE  *ABS*+0x0000000000079b40
0000000000313c50 R_X86_64_RELATIVE  *ABS*+0x0000000000079b50
0000000000313c58 R_X86_64_RELATIVE  *ABS*+0x0000000000072520
0000000000313c60 R_X86_64_RELATIVE  *ABS*+0x000000000007c4a0
0000000000313c68 R_X86_64_RELATIVE  *ABS*+0x000000000007c510
0000000000313c70 R_X86_64_RELATIVE  *ABS*+0x0000000000079c50
0000000000313c78 R_X86_64_RELATIVE  *ABS*+0x00000000000904c0
0000000000313c80 R_X86_64_RELATIVE  *ABS*+0x0000000000090d80
0000000000313c88 R_X86_64_RELATIVE  *ABS*+0x000000000008a860
0000000000313c90 R_X86_64_RELATIVE  *ABS*+0x000000000007c580
0000000000313c98 R_X86_64_RELATIVE  *ABS*+0x00000000000826d0
0000000000313ca0 R_X86_64_RELATIVE  *ABS*+0x000000000007dac0
0000000000313ca8 R_X86_64_RELATIVE  *ABS*+0x0000000000072530
0000000000313cb0 R_X86_64_RELATIVE  *ABS*+0x0000000000090cd0
0000000000313cc0 R_X86_64_RELATIVE  *ABS*+0x00000000003124e0
0000000000313cc8 R_X86_64_RELATIVE  *ABS*+0x0000000000073260
0000000000313cd0 R_X86_64_RELATIVE  *ABS*+0x0000000000074940
0000000000313cd8 R_X86_64_RELATIVE  *ABS*+0x00000000000d3570
0000000000313ce8 R_X86_64_RELATIVE  *ABS*+0x00000000003124f0
0000000000313cf0 R_X86_64_RELATIVE  *ABS*+0x00000000000b24a0
0000000000313cf8 R_X86_64_RELATIVE  *ABS*+0x00000000000b24f0
0000000000313d00 R_X86_64_RELATIVE  *ABS*+0x00000000000baee0
0000000000313d10 R_X86_64_RELATIVE  *ABS*+0x0000000000312510
0000000000313d18 R_X86_64_RELATIVE  *ABS*+0x000000000008a950
0000000000313d20 R_X86_64_RELATIVE  *ABS*+0x000000000008a990
0000000000313d28 R_X86_64_RELATIVE  *ABS*+0x0000000000071660
0000000000313d30 R_X86_64_RELATIVE  *ABS*+0x000000000007ca90
0000000000313d38 R_X86_64_RELATIVE  *ABS*+0x000000000007cb00
0000000000313d40 R_X86_64_RELATIVE  *ABS*+0x0000000000088880
0000000000313d48 R_X86_64_RELATIVE  *ABS*+0x00000000000baa30
0000000000313d50 R_X86_64_RELATIVE  *ABS*+0x00000000000cd5d0
0000000000313d58 R_X86_64_RELATIVE  *ABS*+0x000000000008e560
0000000000313d60 R_X86_64_RELATIVE  *ABS*+0x000000000008cdd0
0000000000313d68 R_X86_64_RELATIVE  *ABS*+0x0000000000087620
0000000000313d70 R_X86_64_RELATIVE  *ABS*+0x000000000008a9e0
0000000000313d78 R_X86_64_RELATIVE  *ABS*+0x0000000000073850
0000000000313d80 R_X86_64_RELATIVE  *ABS*+0x00000000000cc330
0000000000313d90 R_X86_64_RELATIVE  *ABS*+0x0000000000312538
0000000000313dc8 R_X86_64_RELATIVE  *ABS*+0x0000000000312548
0000000000313dd0 R_X86_64_RELATIVE  *ABS*+0x0000000000071740
0000000000313dd8 R_X86_64_RELATIVE  *ABS*+0x00000000000746c0
0000000000313de8 R_X86_64_RELATIVE  *ABS*+0x0000000000312558
0000000000313df0 R_X86_64_RELATIVE  *ABS*+0x0000000000083180
0000000000313df8 R_X86_64_RELATIVE  *ABS*+0x00000000000832a0
0000000000313e00 R_X86_64_RELATIVE  *ABS*+0x0000000000082640
0000000000313e10 R_X86_64_RELATIVE  *ABS*+0x00000000000d20e0
0000000000313e18 R_X86_64_RELATIVE  *ABS*+0x00000000000737b0
0000000000313e20 R_X86_64_RELATIVE  *ABS*+0x0000000000073810
0000000000313e28 R_X86_64_RELATIVE  *ABS*+0x0000000000073820
0000000000313e30 R_X86_64_RELATIVE  *ABS*+0x0000000000073830
0000000000313e38 R_X86_64_RELATIVE  *ABS*+0x0000000000073840
0000000000313e40 R_X86_64_RELATIVE  *ABS*+0x00000000000850c0
0000000000313e48 R_X86_64_RELATIVE  *ABS*+0x00000000000cbb80
0000000000313e58 R_X86_64_RELATIVE  *ABS*+0x0000000000312570
0000000000313e60 R_X86_64_RELATIVE  *ABS*+0x000000000008fbb0
0000000000313e68 R_X86_64_RELATIVE  *ABS*+0x000000000008fc50
0000000000313e70 R_X86_64_RELATIVE  *ABS*+0x000000000007a9c0
0000000000313e80 R_X86_64_RELATIVE  *ABS*+0x000000000007b460
0000000000313e88 R_X86_64_RELATIVE  *ABS*+0x0000000000071640
0000000000313e90 R_X86_64_RELATIVE  *ABS*+0x00000000000cb2b0
0000000000313e98 R_X86_64_RELATIVE  *ABS*+0x0000000000075950
0000000000313ea0 R_X86_64_RELATIVE  *ABS*+0x00000000000c4350
0000000000313ea8 R_X86_64_RELATIVE  *ABS*+0x00000000000b77e0
0000000000313eb0 R_X86_64_RELATIVE  *ABS*+0x00000000000c1390
0000000000313eb8 R_X86_64_RELATIVE  *ABS*+0x00000000000caa50
0000000000313ec0 R_X86_64_RELATIVE  *ABS*+0x00000000000c4f70
0000000000313ec8 R_X86_64_RELATIVE  *ABS*+0x000000000007f530
0000000000313ed0 R_X86_64_RELATIVE  *ABS*+0x00000000000b82c0
0000000000313ed8 R_X86_64_RELATIVE  *ABS*+0x000000000007fb70
0000000000313ee0 R_X86_64_RELATIVE  *ABS*+0x00000000000b8a80
0000000000313ee8 R_X86_64_RELATIVE  *ABS*+0x00000000000c38d0
0000000000313ef0 R_X86_64_RELATIVE  *ABS*+0x0000000000075690
0000000000313ef8 R_X86_64_RELATIVE  *ABS*+0x0000000000075a10
0000000000313f00 R_X86_64_RELATIVE  *ABS*+0x0000000000078b80
0000000000313f08 R_X86_64_RELATIVE  *ABS*+0x0000000000078e40
0000000000313f10 R_X86_64_RELATIVE  *ABS*+0x0000000000079100
0000000000313f18 R_X86_64_RELATIVE  *ABS*+0x00000000000793c0
0000000000313f20 R_X86_64_RELATIVE  *ABS*+0x0000000000079880
0000000000313f28 R_X86_64_RELATIVE  *ABS*+0x000000000008f390
0000000000313f30 R_X86_64_RELATIVE  *ABS*+0x000000000008f720
0000000000313f38 R_X86_64_RELATIVE  *ABS*+0x000000000008fab0
0000000000313f40 R_X86_64_RELATIVE  *ABS*+0x0000000000085850
0000000000313f48 R_X86_64_RELATIVE  *ABS*+0x000000000007a1c0
0000000000313f50 R_X86_64_RELATIVE  *ABS*+0x000000000007a130
0000000000313f58 R_X86_64_RELATIVE  *ABS*+0x0000000000079680
0000000000313f60 R_X86_64_RELATIVE  *ABS*+0x0000000000075cd0
0000000000313f68 R_X86_64_RELATIVE  *ABS*+0x00000000000c68d0
0000000000313f70 R_X86_64_RELATIVE  *ABS*+0x00000000000789f0
0000000000313f78 R_X86_64_RELATIVE  *ABS*+0x00000000000908f0
0000000000313f80 R_X86_64_RELATIVE  *ABS*+0x00000000000906d0
0000000000313f88 R_X86_64_RELATIVE  *ABS*+0x0000000000086290
0000000000313f90 R_X86_64_RELATIVE  *ABS*+0x00000000000862d0
0000000000313f98 R_X86_64_RELATIVE  *ABS*+0x000000000007e450
0000000000313fa0 R_X86_64_RELATIVE  *ABS*+0x0000000000082810
0000000000313fa8 R_X86_64_RELATIVE  *ABS*+0x00000000000c6320
0000000000313fb0 R_X86_64_RELATIVE  *ABS*+0x0000000000082f80
0000000000313fb8 R_X86_64_RELATIVE  *ABS*+0x0000000000082d80
0000000000313fc0 R_X86_64_RELATIVE  *ABS*+0x0000000000072400
0000000000313fc8 R_X86_64_RELATIVE  *ABS*+0x0000000000072410
0000000000313fd0 R_X86_64_RELATIVE  *ABS*+0x0000000000072420
0000000000313fd8 R_X86_64_RELATIVE  *ABS*+0x0000000000072430
0000000000313fe0 R_X86_64_RELATIVE  *ABS*+0x00000000000b1020
0000000000313fe8 R_X86_64_RELATIVE  *ABS*+0x00000000000b0db0
0000000000313ff0 R_X86_64_RELATIVE  *ABS*+0x0000000000072450
0000000000313ff8 R_X86_64_RELATIVE  *ABS*+0x000000000007c3c0
0000000000314000 R_X86_64_RELATIVE  *ABS*+0x000000000007c430
0000000000314008 R_X86_64_RELATIVE  *ABS*+0x0000000000092d90
0000000000314010 R_X86_64_RELATIVE  *ABS*+0x000000000007e760
0000000000314018 R_X86_64_RELATIVE  *ABS*+0x00000000000be350
0000000000314020 R_X86_64_RELATIVE  *ABS*+0x0000000000075600
0000000000314030 R_X86_64_RELATIVE  *ABS*+0x0000000000312570
0000000000314038 R_X86_64_RELATIVE  *ABS*+0x000000000008fc40
0000000000314040 R_X86_64_RELATIVE  *ABS*+0x000000000008fcf0
0000000000314048 R_X86_64_RELATIVE  *ABS*+0x00000000000be580
0000000000314050 R_X86_64_RELATIVE  *ABS*+0x0000000000075620
0000000000314060 R_X86_64_RELATIVE  *ABS*+0x00000000003125a8
0000000000314068 R_X86_64_RELATIVE  *ABS*+0x000000000008ab90
0000000000314070 R_X86_64_RELATIVE  *ABS*+0x000000000008ac80
0000000000314080 R_X86_64_RELATIVE  *ABS*+0x00000000003125b8
0000000000314088 R_X86_64_RELATIVE  *ABS*+0x000000000007a750
0000000000314090 R_X86_64_RELATIVE  *ABS*+0x000000000007a770
00000000003140a0 R_X86_64_RELATIVE  *ABS*+0x00000000003125d0
00000000003140c8 R_X86_64_RELATIVE  *ABS*+0x0000000000071900
00000000003140d0 R_X86_64_RELATIVE  *ABS*+0x0000000000071730
00000000003140d8 R_X86_64_RELATIVE  *ABS*+0x00000000000723f0
00000000003140f0 R_X86_64_RELATIVE  *ABS*+0x00000000003125e0
00000000003140f8 R_X86_64_RELATIVE  *ABS*+0x0000000000089f00
0000000000314100 R_X86_64_RELATIVE  *ABS*+0x000000000008a0a0
0000000000314108 R_X86_64_RELATIVE  *ABS*+0x00000000000723d0
0000000000314110 R_X86_64_RELATIVE  *ABS*+0x00000000000723e0
0000000000314118 R_X86_64_RELATIVE  *ABS*+0x0000000000071900
0000000000314128 R_X86_64_RELATIVE  *ABS*+0x00000000000723f0
0000000000314140 R_X86_64_RELATIVE  *ABS*+0x00000000003125f8
0000000000314178 R_X86_64_RELATIVE  *ABS*+0x0000000000312608
0000000000314180 R_X86_64_RELATIVE  *ABS*+0x00000000000723c0
0000000000314188 R_X86_64_RELATIVE  *ABS*+0x0000000000071670
0000000000314190 R_X86_64_RELATIVE  *ABS*+0x0000000000074660
0000000000314198 R_X86_64_RELATIVE  *ABS*+0x00000000000c3390
00000000003141a0 R_X86_64_RELATIVE  *ABS*+0x00000000000b0690
00000000003141b0 R_X86_64_RELATIVE  *ABS*+0x0000000000312620
00000000003141b8 R_X86_64_RELATIVE  *ABS*+0x000000000007a5d0
00000000003141c0 R_X86_64_RELATIVE  *ABS*+0x000000000007a5f0
00000000003141c8 R_X86_64_RELATIVE  *ABS*+0x00000000000bdb20
00000000003141d0 R_X86_64_RELATIVE  *ABS*+0x00000000000c2ee0
00000000003141d8 R_X86_64_RELATIVE  *ABS*+0x00000000000c2c50
00000000003141e8 R_X86_64_RELATIVE  *ABS*+0x0000000000312638
00000000003141f0 R_X86_64_RELATIVE  *ABS*+0x000000000007a630
00000000003141f8 R_X86_64_RELATIVE  *ABS*+0x000000000007a650
0000000000314200 R_X86_64_RELATIVE  *ABS*+0x00000000000bdc20
0000000000314208 R_X86_64_RELATIVE  *ABS*+0x00000000000c2760
0000000000314210 R_X86_64_RELATIVE  *ABS*+0x00000000000c2610
0000000000314220 R_X86_64_RELATIVE  *ABS*+0x0000000000312650
0000000000314228 R_X86_64_RELATIVE  *ABS*+0x0000000000071800
0000000000314230 R_X86_64_RELATIVE  *ABS*+0x0000000000074690
0000000000314238 R_X86_64_RELATIVE  *ABS*+0x00000000000b7050
0000000000314248 R_X86_64_RELATIVE  *ABS*+0x0000000000312660
0000000000314250 R_X86_64_RELATIVE  *ABS*+0x000000000008d8d0
0000000000314258 R_X86_64_RELATIVE  *ABS*+0x000000000008d920
0000000000314260 R_X86_64_RELATIVE  *ABS*+0x00000000000b7d10
0000000000314270 R_X86_64_RELATIVE  *ABS*+0x00000000003126a0
0000000000314278 R_X86_64_RELATIVE  *ABS*+0x0000000000071990
0000000000314280 R_X86_64_RELATIVE  *ABS*+0x00000000000745c0
0000000000314288 R_X86_64_RELATIVE  *ABS*+0x0000000000071610
0000000000314290 R_X86_64_RELATIVE  *ABS*+0x0000000000074270
00000000003142a0 R_X86_64_RELATIVE  *ABS*+0x0000000000312730
00000000003142a8 R_X86_64_RELATIVE  *ABS*+0x00000000000723b0
00000000003142b0 R_X86_64_RELATIVE  *ABS*+0x00000000000747a0
00000000003142b8 R_X86_64_RELATIVE  *ABS*+0x000000000007f410
00000000003142c0 R_X86_64_RELATIVE  *ABS*+0x0000000000073f20
00000000003142c8 R_X86_64_RELATIVE  *ABS*+0x000000000007a4f0
00000000003142d8 R_X86_64_RELATIVE  *ABS*+0x0000000000312748
00000000003142e0 R_X86_64_RELATIVE  *ABS*+0x0000000000071a80
00000000003142e8 R_X86_64_RELATIVE  *ABS*+0x00000000000747c0
00000000003142f0 R_X86_64_RELATIVE  *ABS*+0x00000000000ba120
00000000003142f8 R_X86_64_RELATIVE  *ABS*+0x00000000000b0300
0000000000314300 R_X86_64_RELATIVE  *ABS*+0x000000000007f310
0000000000314310 R_X86_64_RELATIVE  *ABS*+0x0000000000312760
0000000000314318 R_X86_64_RELATIVE  *ABS*+0x0000000000073a90
0000000000314320 R_X86_64_RELATIVE  *ABS*+0x000000000007ea10
0000000000314328 R_X86_64_RELATIVE  *ABS*+0x0000000000072330
0000000000314330 R_X86_64_RELATIVE  *ABS*+0x0000000000072360
0000000000314338 R_X86_64_RELATIVE  *ABS*+0x0000000000079ff0
0000000000314340 R_X86_64_RELATIVE  *ABS*+0x000000000007d7e0
0000000000314350 R_X86_64_RELATIVE  *ABS*+0x0000000000312778
0000000000314358 R_X86_64_RELATIVE  *ABS*+0x0000000000073b10
0000000000314360 R_X86_64_RELATIVE  *ABS*+0x000000000007e890
0000000000314368 R_X86_64_RELATIVE  *ABS*+0x00000000000722b0
0000000000314370 R_X86_64_RELATIVE  *ABS*+0x00000000000722e0
0000000000314378 R_X86_64_RELATIVE  *ABS*+0x0000000000079fd0
0000000000314380 R_X86_64_RELATIVE  *ABS*+0x000000000007d6e0
0000000000314390 R_X86_64_RELATIVE  *ABS*+0x0000000000312790
0000000000314398 R_X86_64_RELATIVE  *ABS*+0x0000000000073b90
00000000003143a0 R_X86_64_RELATIVE  *ABS*+0x000000000007ec10
00000000003143a8 R_X86_64_RELATIVE  *ABS*+0x0000000000072230
00000000003143b0 R_X86_64_RELATIVE  *ABS*+0x0000000000072260
00000000003143b8 R_X86_64_RELATIVE  *ABS*+0x0000000000079fb0
00000000003143c0 R_X86_64_RELATIVE  *ABS*+0x000000000007cfe0
00000000003143d0 R_X86_64_RELATIVE  *ABS*+0x00000000003127d8
00000000003143d8 R_X86_64_RELATIVE  *ABS*+0x0000000000072210
00000000003143e0 R_X86_64_RELATIVE  *ABS*+0x00000000000747b0
00000000003143e8 R_X86_64_RELATIVE  *ABS*+0x0000000000072220
00000000003143f0 R_X86_64_RELATIVE  *ABS*+0x0000000000073f10
00000000003143f8 R_X86_64_RELATIVE  *ABS*+0x000000000007a520
0000000000314408 R_X86_64_RELATIVE  *ABS*+0x0000000000312878
0000000000314420 R_X86_64_RELATIVE  *ABS*+0x0000000000082640
0000000000314438 R_X86_64_RELATIVE  *ABS*+0x00000000000936b0
0000000000314460 R_X86_64_RELATIVE  *ABS*+0x0000000000084fc0
0000000000314478 R_X86_64_RELATIVE  *ABS*+0x0000000000312890
0000000000314480 R_X86_64_RELATIVE  *ABS*+0x00000000000832d0
0000000000314488 R_X86_64_RELATIVE  *ABS*+0x0000000000083400
0000000000314490 R_X86_64_RELATIVE  *ABS*+0x0000000000082640
00000000003144a0 R_X86_64_RELATIVE  *ABS*+0x00000000000d1b20
00000000003144a8 R_X86_64_RELATIVE  *ABS*+0x00000000000937a0
00000000003144b0 R_X86_64_RELATIVE  *ABS*+0x0000000000073770
00000000003144b8 R_X86_64_RELATIVE  *ABS*+0x0000000000073780
00000000003144c0 R_X86_64_RELATIVE  *ABS*+0x0000000000073790
00000000003144c8 R_X86_64_RELATIVE  *ABS*+0x00000000000737a0
00000000003144d0 R_X86_64_RELATIVE  *ABS*+0x0000000000085060
00000000003144d8 R_X86_64_RELATIVE  *ABS*+0x00000000000cdc70
00000000003144e8 R_X86_64_RELATIVE  *ABS*+0x00000000003128a8
00000000003144f0 R_X86_64_RELATIVE  *ABS*+0x00000000000a2950
00000000003144f8 R_X86_64_RELATIVE  *ABS*+0x00000000000a2b70
0000000000314500 R_X86_64_RELATIVE  *ABS*+0x000000000007a9c0
0000000000314510 R_X86_64_RELATIVE  *ABS*+0x000000000007b460
0000000000314518 R_X86_64_RELATIVE  *ABS*+0x0000000000071640
0000000000314520 R_X86_64_RELATIVE  *ABS*+0x00000000000cdf30
0000000000314528 R_X86_64_RELATIVE  *ABS*+0x0000000000076370
0000000000314530 R_X86_64_RELATIVE  *ABS*+0x00000000000c4690
0000000000314538 R_X86_64_RELATIVE  *ABS*+0x00000000000b4840
0000000000314540 R_X86_64_RELATIVE  *ABS*+0x00000000000c1b80
0000000000314548 R_X86_64_RELATIVE  *ABS*+0x00000000000c9a30
0000000000314550 R_X86_64_RELATIVE  *ABS*+0x00000000000c56b0
0000000000314558 R_X86_64_RELATIVE  *ABS*+0x000000000007f6c0
0000000000314560 R_X86_64_RELATIVE  *ABS*+0x00000000000b5160
0000000000314568 R_X86_64_RELATIVE  *ABS*+0x000000000007f9e0
0000000000314570 R_X86_64_RELATIVE  *ABS*+0x00000000000b59d0
0000000000314578 R_X86_64_RELATIVE  *ABS*+0x00000000000c0a30
0000000000314580 R_X86_64_RELATIVE  *ABS*+0x0000000000077770
0000000000314588 R_X86_64_RELATIVE  *ABS*+0x0000000000075d30
0000000000314590 R_X86_64_RELATIVE  *ABS*+0x0000000000077a30
0000000000314598 R_X86_64_RELATIVE  *ABS*+0x0000000000077cf0
00000000003145a0 R_X86_64_RELATIVE  *ABS*+0x0000000000077fb0
00000000003145a8 R_X86_64_RELATIVE  *ABS*+0x0000000000078270
00000000003145b0 R_X86_64_RELATIVE  *ABS*+0x0000000000078730
00000000003145b8 R_X86_64_RELATIVE  *ABS*+0x00000000000a1f70
00000000003145c0 R_X86_64_RELATIVE  *ABS*+0x00000000000a2300
00000000003145c8 R_X86_64_RELATIVE  *ABS*+0x00000000000a2690
00000000003145d0 R_X86_64_RELATIVE  *ABS*+0x00000000000a4420
00000000003145d8 R_X86_64_RELATIVE  *ABS*+0x000000000007a400
00000000003145e0 R_X86_64_RELATIVE  *ABS*+0x000000000007a370
00000000003145e8 R_X86_64_RELATIVE  *ABS*+0x0000000000078530
00000000003145f0 R_X86_64_RELATIVE  *ABS*+0x0000000000075ff0
00000000003145f8 R_X86_64_RELATIVE  *ABS*+0x00000000000c72e0
0000000000314600 R_X86_64_RELATIVE  *ABS*+0x000000000007dea0
0000000000314608 R_X86_64_RELATIVE  *ABS*+0x00000000000bc320
0000000000314610 R_X86_64_RELATIVE  *ABS*+0x00000000000bd010
0000000000314618 R_X86_64_RELATIVE  *ABS*+0x0000000000083610
0000000000314620 R_X86_64_RELATIVE  *ABS*+0x0000000000083430
0000000000314628 R_X86_64_RELATIVE  *ABS*+0x000000000007e270
0000000000314630 R_X86_64_RELATIVE  *ABS*+0x0000000000090ee0
0000000000314638 R_X86_64_RELATIVE  *ABS*+0x00000000000c6d30
0000000000314640 R_X86_64_RELATIVE  *ABS*+0x0000000000081060
0000000000314648 R_X86_64_RELATIVE  *ABS*+0x00000000000836b0
0000000000314650 R_X86_64_RELATIVE  *ABS*+0x0000000000072170
0000000000314658 R_X86_64_RELATIVE  *ABS*+0x0000000000072190
0000000000314660 R_X86_64_RELATIVE  *ABS*+0x00000000000721b0
0000000000314668 R_X86_64_RELATIVE  *ABS*+0x00000000000721d0
0000000000314670 R_X86_64_RELATIVE  *ABS*+0x00000000000aff40
0000000000314678 R_X86_64_RELATIVE  *ABS*+0x00000000000afc50
0000000000314680 R_X86_64_RELATIVE  *ABS*+0x0000000000072200
0000000000314688 R_X86_64_RELATIVE  *ABS*+0x000000000007c2e0
0000000000314690 R_X86_64_RELATIVE  *ABS*+0x000000000007c350
0000000000314698 R_X86_64_RELATIVE  *ABS*+0x0000000000092ca0
00000000003146a0 R_X86_64_RELATIVE  *ABS*+0x000000000007d8e0
00000000003146a8 R_X86_64_RELATIVE  *ABS*+0x00000000000bd850
00000000003146b0 R_X86_64_RELATIVE  *ABS*+0x0000000000075660
00000000003146c0 R_X86_64_RELATIVE  *ABS*+0x00000000003128a8
00000000003146c8 R_X86_64_RELATIVE  *ABS*+0x00000000000a29e0
00000000003146d0 R_X86_64_RELATIVE  *ABS*+0x00000000000a2c10
00000000003146d8 R_X86_64_RELATIVE  *ABS*+0x00000000000bda80
00000000003146e0 R_X86_64_RELATIVE  *ABS*+0x0000000000075680
00000000003146f0 R_X86_64_RELATIVE  *ABS*+0x00000000003128f8
0000000000314708 R_X86_64_RELATIVE  *ABS*+0x0000000000082640
0000000000314720 R_X86_64_RELATIVE  *ABS*+0x0000000000086aa0
0000000000314748 R_X86_64_RELATIVE  *ABS*+0x0000000000084fa0
0000000000314760 R_X86_64_RELATIVE  *ABS*+0x0000000000312910
0000000000314768 R_X86_64_RELATIVE  *ABS*+0x0000000000087950
0000000000314770 R_X86_64_RELATIVE  *ABS*+0x0000000000087a90
0000000000314778 R_X86_64_RELATIVE  *ABS*+0x0000000000082640
0000000000314788 R_X86_64_RELATIVE  *ABS*+0x00000000000d1410
0000000000314790 R_X86_64_RELATIVE  *ABS*+0x0000000000086ae0
0000000000314798 R_X86_64_RELATIVE  *ABS*+0x0000000000073730
00000000003147a0 R_X86_64_RELATIVE  *ABS*+0x0000000000073740
00000000003147a8 R_X86_64_RELATIVE  *ABS*+0x0000000000073750
00000000003147b0 R_X86_64_RELATIVE  *ABS*+0x0000000000073760
00000000003147b8 R_X86_64_RELATIVE  *ABS*+0x0000000000085000
00000000003147c0 R_X86_64_RELATIVE  *ABS*+0x00000000000cc620
00000000003147d0 R_X86_64_RELATIVE  *ABS*+0x0000000000312928
00000000003147d8 R_X86_64_RELATIVE  *ABS*+0x00000000000a3b50
00000000003147e0 R_X86_64_RELATIVE  *ABS*+0x00000000000a3d70
00000000003147e8 R_X86_64_RELATIVE  *ABS*+0x000000000007a9c0
00000000003147f8 R_X86_64_RELATIVE  *ABS*+0x000000000007b460
0000000000314800 R_X86_64_RELATIVE  *ABS*+0x0000000000071640
0000000000314808 R_X86_64_RELATIVE  *ABS*+0x00000000000cc8e0
0000000000314810 R_X86_64_RELATIVE  *ABS*+0x0000000000076430
0000000000314818 R_X86_64_RELATIVE  *ABS*+0x0000000000093230
0000000000314820 R_X86_64_RELATIVE  *ABS*+0x00000000000b1e20
0000000000314828 R_X86_64_RELATIVE  *ABS*+0x00000000000c1850
0000000000314830 R_X86_64_RELATIVE  *ABS*+0x00000000000c8a10
0000000000314838 R_X86_64_RELATIVE  *ABS*+0x00000000000c5df0
0000000000314840 R_X86_64_RELATIVE  *ABS*+0x000000000007f850
0000000000314848 R_X86_64_RELATIVE  *ABS*+0x00000000000b2820
0000000000314850 R_X86_64_RELATIVE  *ABS*+0x000000000007fd00
0000000000314858 R_X86_64_RELATIVE  *ABS*+0x00000000000b3090
0000000000314860 R_X86_64_RELATIVE  *ABS*+0x00000000000bf0f0
0000000000314868 R_X86_64_RELATIVE  *ABS*+0x00000000000764f0
0000000000314870 R_X86_64_RELATIVE  *ABS*+0x0000000000076050
0000000000314878 R_X86_64_RELATIVE  *ABS*+0x00000000000767b0
0000000000314880 R_X86_64_RELATIVE  *ABS*+0x0000000000076a70
0000000000314888 R_X86_64_RELATIVE  *ABS*+0x0000000000076d30
0000000000314890 R_X86_64_RELATIVE  *ABS*+0x0000000000076ff0
0000000000314898 R_X86_64_RELATIVE  *ABS*+0x00000000000774b0
00000000003148a0 R_X86_64_RELATIVE  *ABS*+0x00000000000a3170
00000000003148a8 R_X86_64_RELATIVE  *ABS*+0x00000000000a3500
00000000003148b0 R_X86_64_RELATIVE  *ABS*+0x00000000000a3890
00000000003148b8 R_X86_64_RELATIVE  *ABS*+0x00000000000a5430
00000000003148c0 R_X86_64_RELATIVE  *ABS*+0x000000000007a2e0
00000000003148c8 R_X86_64_RELATIVE  *ABS*+0x000000000007a250
00000000003148d0 R_X86_64_RELATIVE  *ABS*+0x00000000000772b0
00000000003148d8 R_X86_64_RELATIVE  *ABS*+0x0000000000076310
00000000003148e0 R_X86_64_RELATIVE  *ABS*+0x00000000000c7cf0
00000000003148e8 R_X86_64_RELATIVE  *ABS*+0x000000000007dcb0
00000000003148f0 R_X86_64_RELATIVE  *ABS*+0x00000000000babe0
00000000003148f8 R_X86_64_RELATIVE  *ABS*+0x00000000000bf810
0000000000314900 R_X86_64_RELATIVE  *ABS*+0x00000000000834d0
0000000000314908 R_X86_64_RELATIVE  *ABS*+0x0000000000083570
0000000000314910 R_X86_64_RELATIVE  *ABS*+0x000000000007e090
0000000000314918 R_X86_64_RELATIVE  *ABS*+0x000000000007b430
0000000000314920 R_X86_64_RELATIVE  *ABS*+0x00000000000c7740
0000000000314928 R_X86_64_RELATIVE  *ABS*+0x000000000007ed10
0000000000314930 R_X86_64_RELATIVE  *ABS*+0x000000000007efd0
0000000000314938 R_X86_64_RELATIVE  *ABS*+0x000000000007a5b0
0000000000314940 R_X86_64_RELATIVE  *ABS*+0x000000000007a590
0000000000314948 R_X86_64_RELATIVE  *ABS*+0x000000000007a570
0000000000314950 R_X86_64_RELATIVE  *ABS*+0x000000000007a550
0000000000314958 R_X86_64_RELATIVE  *ABS*+0x00000000000af5a0
0000000000314960 R_X86_64_RELATIVE  *ABS*+0x00000000000af210
0000000000314968 R_X86_64_RELATIVE  *ABS*+0x0000000000072160
0000000000314970 R_X86_64_RELATIVE  *ABS*+0x000000000007c200
0000000000314978 R_X86_64_RELATIVE  *ABS*+0x000000000007c270
0000000000314980 R_X86_64_RELATIVE  *ABS*+0x0000000000090df0
0000000000314988 R_X86_64_RELATIVE  *ABS*+0x000000000007e630
0000000000314990 R_X86_64_RELATIVE  *ABS*+0x00000000000bbb60
0000000000314998 R_X86_64_RELATIVE  *ABS*+0x0000000000075630
00000000003149a8 R_X86_64_RELATIVE  *ABS*+0x0000000000312928
00000000003149b0 R_X86_64_RELATIVE  *ABS*+0x00000000000a3be0
00000000003149b8 R_X86_64_RELATIVE  *ABS*+0x00000000000a3e10
00000000003149c0 R_X86_64_RELATIVE  *ABS*+0x00000000000bbd90
00000000003149c8 R_X86_64_RELATIVE  *ABS*+0x0000000000075650
00000000003149d8 R_X86_64_RELATIVE  *ABS*+0x0000000000312ad0
0000000000314a10 R_X86_64_RELATIVE  *ABS*+0x0000000000312b10
0000000000314a48 R_X86_64_RELATIVE  *ABS*+0x0000000000312b50
0000000000314a50 R_X86_64_RELATIVE  *ABS*+0x000000000007a6f0
0000000000314a58 R_X86_64_RELATIVE  *ABS*+0x000000000007a710
0000000000314a68 R_X86_64_RELATIVE  *ABS*+0x0000000000312b68
0000000000314a70 R_X86_64_RELATIVE  *ABS*+0x0000000000071e20
0000000000314a78 R_X86_64_RELATIVE  *ABS*+0x0000000000074840
0000000000314a80 R_X86_64_RELATIVE  *ABS*+0x00000000000ba4b0
0000000000314a88 R_X86_64_RELATIVE  *ABS*+0x00000000000aec90
0000000000314a90 R_X86_64_RELATIVE  *ABS*+0x000000000007f390
0000000000314aa0 R_X86_64_RELATIVE  *ABS*+0x0000000000312b80
0000000000314aa8 R_X86_64_RELATIVE  *ABS*+0x0000000000073c10
0000000000314ab0 R_X86_64_RELATIVE  *ABS*+0x000000000007e910
0000000000314ab8 R_X86_64_RELATIVE  *ABS*+0x0000000000080a10
0000000000314ac0 R_X86_64_RELATIVE  *ABS*+0x0000000000081cb0
0000000000314ac8 R_X86_64_RELATIVE  *ABS*+0x000000000007a0b0
0000000000314ad0 R_X86_64_RELATIVE  *ABS*+0x000000000007d0e0
0000000000314ae0 R_X86_64_RELATIVE  *ABS*+0x0000000000312b98
0000000000314ae8 R_X86_64_RELATIVE  *ABS*+0x0000000000073c90
0000000000314af0 R_X86_64_RELATIVE  *ABS*+0x000000000007ec90
0000000000314af8 R_X86_64_RELATIVE  *ABS*+0x0000000000080cf0
0000000000314b00 R_X86_64_RELATIVE  *ABS*+0x0000000000081650
0000000000314b08 R_X86_64_RELATIVE  *ABS*+0x000000000007a090
0000000000314b10 R_X86_64_RELATIVE  *ABS*+0x000000000007d5e0
0000000000314b20 R_X86_64_RELATIVE  *ABS*+0x0000000000312bb0
0000000000314b28 R_X86_64_RELATIVE  *ABS*+0x0000000000073d10
0000000000314b30 R_X86_64_RELATIVE  *ABS*+0x000000000007ea90
0000000000314b38 R_X86_64_RELATIVE  *ABS*+0x000000000007fe90
0000000000314b40 R_X86_64_RELATIVE  *ABS*+0x0000000000081320
0000000000314b48 R_X86_64_RELATIVE  *ABS*+0x000000000007a070
0000000000314b50 R_X86_64_RELATIVE  *ABS*+0x000000000007d4e0
0000000000314b60 R_X86_64_RELATIVE  *ABS*+0x0000000000312bc8
0000000000314b68 R_X86_64_RELATIVE  *ABS*+0x000000000007a690
0000000000314b70 R_X86_64_RELATIVE  *ABS*+0x000000000007a6b0
0000000000314b80 R_X86_64_RELATIVE  *ABS*+0x0000000000312be0
0000000000314b88 R_X86_64_RELATIVE  *ABS*+0x0000000000071e50
0000000000314b90 R_X86_64_RELATIVE  *ABS*+0x0000000000074850
0000000000314b98 R_X86_64_RELATIVE  *ABS*+0x00000000000b9d90
0000000000314ba0 R_X86_64_RELATIVE  *ABS*+0x00000000000ae9c0
0000000000314ba8 R_X86_64_RELATIVE  *ABS*+0x000000000007f290
0000000000314bb8 R_X86_64_RELATIVE  *ABS*+0x0000000000312bf8
0000000000314bc0 R_X86_64_RELATIVE  *ABS*+0x0000000000073d90
0000000000314bc8 R_X86_64_RELATIVE  *ABS*+0x000000000007eb10
0000000000314bd0 R_X86_64_RELATIVE  *ABS*+0x0000000000080170
0000000000314bd8 R_X86_64_RELATIVE  *ABS*+0x0000000000081980
0000000000314be0 R_X86_64_RELATIVE  *ABS*+0x000000000007a050
0000000000314be8 R_X86_64_RELATIVE  *ABS*+0x000000000007d3e0
0000000000314bf8 R_X86_64_RELATIVE  *ABS*+0x0000000000312c10
0000000000314c00 R_X86_64_RELATIVE  *ABS*+0x0000000000073e10
0000000000314c08 R_X86_64_RELATIVE  *ABS*+0x000000000007e990
0000000000314c10 R_X86_64_RELATIVE  *ABS*+0x0000000000080450
0000000000314c18 R_X86_64_RELATIVE  *ABS*+0x0000000000081fe0
0000000000314c20 R_X86_64_RELATIVE  *ABS*+0x000000000007a030
0000000000314c28 R_X86_64_RELATIVE  *ABS*+0x000000000007d2e0
0000000000314c38 R_X86_64_RELATIVE  *ABS*+0x0000000000312c28
0000000000314c40 R_X86_64_RELATIVE  *ABS*+0x0000000000073e90
0000000000314c48 R_X86_64_RELATIVE  *ABS*+0x000000000007eb90
0000000000314c50 R_X86_64_RELATIVE  *ABS*+0x0000000000080730
0000000000314c58 R_X86_64_RELATIVE  *ABS*+0x0000000000082310
0000000000314c60 R_X86_64_RELATIVE  *ABS*+0x000000000007a010
0000000000314c68 R_X86_64_RELATIVE  *ABS*+0x000000000007d1e0
0000000000314c78 R_X86_64_RELATIVE  *ABS*+0x00000000000f5ce0
0000000000314c80 R_X86_64_RELATIVE  *ABS*+0x0000000000312418
0000000000314c90 R_X86_64_RELATIVE  *ABS*+0x00000000000f5d20
0000000000314c98 R_X86_64_RELATIVE  *ABS*+0x0000000000310f10
0000000000314ca8 R_X86_64_RELATIVE  *ABS*+0x0000000000314c70
0000000000314cb0 R_X86_64_RELATIVE  *ABS*+0x00000000000ded80
0000000000314cb8 R_X86_64_RELATIVE  *ABS*+0x00000000000dec30
0000000000314cc0 R_X86_64_RELATIVE  *ABS*+0x0000000000082640
0000000000314cd0 R_X86_64_RELATIVE  *ABS*+0x00000000000e28e0
0000000000314cd8 R_X86_64_RELATIVE  *ABS*+0x00000000000718e0
0000000000314ce0 R_X86_64_RELATIVE  *ABS*+0x00000000000d5250
0000000000314ce8 R_X86_64_RELATIVE  *ABS*+0x00000000000d5280
0000000000314cf0 R_X86_64_RELATIVE  *ABS*+0x00000000000d5290
0000000000314cf8 R_X86_64_RELATIVE  *ABS*+0x00000000000d52a0
0000000000314d00 R_X86_64_RELATIVE  *ABS*+0x0000000000084fe0
0000000000314d08 R_X86_64_RELATIVE  *ABS*+0x00000000000e2070
0000000000314d18 R_X86_64_RELATIVE  *ABS*+0x0000000000314c88
0000000000314d20 R_X86_64_RELATIVE  *ABS*+0x00000000000d6680
0000000000314d28 R_X86_64_RELATIVE  *ABS*+0x00000000000d5570
0000000000314d30 R_X86_64_RELATIVE  *ABS*+0x00000000000d5260
0000000000314d38 R_X86_64_RELATIVE  *ABS*+0x00000000000d5da0
0000000000314d40 R_X86_64_RELATIVE  *ABS*+0x00000000000d5e20
0000000000314d48 R_X86_64_RELATIVE  *ABS*+0x00000000000df4c0
0000000000314d58 R_X86_64_RELATIVE  *ABS*+0x00000000000f5d60
0000000000314d60 R_X86_64_RELATIVE  *ABS*+0x0000000000312538
0000000000314d70 R_X86_64_RELATIVE  *ABS*+0x00000000000f5da0
0000000000314d78 R_X86_64_RELATIVE  *ABS*+0x0000000000312548
0000000000314d88 R_X86_64_RELATIVE  *ABS*+0x00000000000f5de0
0000000000314d90 R_X86_64_RELATIVE  *ABS*+0x00000000003124a0
0000000000314da0 R_X86_64_RELATIVE  *ABS*+0x00000000000f5e00
0000000000314da8 R_X86_64_RELATIVE  *ABS*+0x0000000000314d80
0000000000314db8 R_X86_64_RELATIVE  *ABS*+0x00000000000f5e40
0000000000314dc0 R_X86_64_RELATIVE  *ABS*+0x0000000000314d80
0000000000314dd0 R_X86_64_RELATIVE  *ABS*+0x00000000000f5e80
0000000000314dd8 R_X86_64_RELATIVE  *ABS*+0x0000000000314d80
0000000000314de8 R_X86_64_RELATIVE  *ABS*+0x00000000000f5ee0
0000000000314df0 R_X86_64_RELATIVE  *ABS*+0x0000000000312680
0000000000314e00 R_X86_64_RELATIVE  *ABS*+0x00000000000f5f40
0000000000314e08 R_X86_64_RELATIVE  *ABS*+0x0000000000312670
0000000000314e18 R_X86_64_RELATIVE  *ABS*+0x00000000000f5fa0
0000000000314e28 R_X86_64_RELATIVE  *ABS*+0x00000000000f6020
0000000000314e38 R_X86_64_RELATIVE  *ABS*+0x00000000000f60a0
0000000000314e40 R_X86_64_RELATIVE  *ABS*+0x00000000003125f8
0000000000314e50 R_X86_64_RELATIVE  *ABS*+0x00000000000f60e0
0000000000314e68 R_X86_64_RELATIVE  *ABS*+0x00000000000f6160
0000000000314e70 R_X86_64_RELATIVE  *ABS*+0x00000000003125f8
0000000000314e80 R_X86_64_RELATIVE  *ABS*+0x00000000000f61a0
0000000000314e90 R_X86_64_RELATIVE  *ABS*+0x00000000000f6280
0000000000314ea0 R_X86_64_RELATIVE  *ABS*+0x00000000000f6360
0000000000314eb0 R_X86_64_RELATIVE  *ABS*+0x00000000000f6440
0000000000314ec0 R_X86_64_RELATIVE  *ABS*+0x00000000000f6520
0000000000314ed0 R_X86_64_RELATIVE  *ABS*+0x00000000000f65c0
0000000000314ee0 R_X86_64_RELATIVE  *ABS*+0x00000000000f66c0
0000000000314ee8 R_X86_64_RELATIVE  *ABS*+0x0000000000311f48
0000000000314ef8 R_X86_64_RELATIVE  *ABS*+0x00000000000f6740
0000000000314f08 R_X86_64_RELATIVE  *ABS*+0x0000000000314d50
0000000000314f10 R_X86_64_RELATIVE  *ABS*+0x00000000000d5020
0000000000314f18 R_X86_64_RELATIVE  *ABS*+0x00000000000d6a60
0000000000314f20 R_X86_64_RELATIVE  *ABS*+0x00000000000d8640
0000000000314f28 R_X86_64_RELATIVE  *ABS*+0x00000000000d88e0
0000000000314f30 R_X86_64_RELATIVE  *ABS*+0x00000000000d57f0
0000000000314f40 R_X86_64_RELATIVE  *ABS*+0x0000000000314d68
0000000000314f48 R_X86_64_RELATIVE  *ABS*+0x00000000000d4f10
0000000000314f50 R_X86_64_RELATIVE  *ABS*+0x00000000000d54f0
0000000000314f60 R_X86_64_RELATIVE  *ABS*+0x0000000000314d80
0000000000314f68 R_X86_64_RELATIVE  *ABS*+0x00000000000d7710
0000000000314f70 R_X86_64_RELATIVE  *ABS*+0x00000000000d7820
0000000000314f78 R_X86_64_RELATIVE  *ABS*+0x000000000007a9c0
0000000000314f88 R_X86_64_RELATIVE  *ABS*+0x000000000007b460
0000000000314f90 R_X86_64_RELATIVE  *ABS*+0x0000000000071640
0000000000314f98 R_X86_64_RELATIVE  *ABS*+0x00000000000e08d0
0000000000314fa0 R_X86_64_RELATIVE  *ABS*+0x00000000000de2d0
0000000000314fa8 R_X86_64_RELATIVE  *ABS*+0x00000000000c4350
0000000000314fb0 R_X86_64_RELATIVE  *ABS*+0x00000000000d8490
0000000000314fb8 R_X86_64_RELATIVE  *ABS*+0x00000000000df350
0000000000314fc0 R_X86_64_RELATIVE  *ABS*+0x00000000000d51f0
0000000000314fc8 R_X86_64_RELATIVE  *ABS*+0x00000000000d5210
0000000000314fd0 R_X86_64_RELATIVE  *ABS*+0x00000000000dbbd0
0000000000314fd8 R_X86_64_RELATIVE  *ABS*+0x00000000000de5e0
0000000000314fe0 R_X86_64_RELATIVE  *ABS*+0x0000000000072460
0000000000314fe8 R_X86_64_RELATIVE  *ABS*+0x0000000000072470
0000000000314ff0 R_X86_64_RELATIVE  *ABS*+0x00000000000e18b0
0000000000314ff8 R_X86_64_RELATIVE  *ABS*+0x00000000000718a0
0000000000315000 R_X86_64_RELATIVE  *ABS*+0x0000000000071a60
0000000000315008 R_X86_64_RELATIVE  *ABS*+0x0000000000072480
0000000000315010 R_X86_64_RELATIVE  *ABS*+0x00000000000724a0
0000000000315018 R_X86_64_RELATIVE  *ABS*+0x00000000000724c0
0000000000315020 R_X86_64_RELATIVE  *ABS*+0x00000000000724e0
0000000000315028 R_X86_64_RELATIVE  *ABS*+0x0000000000072500
0000000000315030 R_X86_64_RELATIVE  *ABS*+0x00000000000dadc0
0000000000315038 R_X86_64_RELATIVE  *ABS*+0x00000000000db4d0
0000000000315040 R_X86_64_RELATIVE  *ABS*+0x00000000000dcc40
0000000000315048 R_X86_64_RELATIVE  *ABS*+0x00000000000d6700
0000000000315050 R_X86_64_RELATIVE  *ABS*+0x00000000000d58a0
0000000000315058 R_X86_64_RELATIVE  *ABS*+0x00000000000d5830
0000000000315060 R_X86_64_RELATIVE  *ABS*+0x00000000000d5670
0000000000315068 R_X86_64_RELATIVE  *ABS*+0x00000000000d5740
0000000000315070 R_X86_64_RELATIVE  *ABS*+0x0000000000071980
0000000000315078 R_X86_64_RELATIVE  *ABS*+0x00000000000d5f10
0000000000315080 R_X86_64_RELATIVE  *ABS*+0x00000000000dba70
0000000000315088 R_X86_64_RELATIVE  *ABS*+0x00000000000d5fd0
0000000000315090 R_X86_64_RELATIVE  *ABS*+0x00000000000de4f0
0000000000315098 R_X86_64_RELATIVE  *ABS*+0x00000000000d5780
00000000003150a0 R_X86_64_RELATIVE  *ABS*+0x0000000000074e70
00000000003150a8 R_X86_64_RELATIVE  *ABS*+0x00000000000df630
00000000003150b0 R_X86_64_RELATIVE  *ABS*+0x00000000000dfce0
00000000003150b8 R_X86_64_RELATIVE  *ABS*+0x00000000000dec10
00000000003150c0 R_X86_64_RELATIVE  *ABS*+0x00000000000debf0
00000000003150c8 R_X86_64_RELATIVE  *ABS*+0x0000000000072400
00000000003150d0 R_X86_64_RELATIVE  *ABS*+0x0000000000072410
00000000003150d8 R_X86_64_RELATIVE  *ABS*+0x0000000000072420
00000000003150e0 R_X86_64_RELATIVE  *ABS*+0x0000000000072430
00000000003150e8 R_X86_64_RELATIVE  *ABS*+0x0000000000079dd0
00000000003150f0 R_X86_64_RELATIVE  *ABS*+0x0000000000079d70
00000000003150f8 R_X86_64_RELATIVE  *ABS*+0x0000000000072450
0000000000315100 R_X86_64_RELATIVE  *ABS*+0x000000000007c3c0
0000000000315108 R_X86_64_RELATIVE  *ABS*+0x000000000007c430
0000000000315110 R_X86_64_RELATIVE  *ABS*+0x0000000000092d90
0000000000315118 R_X86_64_RELATIVE  *ABS*+0x000000000007e760
0000000000315120 R_X86_64_RELATIVE  *ABS*+0x00000000000e0190
0000000000315128 R_X86_64_RELATIVE  *ABS*+0x00000000000d5230
0000000000315130 R_X86_64_RELATIVE  *ABS*+0x00000000000e23e0
0000000000315138 R_X86_64_RELATIVE  *ABS*+0x00000000000dffa0
0000000000315140 R_X86_64_RELATIVE  *ABS*+0x00000000000d7150
0000000000315148 R_X86_64_RELATIVE  *ABS*+0x00000000000e0f90
0000000000315150 R_X86_64_RELATIVE  *ABS*+0x00000000000d5240
0000000000315158 R_X86_64_RELATIVE  *ABS*+0x00000000000d52b0
0000000000315160 R_X86_64_RELATIVE  *ABS*+0x00000000000d5370
0000000000315168 R_X86_64_RELATIVE  *ABS*+0x00000000000d5300
0000000000315178 R_X86_64_RELATIVE  *ABS*+0x0000000000314db0
0000000000315180 R_X86_64_RELATIVE  *ABS*+0x00000000000d7850
0000000000315188 R_X86_64_RELATIVE  *ABS*+0x00000000000d7870
0000000000315190 R_X86_64_RELATIVE  *ABS*+0x000000000007a9c0
00000000003151a0 R_X86_64_RELATIVE  *ABS*+0x000000000007b460
00000000003151a8 R_X86_64_RELATIVE  *ABS*+0x0000000000071640
00000000003151b0 R_X86_64_RELATIVE  *ABS*+0x00000000000e08d0
00000000003151b8 R_X86_64_RELATIVE  *ABS*+0x00000000000de2d0
00000000003151c0 R_X86_64_RELATIVE  *ABS*+0x00000000000c4350
00000000003151c8 R_X86_64_RELATIVE  *ABS*+0x00000000000d8490
00000000003151d0 R_X86_64_RELATIVE  *ABS*+0x00000000000df350
00000000003151d8 R_X86_64_RELATIVE  *ABS*+0x00000000000d51f0
00000000003151e0 R_X86_64_RELATIVE  *ABS*+0x00000000000d5210
00000000003151e8 R_X86_64_RELATIVE  *ABS*+0x00000000000dbbd0
00000000003151f0 R_X86_64_RELATIVE  *ABS*+0x00000000000de5e0
00000000003151f8 R_X86_64_RELATIVE  *ABS*+0x0000000000072460
0000000000315200 R_X86_64_RELATIVE  *ABS*+0x0000000000072470
0000000000315208 R_X86_64_RELATIVE  *ABS*+0x00000000000e18b0
0000000000315210 R_X86_64_RELATIVE  *ABS*+0x00000000000718a0
0000000000315218 R_X86_64_RELATIVE  *ABS*+0x0000000000071a60
0000000000315220 R_X86_64_RELATIVE  *ABS*+0x0000000000072480
0000000000315228 R_X86_64_RELATIVE  *ABS*+0x00000000000724a0
0000000000315230 R_X86_64_RELATIVE  *ABS*+0x00000000000724c0
0000000000315238 R_X86_64_RELATIVE  *ABS*+0x00000000000724e0
0000000000315240 R_X86_64_RELATIVE  *ABS*+0x0000000000072500
0000000000315248 R_X86_64_RELATIVE  *ABS*+0x00000000000dadc0
0000000000315250 R_X86_64_RELATIVE  *ABS*+0x00000000000db4d0
0000000000315258 R_X86_64_RELATIVE  *ABS*+0x00000000000dcc40
0000000000315260 R_X86_64_RELATIVE  *ABS*+0x00000000000d6700
0000000000315268 R_X86_64_RELATIVE  *ABS*+0x00000000000d58a0
0000000000315270 R_X86_64_RELATIVE  *ABS*+0x00000000000d5830
0000000000315278 R_X86_64_RELATIVE  *ABS*+0x00000000000d5670
0000000000315280 R_X86_64_RELATIVE  *ABS*+0x00000000000d5740
0000000000315288 R_X86_64_RELATIVE  *ABS*+0x0000000000071980
0000000000315290 R_X86_64_RELATIVE  *ABS*+0x00000000000d5f10
0000000000315298 R_X86_64_RELATIVE  *ABS*+0x00000000000dba70
00000000003152a0 R_X86_64_RELATIVE  *ABS*+0x00000000000d5fd0
00000000003152a8 R_X86_64_RELATIVE  *ABS*+0x00000000000de4f0
00000000003152b0 R_X86_64_RELATIVE  *ABS*+0x00000000000d5780
00000000003152b8 R_X86_64_RELATIVE  *ABS*+0x0000000000074e70
00000000003152c0 R_X86_64_RELATIVE  *ABS*+0x00000000000df630
00000000003152c8 R_X86_64_RELATIVE  *ABS*+0x00000000000dfce0
00000000003152d0 R_X86_64_RELATIVE  *ABS*+0x00000000000dec10
00000000003152d8 R_X86_64_RELATIVE  *ABS*+0x00000000000debf0
00000000003152e0 R_X86_64_RELATIVE  *ABS*+0x0000000000072400
00000000003152e8 R_X86_64_RELATIVE  *ABS*+0x0000000000072410
00000000003152f0 R_X86_64_RELATIVE  *ABS*+0x0000000000072420
00000000003152f8 R_X86_64_RELATIVE  *ABS*+0x0000000000072430
0000000000315300 R_X86_64_RELATIVE  *ABS*+0x0000000000079dd0
0000000000315308 R_X86_64_RELATIVE  *ABS*+0x0000000000079d70
0000000000315310 R_X86_64_RELATIVE  *ABS*+0x0000000000072450
0000000000315318 R_X86_64_RELATIVE  *ABS*+0x000000000007c3c0
0000000000315320 R_X86_64_RELATIVE  *ABS*+0x000000000007c430
0000000000315328 R_X86_64_RELATIVE  *ABS*+0x0000000000092d90
0000000000315330 R_X86_64_RELATIVE  *ABS*+0x000000000007e760
0000000000315338 R_X86_64_RELATIVE  *ABS*+0x00000000000e0190
0000000000315340 R_X86_64_RELATIVE  *ABS*+0x00000000000d5230
0000000000315348 R_X86_64_RELATIVE  *ABS*+0x00000000000e23e0
0000000000315350 R_X86_64_RELATIVE  *ABS*+0x00000000000dffa0
0000000000315358 R_X86_64_RELATIVE  *ABS*+0x00000000000d7150
0000000000315360 R_X86_64_RELATIVE  *ABS*+0x00000000000e0f90
0000000000315368 R_X86_64_RELATIVE  *ABS*+0x00000000000d5240
0000000000315370 R_X86_64_RELATIVE  *ABS*+0x00000000000d52b0
0000000000315378 R_X86_64_RELATIVE  *ABS*+0x00000000000d5370
0000000000315380 R_X86_64_RELATIVE  *ABS*+0x00000000000d5300
0000000000315390 R_X86_64_RELATIVE  *ABS*+0x0000000000314dc8
0000000000315398 R_X86_64_RELATIVE  *ABS*+0x00000000000d78b0
00000000003153a0 R_X86_64_RELATIVE  *ABS*+0x00000000000d7950
00000000003153a8 R_X86_64_RELATIVE  *ABS*+0x000000000007a9c0
00000000003153b8 R_X86_64_RELATIVE  *ABS*+0x000000000007b460
00000000003153c0 R_X86_64_RELATIVE  *ABS*+0x0000000000071640
00000000003153c8 R_X86_64_RELATIVE  *ABS*+0x00000000000e08d0
00000000003153d0 R_X86_64_RELATIVE  *ABS*+0x00000000000de2d0
00000000003153d8 R_X86_64_RELATIVE  *ABS*+0x00000000000c4350
00000000003153e0 R_X86_64_RELATIVE  *ABS*+0x00000000000d8490
00000000003153e8 R_X86_64_RELATIVE  *ABS*+0x00000000000df350
00000000003153f0 R_X86_64_RELATIVE  *ABS*+0x00000000000d51f0
00000000003153f8 R_X86_64_RELATIVE  *ABS*+0x00000000000d5210
0000000000315400 R_X86_64_RELATIVE  *ABS*+0x00000000000dbbd0
0000000000315408 R_X86_64_RELATIVE  *ABS*+0x00000000000de5e0
0000000000315410 R_X86_64_RELATIVE  *ABS*+0x0000000000072460
0000000000315418 R_X86_64_RELATIVE  *ABS*+0x0000000000072470
0000000000315420 R_X86_64_RELATIVE  *ABS*+0x00000000000e18b0
0000000000315428 R_X86_64_RELATIVE  *ABS*+0x00000000000718a0
0000000000315430 R_X86_64_RELATIVE  *ABS*+0x0000000000071a60
0000000000315438 R_X86_64_RELATIVE  *ABS*+0x0000000000072480
0000000000315440 R_X86_64_RELATIVE  *ABS*+0x00000000000724a0
0000000000315448 R_X86_64_RELATIVE  *ABS*+0x00000000000724c0
0000000000315450 R_X86_64_RELATIVE  *ABS*+0x00000000000724e0
0000000000315458 R_X86_64_RELATIVE  *ABS*+0x0000000000072500
0000000000315460 R_X86_64_RELATIVE  *ABS*+0x00000000000dadc0
0000000000315468 R_X86_64_RELATIVE  *ABS*+0x00000000000db4d0
0000000000315470 R_X86_64_RELATIVE  *ABS*+0x00000000000dcc40
0000000000315478 R_X86_64_RELATIVE  *ABS*+0x00000000000d6700
0000000000315480 R_X86_64_RELATIVE  *ABS*+0x00000000000d58a0
0000000000315488 R_X86_64_RELATIVE  *ABS*+0x00000000000d5830
0000000000315490 R_X86_64_RELATIVE  *ABS*+0x00000000000d5670
0000000000315498 R_X86_64_RELATIVE  *ABS*+0x00000000000d5740
00000000003154a0 R_X86_64_RELATIVE  *ABS*+0x0000000000071980
00000000003154a8 R_X86_64_RELATIVE  *ABS*+0x00000000000d5f10
00000000003154b0 R_X86_64_RELATIVE  *ABS*+0x00000000000dba70
00000000003154b8 R_X86_64_RELATIVE  *ABS*+0x00000000000d5fd0
00000000003154c0 R_X86_64_RELATIVE  *ABS*+0x00000000000de4f0
00000000003154c8 R_X86_64_RELATIVE  *ABS*+0x00000000000d5780
00000000003154d0 R_X86_64_RELATIVE  *ABS*+0x0000000000074e70
00000000003154d8 R_X86_64_RELATIVE  *ABS*+0x00000000000df630
00000000003154e0 R_X86_64_RELATIVE  *ABS*+0x00000000000dfce0
00000000003154e8 R_X86_64_RELATIVE  *ABS*+0x00000000000dec10
00000000003154f0 R_X86_64_RELATIVE  *ABS*+0x00000000000debf0
00000000003154f8 R_X86_64_RELATIVE  *ABS*+0x0000000000072400
0000000000315500 R_X86_64_RELATIVE  *ABS*+0x0000000000072410
0000000000315508 R_X86_64_RELATIVE  *ABS*+0x0000000000072420
0000000000315510 R_X86_64_RELATIVE  *ABS*+0x0000000000072430
0000000000315518 R_X86_64_RELATIVE  *ABS*+0x0000000000079dd0
0000000000315520 R_X86_64_RELATIVE  *ABS*+0x0000000000079d70
0000000000315528 R_X86_64_RELATIVE  *ABS*+0x0000000000072450
0000000000315530 R_X86_64_RELATIVE  *ABS*+0x000000000007c3c0
0000000000315538 R_X86_64_RELATIVE  *ABS*+0x000000000007c430
0000000000315540 R_X86_64_RELATIVE  *ABS*+0x0000000000092d90
0000000000315548 R_X86_64_RELATIVE  *ABS*+0x000000000007e760
0000000000315550 R_X86_64_RELATIVE  *ABS*+0x00000000000e0190
0000000000315558 R_X86_64_RELATIVE  *ABS*+0x00000000000d5230
0000000000315560 R_X86_64_RELATIVE  *ABS*+0x00000000000e23e0
0000000000315568 R_X86_64_RELATIVE  *ABS*+0x00000000000dffa0
0000000000315570 R_X86_64_RELATIVE  *ABS*+0x00000000000d7150
0000000000315578 R_X86_64_RELATIVE  *ABS*+0x00000000000e0f90
0000000000315580 R_X86_64_RELATIVE  *ABS*+0x00000000000d5240
0000000000315588 R_X86_64_RELATIVE  *ABS*+0x00000000000d52b0
0000000000315590 R_X86_64_RELATIVE  *ABS*+0x00000000000d5370
0000000000315598 R_X86_64_RELATIVE  *ABS*+0x00000000000d5300
00000000003155a8 R_X86_64_RELATIVE  *ABS*+0x0000000000314d98
00000000003155b0 R_X86_64_RELATIVE  *ABS*+0x00000000000d78f0
00000000003155b8 R_X86_64_RELATIVE  *ABS*+0x00000000000d7910
00000000003155c0 R_X86_64_RELATIVE  *ABS*+0x000000000007a9c0
00000000003155d0 R_X86_64_RELATIVE  *ABS*+0x000000000007b460
00000000003155d8 R_X86_64_RELATIVE  *ABS*+0x0000000000071640
00000000003155e0 R_X86_64_RELATIVE  *ABS*+0x00000000000e08d0
00000000003155e8 R_X86_64_RELATIVE  *ABS*+0x00000000000de2d0
00000000003155f0 R_X86_64_RELATIVE  *ABS*+0x00000000000c4350
00000000003155f8 R_X86_64_RELATIVE  *ABS*+0x00000000000d8490
0000000000315600 R_X86_64_RELATIVE  *ABS*+0x00000000000df350
0000000000315608 R_X86_64_RELATIVE  *ABS*+0x00000000000d51f0
0000000000315610 R_X86_64_RELATIVE  *ABS*+0x00000000000d5210
0000000000315618 R_X86_64_RELATIVE  *ABS*+0x00000000000dbbd0
0000000000315620 R_X86_64_RELATIVE  *ABS*+0x00000000000de5e0
0000000000315628 R_X86_64_RELATIVE  *ABS*+0x0000000000072460
0000000000315630 R_X86_64_RELATIVE  *ABS*+0x0000000000072470
0000000000315638 R_X86_64_RELATIVE  *ABS*+0x00000000000e18b0
0000000000315640 R_X86_64_RELATIVE  *ABS*+0x00000000000718a0
0000000000315648 R_X86_64_RELATIVE  *ABS*+0x0000000000071a60
0000000000315650 R_X86_64_RELATIVE  *ABS*+0x0000000000072480
0000000000315658 R_X86_64_RELATIVE  *ABS*+0x00000000000724a0
0000000000315660 R_X86_64_RELATIVE  *ABS*+0x00000000000724c0
0000000000315668 R_X86_64_RELATIVE  *ABS*+0x00000000000724e0
0000000000315670 R_X86_64_RELATIVE  *ABS*+0x0000000000072500
0000000000315678 R_X86_64_RELATIVE  *ABS*+0x00000000000dadc0
0000000000315680 R_X86_64_RELATIVE  *ABS*+0x00000000000db4d0
0000000000315688 R_X86_64_RELATIVE  *ABS*+0x00000000000dcc40
0000000000315690 R_X86_64_RELATIVE  *ABS*+0x00000000000d6700
0000000000315698 R_X86_64_RELATIVE  *ABS*+0x00000000000d58a0
00000000003156a0 R_X86_64_RELATIVE  *ABS*+0x00000000000d5830
00000000003156a8 R_X86_64_RELATIVE  *ABS*+0x00000000000d5670
00000000003156b0 R_X86_64_RELATIVE  *ABS*+0x00000000000d5740
00000000003156b8 R_X86_64_RELATIVE  *ABS*+0x0000000000071980
00000000003156c0 R_X86_64_RELATIVE  *ABS*+0x00000000000d5f10
00000000003156c8 R_X86_64_RELATIVE  *ABS*+0x00000000000dba70
00000000003156d0 R_X86_64_RELATIVE  *ABS*+0x00000000000d5fd0
00000000003156d8 R_X86_64_RELATIVE  *ABS*+0x00000000000de4f0
00000000003156e0 R_X86_64_RELATIVE  *ABS*+0x00000000000d5780
00000000003156e8 R_X86_64_RELATIVE  *ABS*+0x0000000000074e70
00000000003156f0 R_X86_64_RELATIVE  *ABS*+0x00000000000df630
00000000003156f8 R_X86_64_RELATIVE  *ABS*+0x00000000000dfce0
0000000000315700 R_X86_64_RELATIVE  *ABS*+0x00000000000dec10
0000000000315708 R_X86_64_RELATIVE  *ABS*+0x00000000000debf0
0000000000315710 R_X86_64_RELATIVE  *ABS*+0x0000000000072400
0000000000315718 R_X86_64_RELATIVE  *ABS*+0x0000000000072410
0000000000315720 R_X86_64_RELATIVE  *ABS*+0x0000000000072420
0000000000315728 R_X86_64_RELATIVE  *ABS*+0x0000000000072430
0000000000315730 R_X86_64_RELATIVE  *ABS*+0x0000000000079dd0
0000000000315738 R_X86_64_RELATIVE  *ABS*+0x0000000000079d70
0000000000315740 R_X86_64_RELATIVE  *ABS*+0x0000000000072450
0000000000315748 R_X86_64_RELATIVE  *ABS*+0x000000000007c3c0
0000000000315750 R_X86_64_RELATIVE  *ABS*+0x000000000007c430
0000000000315758 R_X86_64_RELATIVE  *ABS*+0x0000000000092d90
0000000000315760 R_X86_64_RELATIVE  *ABS*+0x000000000007e760
0000000000315768 R_X86_64_RELATIVE  *ABS*+0x00000000000e0190
0000000000315770 R_X86_64_RELATIVE  *ABS*+0x00000000000d5230
0000000000315778 R_X86_64_RELATIVE  *ABS*+0x00000000000e23e0
0000000000315780 R_X86_64_RELATIVE  *ABS*+0x00000000000dffa0
0000000000315788 R_X86_64_RELATIVE  *ABS*+0x00000000000d7150
0000000000315790 R_X86_64_RELATIVE  *ABS*+0x00000000000e0f90
0000000000315798 R_X86_64_RELATIVE  *ABS*+0x00000000000d5240
00000000003157a0 R_X86_64_RELATIVE  *ABS*+0x00000000000d52b0
00000000003157a8 R_X86_64_RELATIVE  *ABS*+0x00000000000d8ab0
00000000003157b0 R_X86_64_RELATIVE  *ABS*+0x00000000000d5300
00000000003157c0 R_X86_64_RELATIVE  *ABS*+0x0000000000310f98
00000000003157c8 R_X86_64_RELATIVE  *ABS*+0x00000000000d64e0
00000000003157d0 R_X86_64_RELATIVE  *ABS*+0x00000000000d6410
00000000003157d8 R_X86_64_RELATIVE  *ABS*+0x00000000000d6290
00000000003157e0 R_X86_64_RELATIVE  *ABS*+0x00000000000d51d0
00000000003157e8 R_X86_64_RELATIVE  *ABS*+0x00000000000da900
00000000003157f0 R_X86_64_RELATIVE  *ABS*+0x00000000000da960
0000000000315800 R_X86_64_RELATIVE  *ABS*+0x0000000000314de0
0000000000315808 R_X86_64_RELATIVE  *ABS*+0x00000000000d6c60
0000000000315810 R_X86_64_RELATIVE  *ABS*+0x00000000000d6b90
0000000000315818 R_X86_64_RELATIVE  *ABS*+0x00000000000d6ae0
0000000000315820 R_X86_64_RELATIVE  *ABS*+0x00000000000d51b0
0000000000315828 R_X86_64_RELATIVE  *ABS*+0x00000000000db020
0000000000315830 R_X86_64_RELATIVE  *ABS*+0x00000000000db080
0000000000315840 R_X86_64_RELATIVE  *ABS*+0x0000000000314df8
0000000000315848 R_X86_64_RELATIVE  *ABS*+0x00000000000d65b0
0000000000315850 R_X86_64_RELATIVE  *ABS*+0x00000000000d6340
0000000000315858 R_X86_64_RELATIVE  *ABS*+0x00000000000d61e0
0000000000315860 R_X86_64_RELATIVE  *ABS*+0x00000000000d5190
0000000000315868 R_X86_64_RELATIVE  *ABS*+0x00000000000db730
0000000000315870 R_X86_64_RELATIVE  *ABS*+0x00000000000dcc70
0000000000315880 R_X86_64_RELATIVE  *ABS*+0x0000000000311500
0000000000315888 R_X86_64_RELATIVE  *ABS*+0x00000000000d55e0
0000000000315890 R_X86_64_RELATIVE  *ABS*+0x00000000000d60c0
0000000000315898 R_X86_64_RELATIVE  *ABS*+0x00000000000db9f0
00000000003158a0 R_X86_64_RELATIVE  *ABS*+0x00000000000db970
00000000003158a8 R_X86_64_RELATIVE  *ABS*+0x00000000000db9b0
00000000003158b0 R_X86_64_RELATIVE  *ABS*+0x00000000000d7ec0
00000000003158c0 R_X86_64_RELATIVE  *ABS*+0x0000000000314e30
00000000003158c8 R_X86_64_RELATIVE  *ABS*+0x00000000000d5180
00000000003158d0 R_X86_64_RELATIVE  *ABS*+0x00000000000d4fb0
00000000003158d8 R_X86_64_RELATIVE  *ABS*+0x00000000000d5530
00000000003158e0 R_X86_64_RELATIVE  *ABS*+0x00000000000db2b0
00000000003158e8 R_X86_64_RELATIVE  *ABS*+0x00000000000d6110
00000000003158f8 R_X86_64_RELATIVE  *ABS*+0x0000000000314e60
0000000000315900 R_X86_64_RELATIVE  *ABS*+0x00000000000d5170
0000000000315908 R_X86_64_RELATIVE  *ABS*+0x00000000000d50c0
0000000000315910 R_X86_64_RELATIVE  *ABS*+0x00000000000d6d30
0000000000315918 R_X86_64_RELATIVE  *ABS*+0x00000000000dddd0
0000000000315920 R_X86_64_RELATIVE  *ABS*+0x00000000000ddd50
0000000000315930 R_X86_64_RELATIVE  *ABS*+0x0000000000314ed8
0000000000315938 R_X86_64_RELATIVE  *ABS*+0x00000000000d5130
0000000000315940 R_X86_64_RELATIVE  *ABS*+0x00000000000d5560
0000000000315948 R_X86_64_RELATIVE  *ABS*+0x00000000000d5140
0000000000315950 R_X86_64_RELATIVE  *ABS*+0x00000000000d54e0
0000000000315958 R_X86_64_RELATIVE  *ABS*+0x00000000000d5910
0000000000315968 R_X86_64_RELATIVE  *ABS*+0x00000000000f6c20
0000000000315970 R_X86_64_RELATIVE  *ABS*+0x0000000000311f48
0000000000315980 R_X86_64_RELATIVE  *ABS*+0x0000000000315960
0000000000315988 R_X86_64_RELATIVE  *ABS*+0x00000000000e2c40
0000000000315990 R_X86_64_RELATIVE  *ABS*+0x00000000000e2dc0
0000000000315998 R_X86_64_RELATIVE  *ABS*+0x00000000000e2d60
00000000003159a0 R_X86_64_RELATIVE  *ABS*+0x00000000000e2c50
00000000003159a8 R_X86_64_RELATIVE  *ABS*+0x00000000000e2d90
0000000000315c10 R_X86_64_RELATIVE  *ABS*+0x000000000007cd70
0000000000315c18 R_X86_64_RELATIVE  *ABS*+0x00000000000d6290
0000000000315c20 R_X86_64_RELATIVE  *ABS*+0x00000000000c17a0
0000000000315c28 R_X86_64_RELATIVE  *ABS*+0x0000000000074230
0000000000315c30 R_X86_64_RELATIVE  *ABS*+0x00000000000bf0f0
0000000000315c38 R_X86_64_RELATIVE  *ABS*+0x0000000000074730
0000000000315c40 R_X86_64_RELATIVE  *ABS*+0x00000000000d61e0
0000000000315c48 R_X86_64_RELATIVE  *ABS*+0x000000000007c510
0000000000315c50 R_X86_64_RELATIVE  *ABS*+0x0000000000074690
0000000000315c58 R_X86_64_RELATIVE  *ABS*+0x00000000000d6ae0
0000000000315c60 R_X86_64_RELATIVE  *ABS*+0x00000000000cd980
0000000000315c68 R_X86_64_RELATIVE  *ABS*+0x0000000000074700
0000000000315c78 R_X86_64_RELATIVE  *ABS*+0x000000000008d920
0000000000315c88 R_X86_64_RELATIVE  *ABS*+0x0000000000074910
0000000000315c90 R_X86_64_RELATIVE  *ABS*+0x000000000007cb70
0000000000315ca8 R_X86_64_RELATIVE  *ABS*+0x0000000000090cd0
0000000000315cb0 R_X86_64_RELATIVE  *ABS*+0x00000000000ba120
0000000000315cb8 R_X86_64_RELATIVE  *ABS*+0x00000000000d5240
0000000000315cc0 R_X86_64_RELATIVE  *ABS*+0x0000000000074840
0000000000315cc8 R_X86_64_RELATIVE  *ABS*+0x00000000000c0a30
0000000000315cd0 R_X86_64_RELATIVE  *ABS*+0x00000000000d5260
0000000000315cd8 R_X86_64_RELATIVE  *ABS*+0x00000000000747c0
0000000000315ce0 R_X86_64_RELATIVE  *ABS*+0x00000000000d5250
0000000000315cf8 R_X86_64_RELATIVE  *ABS*+0x0000000000071610
0000000000315d00 R_X86_64_RELATIVE  *ABS*+0x0000000000316738
0000000000315d08 R_X86_64_RELATIVE  *ABS*+0x000000000007dac0
0000000000315d10 R_X86_64_RELATIVE  *ABS*+0x0000000000073690
0000000000315d18 R_X86_64_RELATIVE  *ABS*+0x00000000000a3d70
0000000000315d28 R_X86_64_RELATIVE  *ABS*+0x00000000000cc330
0000000000315d30 R_X86_64_RELATIVE  *ABS*+0x00000000000ae9c0
0000000000315d48 R_X86_64_RELATIVE  *ABS*+0x00000000000904c0
0000000000315d58 R_X86_64_RELATIVE  *ABS*+0x0000000000080450
0000000000315d68 R_X86_64_RELATIVE  *ABS*+0x0000000000072d80
0000000000315d70 R_X86_64_RELATIVE  *ABS*+0x0000000000073000
0000000000315d78 R_X86_64_RELATIVE  *ABS*+0x0000000000081320
0000000000315d80 R_X86_64_RELATIVE  *ABS*+0x000000000009a8f0
0000000000315d88 R_X86_64_RELATIVE  *ABS*+0x0000000000073760
0000000000315d90 R_X86_64_RELATIVE  *ABS*+0x00000000000c1b80
0000000000315d98 R_X86_64_RELATIVE  *ABS*+0x00000000000ddd50
0000000000315da0 R_X86_64_RELATIVE  *ABS*+0x0000000000316740
0000000000315da8 R_X86_64_RELATIVE  *ABS*+0x000000000007a1c0
0000000000315db0 R_X86_64_RELATIVE  *ABS*+0x0000000000081650
0000000000315dc0 R_X86_64_RELATIVE  *ABS*+0x00000000000c1850
0000000000315dd0 R_X86_64_RELATIVE  *ABS*+0x0000000000074850
0000000000315de0 R_X86_64_RELATIVE  *ABS*+0x000000000007a2e0
0000000000315de8 R_X86_64_RELATIVE  *ABS*+0x0000000000080170
0000000000315df8 R_X86_64_RELATIVE  *ABS*+0x000000000007a130
0000000000315e00 R_X86_64_RELATIVE  *ABS*+0x00000000000e0190
0000000000315e08 R_X86_64_RELATIVE  *ABS*+0x000000000008a0a0
0000000000315e10 R_X86_64_RELATIVE  *ABS*+0x0000000000072d90
0000000000315e18 R_X86_64_RELATIVE  *ABS*+0x00000000000d1b20
0000000000315e30 R_X86_64_RELATIVE  *ABS*+0x00000000000d1410
0000000000315e38 R_X86_64_RELATIVE  *ABS*+0x0000000000316728
0000000000315e40 R_X86_64_RELATIVE  *ABS*+0x00000000000d5300
0000000000315e48 R_X86_64_RELATIVE  *ABS*+0x00000000000736a0
0000000000315e50 R_X86_64_RELATIVE  *ABS*+0x00000000000b0690
0000000000315e58 R_X86_64_RELATIVE  *ABS*+0x00000000000d6a60
0000000000315e60 R_X86_64_RELATIVE  *ABS*+0x00000000000737a0
0000000000315e68 R_X86_64_RELATIVE  *ABS*+0x000000000007a250
0000000000315e70 R_X86_64_RELATIVE  *ABS*+0x0000000000081cb0
0000000000315e78 R_X86_64_RELATIVE  *ABS*+0x0000000000072160
0000000000315e88 R_X86_64_RELATIVE  *ABS*+0x0000000000074940
0000000000315e90 R_X86_64_RELATIVE  *ABS*+0x00000000000a2b70
0000000000315e98 R_X86_64_RELATIVE  *ABS*+0x0000000000071660
0000000000315ea0 R_X86_64_RELATIVE  *ABS*+0x0000000000079c50
0000000000315ea8 R_X86_64_RELATIVE  *ABS*+0x0000000000073770
0000000000315eb0 R_X86_64_RELATIVE  *ABS*+0x0000000000073650
0000000000315eb8 R_X86_64_RELATIVE  *ABS*+0x000000000007a370
0000000000315ec0 R_X86_64_RELATIVE  *ABS*+0x0000000000080a10
0000000000315ec8 R_X86_64_RELATIVE  *ABS*+0x0000000000073670
0000000000315ed0 R_X86_64_RELATIVE  *ABS*+0x00000000000d5280
0000000000315ee8 R_X86_64_RELATIVE  *ABS*+0x0000000000073630
0000000000315ef0 R_X86_64_RELATIVE  *ABS*+0x0000000000074880
0000000000315ef8 R_X86_64_RELATIVE  *ABS*+0x00000000000d52b0
0000000000315f00 R_X86_64_RELATIVE  *ABS*+0x00000000000d5230
0000000000315f08 R_X86_64_RELATIVE  *ABS*+0x00000000000ba4b0
0000000000315f10 R_X86_64_RELATIVE  *ABS*+0x00000000000aec90
0000000000315f18 R_X86_64_RELATIVE  *ABS*+0x00000000000d4f00
0000000000315f20 R_X86_64_RELATIVE  *ABS*+0x000000000007fe90
0000000000315f28 R_X86_64_RELATIVE  *ABS*+0x0000000000072520
0000000000315f38 R_X86_64_RELATIVE  *ABS*+0x0000000000073720
0000000000315f40 R_X86_64_RELATIVE  *ABS*+0x00000000000c16f0
0000000000315f48 R_X86_64_RELATIVE  *ABS*+0x0000000000080730
0000000000315f50 R_X86_64_RELATIVE  *ABS*+0x0000000000082310
0000000000315f58 R_X86_64_RELATIVE  *ABS*+0x0000000000071900
0000000000315f60 R_X86_64_RELATIVE  *ABS*+0x0000000000072200
0000000000315f68 R_X86_64_RELATIVE  *ABS*+0x00000000000d6110
0000000000315f70 R_X86_64_RELATIVE  *ABS*+0x0000000000072b10
0000000000315f78 R_X86_64_RELATIVE  *ABS*+0x0000000000081fe0
0000000000315f80 R_X86_64_RELATIVE  *ABS*+0x00000000000723e0
0000000000315f90 R_X86_64_RELATIVE  *ABS*+0x00000000000723d0
0000000000315fa0 R_X86_64_RELATIVE  *ABS*+0x00000000000b0300
0000000000315fa8 R_X86_64_RELATIVE  *ABS*+0x0000000000073730
0000000000315fb0 R_X86_64_RELATIVE  *ABS*+0x0000000000081980
0000000000315fb8 R_X86_64_RELATIVE  *ABS*+0x000000000007a400
0000000000315fc8 R_X86_64_RELATIVE  *ABS*+0x00000000000b9d90
0000000000315fd0 R_X86_64_RELATIVE  *ABS*+0x0000000000080cf0
0000000000315fd8 R_X86_64_RELATIVE  *ABS*+0x0000000000072450
0000000000315fe0 R_X86_64_RELATIVE  *ABS*+0x00000000000b24f0
0000000000316560 R_X86_64_RELATIVE  *ABS*+0x0000000000316560
0000000000310918 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310928 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310938 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310948 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310958 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310968 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310988 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310998 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
00000000003109a8 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
00000000003109b8 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
00000000003109c8 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
00000000003109d8 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
00000000003109e8 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
00000000003109f8 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310a08 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310a18 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310a28 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310a38 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310a48 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310a58 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310a68 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310a78 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310a88 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310a98 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310aa8 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310ab8 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310ac8 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310ad8 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310ae8 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310af8 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310b08 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310b18 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310b28 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310b38 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310b48 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310b58 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310b68 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310b98 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310ba8 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310bb8 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310be0 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310bf0 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310c00 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310c10 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310c20 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310c30 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310c40 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310c50 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310c60 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310c70 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310c80 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310c90 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310ca0 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310cb0 R_X86_64_64       vtable for __cxxabiv1::__function_type_info@CXXABI_1.3+0x0000000000000010
0000000000310978 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310b78 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310b88 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310cc0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310d30 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310d58 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310d98 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310dc0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310de8 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310e10 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310e38 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310e60 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310e70 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310f10 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311530 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311540 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311550 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311560 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311570 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311580 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311590 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003115a0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003115b0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003115c0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003115d0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003115e0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311620 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311630 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311640 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311650 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311660 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311670 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311680 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311690 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003116a0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003116b0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003116c0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003116d0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003116f8 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311708 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311718 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311728 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311738 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311748 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311758 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311768 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311778 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311788 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311fc0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311fd0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312030 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312040 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312068 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312390 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003123e8 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003123f8 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312408 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312448 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003124b8 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003124e0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003124f0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312500 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312528 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312538 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312548 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003125a8 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003125d0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003125f8 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312650 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312660 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312670 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312680 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312690 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003126d0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003127a8 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003127b8 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003127c8 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003127f0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312960 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312970 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312980 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312990 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003129a0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003129b0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003129c0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003129d0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003129e0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
00000000003129f0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312a50 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312a60 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312a70 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312a80 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312a90 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312aa0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312ab0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312ac0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312ad0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312ae0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312af0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312b00 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312b10 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312b20 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312b30 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312b40 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312c40 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312cc8 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312d50 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312d60 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312d70 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312d80 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312d90 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312da0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312e50 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312e60 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312e70 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312e80 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314e10 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314e20 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314e78 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314e88 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314e98 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314ea8 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314eb8 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314ec8 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314ef0 R_X86_64_64       vtable for __cxxabiv1::__class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310bc8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310cd0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310ce8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310d00 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310d18 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310d40 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310d68 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310d80 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310da8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310dd0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310df8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310e20 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310e48 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310e80 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310e98 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310eb0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310ec8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310ee0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310ef8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310f20 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310f38 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310f50 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310f68 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310f80 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310f98 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311500 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311518 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003115f0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311608 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003116e0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311f48 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311f60 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311f78 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311f90 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000311fa8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312018 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312050 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312078 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312090 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003120a8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003120c0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003120d8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003120f0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312108 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312120 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312138 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312150 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312168 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312180 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312198 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003121b0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003121c8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003121e0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003121f8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312210 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312228 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312240 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312258 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312270 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312288 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003122a0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003122b8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003122d0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003122e8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312300 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312318 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312330 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312348 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312360 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312378 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003123a0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003123b8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003123d0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312418 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312430 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312458 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312470 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312488 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003124a0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003124c8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312510 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312558 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003125b8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003125e0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312608 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312620 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312638 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003126a0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003126b8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312730 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312748 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312760 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312778 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312790 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003127d8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312878 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312890 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003128e0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003128f8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312910 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312b50 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312b68 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312b80 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312b98 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312bb0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312bc8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312be0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312bf8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312c10 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312c28 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314c70 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314c88 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314d50 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314d68 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314d80 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314d98 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314db0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314dc8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314de0 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314df8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314e30 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314e48 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314e60 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000314ed8 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000315960 R_X86_64_64       vtable for __cxxabiv1::__si_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000310ed8 R_X86_64_64       typeinfo for drake::systems::AbstractValue
0000000000310ef0 R_X86_64_64       typeinfo for drake::systems::AbstractValue
0000000000311510 R_X86_64_64       typeinfo for drake::systems::AbstractValue
0000000000311600 R_X86_64_64       typeinfo for drake::systems::AbstractValue
0000000000312440 R_X86_64_64       typeinfo for drake::systems::AbstractValue
00000000003126c8 R_X86_64_64       typeinfo for drake::systems::AbstractValue
0000000000314e58 R_X86_64_64       typeinfo for drake::systems::AbstractValue
0000000000315e28 R_X86_64_GLOB_DAT  typeinfo for drake::systems::AbstractValue
0000000000310fb0 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000310fd8 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311000 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311028 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311050 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311078 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
00000000003110a0 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
00000000003110c8 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
00000000003110f0 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311118 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311140 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311168 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311190 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
00000000003111b8 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
00000000003111e0 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311208 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311230 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311258 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311280 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
00000000003112a8 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
00000000003112d0 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
00000000003112f8 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311320 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311348 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311370 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311398 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
00000000003113c0 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
00000000003113e8 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311410 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311438 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311460 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311488 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
00000000003114b0 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
00000000003114d8 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
00000000003126e0 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000312708 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000312800 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000312828 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000312850 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000312a00 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000312a28 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000312c50 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000312c78 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000312ca0 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000312cd8 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000312d00 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000312d28 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000312db0 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000312dd8 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000312e00 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000312e28 R_X86_64_64       vtable for __cxxabiv1::__pointer_to_member_type_info@CXXABI_1.3+0x0000000000000010
0000000000311798 R_X86_64_64       vtable for __cxxabiv1::__pointer_type_info@CXXABI_1.3+0x0000000000000010
00000000003117b8 R_X86_64_64       vtable for __cxxabiv1::__pointer_type_info@CXXABI_1.3+0x0000000000000010
00000000003117d8 R_X86_64_64       vtable for __cxxabiv1::__pointer_type_info@CXXABI_1.3+0x0000000000000010
0000000000311f70 R_X86_64_64       typeinfo for std::logic_error@GLIBCXX_3.4
0000000000315ff0 R_X86_64_GLOB_DAT  typeinfo for std::logic_error@GLIBCXX_3.4
0000000000316750 R_X86_64_64       typeinfo for std::logic_error@GLIBCXX_3.4
0000000000311f88 R_X86_64_64       typeinfo for std::runtime_error@GLIBCXX_3.4
0000000000311fa0 R_X86_64_64       typeinfo for std::runtime_error@GLIBCXX_3.4
0000000000315d50 R_X86_64_GLOB_DAT  typeinfo for std::runtime_error@GLIBCXX_3.4
0000000000311fe0 R_X86_64_64       vtable for __cxxabiv1::__vmi_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312570 R_X86_64_64       vtable for __cxxabiv1::__vmi_class_type_info@CXXABI_1.3+0x0000000000000010
00000000003128a8 R_X86_64_64       vtable for __cxxabiv1::__vmi_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312928 R_X86_64_64       vtable for __cxxabiv1::__vmi_class_type_info@CXXABI_1.3+0x0000000000000010
0000000000312428 R_X86_64_64       typeinfo for drake::systems::ContextBase
0000000000312888 R_X86_64_64       typeinfo for drake::systems::ContextBase
0000000000312908 R_X86_64_64       typeinfo for drake::systems::ContextBase
0000000000315d38 R_X86_64_GLOB_DAT  typeinfo for drake::systems::ContextBase
0000000000312480 R_X86_64_64       typeinfo for drake::systems::SystemBase
0000000000312498 R_X86_64_64       typeinfo for drake::systems::SystemBase
00000000003124b0 R_X86_64_64       typeinfo for drake::systems::SystemBase
00000000003125c8 R_X86_64_64       typeinfo for drake::systems::InputPortBase
0000000000312b60 R_X86_64_64       typeinfo for drake::systems::InputPortBase
0000000000312bd8 R_X86_64_64       typeinfo for drake::systems::InputPortBase
0000000000315fc0 R_X86_64_GLOB_DAT  typeinfo for drake::systems::InputPortBase
0000000000312630 R_X86_64_64       typeinfo for drake::systems::lcm::SerializerInterface
0000000000312648 R_X86_64_64       typeinfo for drake::systems::lcm::SerializerInterface
0000000000312eb0 R_X86_64_64       std::logic_error::what() const@GLIBCXX_3.4
0000000000312f20 R_X86_64_64       std::runtime_error::what() const@GLIBCXX_3.4
0000000000312f48 R_X86_64_64       std::runtime_error::what() const@GLIBCXX_3.4
0000000000312f70 R_X86_64_64       std::runtime_error::what() const@GLIBCXX_3.4
0000000000312f98 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000312fa0 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313630 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313640 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313648 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313650 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313658 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313668 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313720 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313728 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313738 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313740 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313758 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313760 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313778 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003137b8 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003137c0 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003137c8 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003137e8 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003137f0 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313800 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313808 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313810 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313818 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313820 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313838 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003138e8 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003138f0 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313900 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313908 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313920 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313928 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313940 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313980 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313988 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313990 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003139b0 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003139b8 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003139c8 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003139d0 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003139d8 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003139e0 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003139e8 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313a00 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313ab0 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313ab8 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313ac8 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313ad0 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313ae8 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313af0 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313b08 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313b48 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313b50 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313b58 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313b78 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313b80 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313b90 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313b98 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313ba0 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313ba8 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313bb0 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313bc8 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313da8 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313db0 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313db8 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003140b8 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003140c0 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003140e0 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314148 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314160 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314168 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314430 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314440 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314448 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314450 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314458 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314468 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314718 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314728 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314730 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314738 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314740 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314750 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003149f0 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
00000000003149f8 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314a00 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314a28 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314a30 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000314a38 R_X86_64_64       __cxa_pure_virtual@CXXABI_1.3
0000000000313628 R_X86_64_64       drake::systems::ContextBase::GetSystemPathname[abi:cxx11]() const
0000000000313e08 R_X86_64_64       drake::systems::ContextBase::GetSystemPathname[abi:cxx11]() const
0000000000314428 R_X86_64_64       drake::systems::ContextBase::GetSystemPathname[abi:cxx11]() const
0000000000314498 R_X86_64_64       drake::systems::ContextBase::GetSystemPathname[abi:cxx11]() const
0000000000314710 R_X86_64_64       drake::systems::ContextBase::GetSystemPathname[abi:cxx11]() const
0000000000314780 R_X86_64_64       drake::systems::ContextBase::GetSystemPathname[abi:cxx11]() const
0000000000314cc8 R_X86_64_64       drake::systems::ContextBase::GetSystemPathname[abi:cxx11]() const
0000000000313708 R_X86_64_64       drake::systems::SystemBase::GetSystemPathname[abi:cxx11]() const
00000000003138d0 R_X86_64_64       drake::systems::SystemBase::GetSystemPathname[abi:cxx11]() const
0000000000313a98 R_X86_64_64       drake::systems::SystemBase::GetSystemPathname[abi:cxx11]() const
0000000000313e78 R_X86_64_64       drake::systems::SystemBase::GetSystemPathname[abi:cxx11]() const
0000000000314508 R_X86_64_64       drake::systems::SystemBase::GetSystemPathname[abi:cxx11]() const
00000000003147f0 R_X86_64_64       drake::systems::SystemBase::GetSystemPathname[abi:cxx11]() const
0000000000314f80 R_X86_64_64       drake::systems::SystemBase::GetSystemPathname[abi:cxx11]() const
0000000000315198 R_X86_64_64       drake::systems::SystemBase::GetSystemPathname[abi:cxx11]() const
00000000003153b0 R_X86_64_64       drake::systems::SystemBase::GetSystemPathname[abi:cxx11]() const
00000000003155c8 R_X86_64_64       drake::systems::SystemBase::GetSystemPathname[abi:cxx11]() const
0000000000314120 R_X86_64_64       drake::systems::RungeKutta3Integrator<double>::DoInitialize()
0000000000314130 R_X86_64_64       drake::systems::RungeKutta3Integrator<double>::DoStep(double const&)
0000000000315c70 R_X86_64_GLOB_DAT  typeinfo for std::out_of_range@GLIBCXX_3.4
0000000000315c80 R_X86_64_GLOB_DAT  vtable for std::bad_alloc@GLIBCXX_3.4
0000000000315c98 R_X86_64_GLOB_DAT  typeinfo for int@CXXABI_1.3
0000000000315ca0 R_X86_64_GLOB_DAT  stderr@GLIBC_2.2.5
0000000000315ce8 R_X86_64_GLOB_DAT  vsnprintf@GLIBC_2.2.5
0000000000315cf0 R_X86_64_GLOB_DAT  RigidBodyTreeConstants::kFirstNonWorldModelInstanceId
0000000000315d20 R_X86_64_GLOB_DAT  std::out_of_range::~out_of_range()@GLIBCXX_3.4
0000000000315d40 R_X86_64_GLOB_DAT  __pthread_key_create@GLIBC_2.2.5
0000000000315d60 R_X86_64_GLOB_DAT  _ITM_registerTMCloneTable
0000000000315db8 R_X86_64_GLOB_DAT  std::bad_alloc::~bad_alloc()@GLIBCXX_3.4
0000000000315dc8 R_X86_64_GLOB_DAT  _ITM_deregisterTMCloneTable
0000000000315dd8 R_X86_64_GLOB_DAT  __cxa_finalize@GLIBC_2.2.5
0000000000315df0 R_X86_64_GLOB_DAT  typeinfo for double@CXXABI_1.3
0000000000315e20 R_X86_64_GLOB_DAT  __gmon_start__
0000000000315e80 R_X86_64_GLOB_DAT  typeinfo for std::bad_alloc@GLIBCXX_3.4
0000000000315ed8 R_X86_64_GLOB_DAT  _Jv_RegisterClasses
0000000000315ee0 R_X86_64_GLOB_DAT  std::ios_base::Init::~Init()@GLIBCXX_3.4
0000000000315f30 R_X86_64_GLOB_DAT  std::runtime_error::~runtime_error()@GLIBCXX_3.4
0000000000315f88 R_X86_64_GLOB_DAT  vtable for drake::systems::OutputPortValue
0000000000315f98 R_X86_64_GLOB_DAT  std::logic_error::~logic_error()@GLIBCXX_3.4
0000000000315fe8 R_X86_64_GLOB_DAT  vtable for drake::systems::ContextBase
0000000000316758 R_X86_64_64       typeinfo for std::exception@GLIBCXX_3.4
0000000000316760 R_X86_64_64       __gxx_personality_v0@CXXABI_1.3
0000000000316018 R_X86_64_JUMP_SLOT  drake::symbolic::abs(drake::symbolic::Expression const&)
0000000000316020 R_X86_64_JUMP_SLOT  operator delete[](void*, unsigned long)@CXXABI_1.3.9
0000000000316028 R_X86_64_JUMP_SLOT  std::logic_error::logic_error(char const*)@GLIBCXX_3.4.21
0000000000316030 R_X86_64_JUMP_SLOT  drake::systems::AbstractValues::size() const
0000000000316038 R_X86_64_JUMP_SLOT  drake::systems::SystemBase::ThrowInputPortHasWrongType(char const*, drake::TypeSafeIndex<drake::systems::InputPortTag>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const
0000000000316040 R_X86_64_JUMP_SLOT  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@GLIBCXX_3.4.21
0000000000316048 R_X86_64_JUMP_SLOT  std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)@GLIBCXX_3.4.21
0000000000316050 R_X86_64_JUMP_SLOT  __cxa_begin_catch@CXXABI_1.3
0000000000316058 R_X86_64_JUMP_SLOT  realloc@GLIBC_2.2.5
0000000000316060 R_X86_64_JUMP_SLOT  operator delete(void*, unsigned long)@CXXABI_1.3.9
0000000000316068 R_X86_64_JUMP_SLOT  drake::systems::AbstractValues::CopyFrom(drake::systems::AbstractValues const&)
0000000000316070 R_X86_64_JUMP_SLOT  drake::systems::SystemBase::MakeContext() const
0000000000316078 R_X86_64_JUMP_SLOT  memmove@GLIBC_2.2.5
0000000000316080 R_X86_64_JUMP_SLOT  drake::systems::ContextBase::~ContextBase()
0000000000316088 R_X86_64_JUMP_SLOT  localtime_r@GLIBC_2.2.5
0000000000316090 R_X86_64_JUMP_SLOT  drake::systems::RigidBodyPlant<double>::get_rigid_body_tree() const
0000000000316098 R_X86_64_JUMP_SLOT  syscall@GLIBC_2.2.5
00000000003160a0 R_X86_64_JUMP_SLOT  drake::systems::AbstractValues::AbstractValues(std::vector<drake::systems::AbstractValue*, std::allocator<drake::systems::AbstractValue*> > const&)
00000000003160a8 R_X86_64_JUMP_SLOT  std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21
00000000003160b0 R_X86_64_JUMP_SLOT  drake::systems::SystemScalarConverter::SystemScalarConverter()
00000000003160b8 R_X86_64_JUMP_SLOT  std::runtime_error::runtime_error(char const*)@GLIBCXX_3.4.21
00000000003160c0 R_X86_64_JUMP_SLOT  drake::multibody::AddFlatTerrainToWorld(RigidBodyTree<double>*, double, double)
00000000003160c8 R_X86_64_JUMP_SLOT  drake::systems::SystemImpl::GetMemoryObjectName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, long)
00000000003160d0 R_X86_64_JUMP_SLOT  std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21
00000000003160d8 R_X86_64_JUMP_SLOT  __stack_chk_fail@GLIBC_2.4
00000000003160e0 R_X86_64_JUMP_SLOT  drake::systems::detail::ModelValues::CloneModel(int) const
00000000003160e8 R_X86_64_JUMP_SLOT  memset@GLIBC_2.2.5
00000000003160f0 R_X86_64_JUMP_SLOT  drake::systems::InputPortBase::~InputPortBase()
00000000003160f8 R_X86_64_JUMP_SLOT  std::thread::join()@GLIBCXX_3.4.11
0000000000316100 R_X86_64_JUMP_SLOT  drake::symbolic::operator+(drake::symbolic::Expression, drake::symbolic::Expression const&)
0000000000316108 R_X86_64_JUMP_SLOT  std::__throw_bad_cast()@GLIBCXX_3.4
0000000000316110 R_X86_64_JUMP_SLOT  strlen@GLIBC_2.2.5
0000000000316118 R_X86_64_JUMP_SLOT  drake::systems::SystemScalarConverter::Insert(std::type_info const&, std::type_info const&, std::function<void* (void const*)> const&)
0000000000316120 R_X86_64_JUMP_SLOT  __cxa_guard_abort@CXXABI_1.3
0000000000316128 R_X86_64_JUMP_SLOT  drake::systems::OutputPortValue::Clone() const
0000000000316130 R_X86_64_JUMP_SLOT  std::__throw_system_error(int)@GLIBCXX_3.4.11
0000000000316138 R_X86_64_JUMP_SLOT  drake::detail::AssertionFailed(char const*, char const*, char const*, int)
0000000000316140 R_X86_64_JUMP_SLOT  std::runtime_error::~runtime_error()@GLIBCXX_3.4
0000000000316148 R_X86_64_JUMP_SLOT  sqrt@GLIBC_2.2.5
0000000000316150 R_X86_64_JUMP_SLOT  fflush@GLIBC_2.2.5
0000000000316158 R_X86_64_JUMP_SLOT  std::ctype<char>::_M_widen_init() const@GLIBCXX_3.4.11
0000000000316160 R_X86_64_JUMP_SLOT  operator delete(void*)@GLIBCXX_3.4
0000000000316168 R_X86_64_JUMP_SLOT  std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21
0000000000316170 R_X86_64_JUMP_SLOT  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@GLIBCXX_3.4.21
0000000000316178 R_X86_64_JUMP_SLOT  google::ParseCommandLineFlags(int*, char***, bool)
0000000000316180 R_X86_64_JUMP_SLOT  google::FlagRegisterer::FlagRegisterer(char const*, char const*, char const*, char const*, void*, void*)
0000000000316188 R_X86_64_JUMP_SLOT  std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@GLIBCXX_3.4.21
0000000000316190 R_X86_64_JUMP_SLOT  isprint@GLIBC_2.2.5
0000000000316198 R_X86_64_JUMP_SLOT  RigidBodyTree<double>::FindBody(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) const
00000000003161a0 R_X86_64_JUMP_SLOT  drake::systems::SystemBase::ThrowInputPortIndexOutOfRange(char const*, drake::TypeSafeIndex<drake::systems::InputPortTag>, int) const
00000000003161a8 R_X86_64_JUMP_SLOT  __cxa_throw@CXXABI_1.3
00000000003161b0 R_X86_64_JUMP_SLOT  std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::_Ios_Openmode)@GLIBCXX_3.4.21
00000000003161b8 R_X86_64_JUMP_SLOT  pow@GLIBC_2.2.5
00000000003161c0 R_X86_64_JUMP_SLOT  std::__throw_length_error(char const*)@GLIBCXX_3.4
00000000003161c8 R_X86_64_JUMP_SLOT  _Unwind_Resume@GCC_3.0
00000000003161d0 R_X86_64_JUMP_SLOT  RigidBodyTree<double>::RigidBodyTree()
00000000003161d8 R_X86_64_JUMP_SLOT  drake::systems::SystemBase::EvalAbstractInputImpl(char const*, drake::systems::ContextBase const&, drake::TypeSafeIndex<drake::systems::InputPortTag>) const
00000000003161e0 R_X86_64_JUMP_SLOT  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@GLIBCXX_3.4.21
00000000003161e8 R_X86_64_JUMP_SLOT  gmtime_r@GLIBC_2.2.5
00000000003161f0 R_X86_64_JUMP_SLOT  std::basic_ostream<char, std::char_traits<char> >& std::basic_ostream<char, std::char_traits<char> >::_M_insert<double>(double)@GLIBCXX_3.4.9
00000000003161f8 R_X86_64_JUMP_SLOT  std::logic_error::logic_error(char const*)@GLIBCXX_3.4.21
0000000000316200 R_X86_64_JUMP_SLOT  drake::systems::SystemBase::ThrowNegativeInputPortIndex(char const*, int) const
0000000000316208 R_X86_64_JUMP_SLOT  __cxa_atexit@GLIBC_2.2.5
0000000000316210 R_X86_64_JUMP_SLOT  drake::systems::AbstractValue::~AbstractValue()
0000000000316218 R_X86_64_JUMP_SLOT  drake::systems::detail::ModelValues::size() const
0000000000316220 R_X86_64_JUMP_SLOT  drake::manipulation::util::SimDiagramBuilder<double>::AddVisualizer(drake::lcm::DrakeLcmInterface*)
0000000000316228 R_X86_64_JUMP_SLOT  drake::systems::SystemSymbolicInspector::SystemSymbolicInspector(drake::systems::System<drake::symbolic::Expression> const&)
0000000000316230 R_X86_64_JUMP_SLOT  drake::systems::SystemScalarConverter::Find(std::type_info const&, std::type_info const&) const
0000000000316238 R_X86_64_JUMP_SLOT  std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@GLIBCXX_3.4
0000000000316240 R_X86_64_JUMP_SLOT  std::runtime_error::runtime_error(char const*)@GLIBCXX_3.4.21
0000000000316248 R_X86_64_JUMP_SLOT  std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@GLIBCXX_3.4.9
0000000000316250 R_X86_64_JUMP_SLOT  drake::manipulation::util::SimDiagramBuilder<double>::ConnectControllersAndVisualizer()
0000000000316258 R_X86_64_JUMP_SLOT  ceil@GLIBC_2.2.5
0000000000316260 R_X86_64_JUMP_SLOT  nanosleep@GLIBC_2.2.5
0000000000316268 R_X86_64_JUMP_SLOT  memcmp@GLIBC_2.2.5
0000000000316270 R_X86_64_JUMP_SLOT  std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4
0000000000316278 R_X86_64_JUMP_SLOT  std::_Rb_tree_increment(std::_Rb_tree_node_base*)@GLIBCXX_3.4
0000000000316280 R_X86_64_JUMP_SLOT  fwrite@GLIBC_2.2.5
0000000000316288 R_X86_64_JUMP_SLOT  RigidBody<double>::get_model_instance_id() const
0000000000316290 R_X86_64_JUMP_SLOT  std::__throw_bad_function_call()@GLIBCXX_3.4.14
0000000000316298 R_X86_64_JUMP_SLOT  drake::manipulation::util::SimDiagramBuilder<double>::AddPlant(std::unique_ptr<RigidBodyTree<double>, std::default_delete<RigidBodyTree<double> > >)
00000000003162a0 R_X86_64_JUMP_SLOT  std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@GLIBCXX_3.4
00000000003162a8 R_X86_64_JUMP_SLOT  drake::systems::Simulator<double>::ResetStatistics()
00000000003162b0 R_X86_64_JUMP_SLOT  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21
00000000003162b8 R_X86_64_JUMP_SLOT  drake::systems::lcm::LcmPublisherSystem::set_publish_period(double)
00000000003162c0 R_X86_64_JUMP_SLOT  drake::systems::DrakeVisualizer::set_publish_period(double)
00000000003162c8 R_X86_64_JUMP_SLOT  std::__throw_logic_error(char const*)@GLIBCXX_3.4
00000000003162d0 R_X86_64_JUMP_SLOT  localeconv@GLIBC_2.2.5
00000000003162d8 R_X86_64_JUMP_SLOT  drake::systems::controllers::InverseDynamicsController<double>::InverseDynamicsController(std::unique_ptr<RigidBodyTree<double>, std::default_delete<RigidBodyTree<double> > >, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, Eigen::Matrix<double, -1, 1, 0, -1, 1> const&, bool)
00000000003162e0 R_X86_64_JUMP_SLOT  memcpy@GLIBC_2.14
00000000003162e8 R_X86_64_JUMP_SLOT  drake::NiceTypeName::Canonicalize(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
00000000003162f0 R_X86_64_JUMP_SLOT  std::__throw_bad_alloc()@GLIBCXX_3.4
00000000003162f8 R_X86_64_JUMP_SLOT  operator new(unsigned long)@GLIBCXX_3.4
0000000000316300 R_X86_64_JUMP_SLOT  free@GLIBC_2.2.5
0000000000316308 R_X86_64_JUMP_SLOT  drake::systems::SystemSymbolicInspector::IsConnectedInputToOutput(int, int) const
0000000000316310 R_X86_64_JUMP_SLOT  drake::log()
0000000000316318 R_X86_64_JUMP_SLOT  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@GLIBCXX_3.4.21
0000000000316320 R_X86_64_JUMP_SLOT  drake::systems::lcm::SerializerInterface::~SerializerInterface()
0000000000316328 R_X86_64_JUMP_SLOT  drake::FindResourceOrThrow(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
0000000000316330 R_X86_64_JUMP_SLOT  pthread_mutex_unlock@GLIBC_2.2.5
0000000000316338 R_X86_64_JUMP_SLOT  std::out_of_range::out_of_range(char const*)@GLIBCXX_3.4.21
0000000000316340 R_X86_64_JUMP_SLOT  std::basic_ostream<char, std::char_traits<char> >::operator<<(int)@GLIBCXX_3.4
0000000000316348 R_X86_64_JUMP_SLOT  pthread_mutex_lock@GLIBC_2.2.5
0000000000316350 R_X86_64_JUMP_SLOT  __cxa_guard_acquire@CXXABI_1.3
0000000000316358 R_X86_64_JUMP_SLOT  RigidBodyTree<double>::Clone() const
0000000000316360 R_X86_64_JUMP_SLOT  drake::systems::AbstractValues::AbstractValues()
0000000000316368 R_X86_64_JUMP_SLOT  __cxa_bad_cast@CXXABI_1.3
0000000000316370 R_X86_64_JUMP_SLOT  std::basic_ostream<char, std::char_traits<char> >& std::basic_ostream<char, std::char_traits<char> >::_M_insert<long>(long)@GLIBCXX_3.4.9
0000000000316378 R_X86_64_JUMP_SLOT  __cxa_allocate_exception@CXXABI_1.3
0000000000316380 R_X86_64_JUMP_SLOT  drake::symbolic::operator+=(drake::symbolic::Expression&, drake::symbolic::Expression const&)
0000000000316388 R_X86_64_JUMP_SLOT  std::basic_ostream<char, std::char_traits<char> >::flush()@GLIBCXX_3.4
0000000000316390 R_X86_64_JUMP_SLOT  __tls_get_addr@GLIBC_2.3
0000000000316398 R_X86_64_JUMP_SLOT  drake::symbolic::Expression::NaN()
00000000003163a0 R_X86_64_JUMP_SLOT  snprintf@GLIBC_2.2.5
00000000003163a8 R_X86_64_JUMP_SLOT  std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()@GLIBCXX_3.4.21
00000000003163b0 R_X86_64_JUMP_SLOT  drake::lcm::DrakeLcm::DrakeLcm()
00000000003163b8 R_X86_64_JUMP_SLOT  std::basic_ostream<char, std::char_traits<char> >::put(char)@GLIBCXX_3.4
00000000003163c0 R_X86_64_JUMP_SLOT  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@GLIBCXX_3.4.21
00000000003163c8 R_X86_64_JUMP_SLOT  std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@GLIBCXX_3.4
00000000003163d0 R_X86_64_JUMP_SLOT  __cxa_guard_release@CXXABI_1.3
00000000003163d8 R_X86_64_JUMP_SLOT  drake::lcm::DrakeLcm::StartReceiveThread()
00000000003163e0 R_X86_64_JUMP_SLOT  std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@GLIBCXX_3.4
00000000003163e8 R_X86_64_JUMP_SLOT  drake::systems::SystemBase::ThrowNotAVectorInputPort(char const*, drake::TypeSafeIndex<drake::systems::InputPortTag>) const
00000000003163f0 R_X86_64_JUMP_SLOT  drake::NiceTypeName::Demangle[abi:cxx11](char const*)
00000000003163f8 R_X86_64_JUMP_SLOT  std::logic_error::~logic_error()@GLIBCXX_3.4
0000000000316400 R_X86_64_JUMP_SLOT  drake::systems::lcm::LcmPublisherSystem::LcmPublisherSystem(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<drake::systems::lcm::SerializerInterface, std::default_delete<drake::systems::lcm::SerializerInterface> >, drake::lcm::DrakeLcmInterface*)
0000000000316408 R_X86_64_JUMP_SLOT  drake::detail::Abort(char const*, char const*, char const*, int)
0000000000316410 R_X86_64_JUMP_SLOT  drake::systems::ContextBase::CreateBuiltInTrackers()
0000000000316418 R_X86_64_JUMP_SLOT  drake::systems::SystemBase::~SystemBase()
0000000000316420 R_X86_64_JUMP_SLOT  drake::symbolic::Expression::Zero()
0000000000316428 R_X86_64_JUMP_SLOT  time@GLIBC_2.2.5
0000000000316430 R_X86_64_JUMP_SLOT  RigidBodyFrame<double>::RigidBodyFrame(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, RigidBody<double>*, Eigen::Transform<double, 3, 1, 0> const&)
0000000000316438 R_X86_64_JUMP_SLOT  drake::systems::SystemScalarConverter::RemoveUnlessAlsoSupportedBy(drake::systems::SystemScalarConverter const&)
0000000000316440 R_X86_64_JUMP_SLOT  drake::symbolic::operator*(drake::symbolic::Expression, drake::symbolic::Expression const&)
0000000000316448 R_X86_64_JUMP_SLOT  std::chrono::_V2::system_clock::now()@GLIBCXX_3.4.19
0000000000316450 R_X86_64_JUMP_SLOT  drake::detail::Throw(char const*, char const*, char const*, int)
0000000000316458 R_X86_64_JUMP_SLOT  drake::systems::FrameVisualizer::FrameVisualizer(RigidBodyTree<double> const*, std::vector<RigidBodyFrame<double>, std::allocator<RigidBodyFrame<double> > > const&, drake::lcm::DrakeLcmInterface*)
0000000000316460 R_X86_64_JUMP_SLOT  drake::systems::AbstractValues::AbstractValues(std::vector<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> >, std::allocator<std::unique_ptr<drake::systems::AbstractValue, std::default_delete<drake::systems::AbstractValue> > > >&&)
0000000000316468 R_X86_64_JUMP_SLOT  drake::systems::RigidBodyPlant<double>::model_instance_torque_output_port(int) const
0000000000316470 R_X86_64_JUMP_SLOT  drake::systems::AbstractValues::Clone() const
0000000000316478 R_X86_64_JUMP_SLOT  __cxa_end_catch@CXXABI_1.3
0000000000316480 R_X86_64_JUMP_SLOT  drake::systems::AbstractValues::get_mutable_value(int)
0000000000316488 R_X86_64_JUMP_SLOT  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@GLIBCXX_3.4.21
0000000000316490 R_X86_64_JUMP_SLOT  strcmp@GLIBC_2.2.5
0000000000316498 R_X86_64_JUMP_SLOT  __cxa_rethrow@CXXABI_1.3
00000000003164a0 R_X86_64_JUMP_SLOT  drake::systems::lcm::LcmSubscriberSystem::LcmSubscriberSystem(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<drake::systems::lcm::SerializerInterface, std::default_delete<drake::systems::lcm::SerializerInterface> >, drake::lcm::DrakeLcmInterface*)
00000000003164a8 R_X86_64_JUMP_SLOT  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)@GLIBCXX_3.4.21
00000000003164b0 R_X86_64_JUMP_SLOT  __cxa_free_exception@CXXABI_1.3
00000000003164b8 R_X86_64_JUMP_SLOT  drake::symbolic::max(drake::symbolic::Expression const&, drake::symbolic::Expression const&)
00000000003164c0 R_X86_64_JUMP_SLOT  strftime@GLIBC_2.2.5
00000000003164c8 R_X86_64_JUMP_SLOT  std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@GLIBCXX_3.4
00000000003164d0 R_X86_64_JUMP_SLOT  malloc@GLIBC_2.2.5
00000000003164d8 R_X86_64_JUMP_SLOT  drake::systems::InputPortBase::InputPortBase(drake::TypeSafeIndex<drake::systems::InputPortTag>, drake::TypeSafeIndex<drake::systems::DependencyTag>, drake::systems::PortDataType, int, stx::optional<drake::RandomDistribution> const&, drake::systems::SystemBase*)
00000000003164e0 R_X86_64_JUMP_SLOT  drake::systems::RigidBodyPlant<double>::get_num_model_instances() const
00000000003164e8 R_X86_64_JUMP_SLOT  drake::systems::Simulator<double>::PauseIfTooFast() const
00000000003164f0 R_X86_64_JUMP_SLOT  __libc_start_main@GLIBC_2.2.5
00000000003164f8 R_X86_64_JUMP_SLOT  std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()@GLIBCXX_3.4.21
0000000000316500 R_X86_64_JUMP_SLOT  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@GLIBCXX_3.4.21
0000000000316508 R_X86_64_JUMP_SLOT  drake::symbolic::Expression::Expression(double)
0000000000316510 R_X86_64_JUMP_SLOT  __dynamic_cast@CXXABI_1.3
0000000000316518 R_X86_64_JUMP_SLOT  std::ios_base::Init::Init()@GLIBCXX_3.4
0000000000316520 R_X86_64_JUMP_SLOT  drake::lcm::DrakeLcm::~DrakeLcm()
0000000000316528 R_X86_64_JUMP_SLOT  std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@GLIBCXX_3.4.18
0000000000316530 R_X86_64_JUMP_SLOT  drake::parsers::urdf::AddModelInstanceFromUrdfFileToWorld(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, drake::multibody::joints::FloatingBaseType, RigidBodyTree<double>*)
0000000000316538 R_X86_64_JUMP_SLOT  getpid@GLIBC_2.2.5
0000000000316540 R_X86_64_JUMP_SLOT  drake::systems::SystemBase::GetSystemPathname[abi:cxx11]() const
0000000000316548 R_X86_64_JUMP_SLOT  std::terminate()@GLIBCXX_3.4
0000000000316550 R_X86_64_JUMP_SLOT  sched_yield@GLIBC_2.2.5


