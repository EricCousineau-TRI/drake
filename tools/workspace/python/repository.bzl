# -*- mode: python -*-
# vi: set ft=python :

"""
Finds local system Python headers and libraries using python-config and
makes them available to be used as a C/C++ dependency. On macOS, Python
libraries should not typically be directly linked, so the :python target passes
the "-undefined dynamic_lookup" linker flag, however in the rare cases that
this would cause an undefined symbol error, a :python_direct_link target is
provided. On Linux, these targets are identical.

Example:
    WORKSPACE:
        load("@drake//tools/workspace/python:repository.bzl", "python_repository")  # noqa
        python_repository(
            name = "foo",
            version = "2",
        )

    BUILD:
        cc_library(
            name = "foobar",
            deps = ["@foo//:python"],
            srcs = ["bar.cc"],
        )

Arguments:
    name: A unique name for this rule.
    version: The major or major.minor version of Python headers and libraries
    to be found.
"""

load("@drake//tools/workspace:os.bzl", "determine_os")

def _py_exec(ctx, bin, cmd):
    args = [bin, "-c", "{}".format(cmd)]
    return _exec(ctx, args)

def _exec(ctx, args):
    result = ctx.execute(args)
    if result.return_code != 0:
        fail("Could not execute {}: {}".format(args, result.stderr))
    return result.stdout

_VERSION_MAJOR_MINOR_SUPPORTED = [
    "2.7",  # Ubuntu 16.04
    "3.5",  # Ubuntu 16.04
    "3.6",  # Homebrew
]

def _impl(repo_ctx):
    version = repo_ctx.attr.version
    if version == "path":
        tmp = repo_ctx.which("python")
        version = _py_exec(
            repo_ctx, tmp,
            "import sys; print(sys.version_info.major)").strip()

    python_config = repo_ctx.which("python{}-config".format(version))
    if not python_config:
        fail("Could NOT find python{}-config".format(
            version))
    python = repo_ctx.which("python{}".format(version))
    # Estimate that we're using the same configuration between
    # `python{version}` and `python-config{version}`.
    py_configdir = _py_exec(repo_ctx, python,
        "import sysconfig; print(sysconfig.get_config_var(\"LIBPL\"))").strip()
    py_config_configdir = _exec(repo_ctx, [python_config, "--configdir"]).strip()
    if (py_configdir != py_config_configdir):
        fail("Mismatch between {} and {}: {} != {}".format(
            python, python_config, py_configdir, py_config_configdir))

    version_major_minor = _py_exec(
        repo_ctx, python,
        "import sys; v = sys.version_info; print(\"{}.{}\".format(v.major, v.minor))").strip()
    if version_major_minor not in _VERSION_MAJOR_MINOR_SUPPORTED:
        msg = ("Python {} is not a supported / tested " +
               "version for use with Drake.\n  " +
               "Supported versions: {}\n").format(
               version_major_minor, _VERSION_MAJOR_MINOR_SUPPORTED)
        if repo_ctx.attr.if_unsupported == "warn":
            print("WARNING: " + msg)
        elif repo_ctx.attr.if_unsupported == "fail":
            fail(msg)

    result = repo_ctx.execute([python_config, "--includes"])

    if result.return_code != 0:
        fail("Could NOT determine Python includes", attr = result.stderr)

    cflags = result.stdout.strip().split(" ")
    cflags = [cflag for cflag in cflags if cflag]

    root = repo_ctx.path("")
    root_len = len(str(root)) + 1
    base = root.get_child("include")

    includes = []

    for cflag in cflags:
        if cflag.startswith("-I"):
            source = repo_ctx.path(cflag[2:])
            destination = base.get_child(str(source).replace("/", "_"))
            include = str(destination)[root_len:]

            if include not in includes:
                repo_ctx.symlink(source, destination)
                includes += [include]

    result = repo_ctx.execute([python_config, "--ldflags"])

    if result.return_code != 0:
        fail("Could NOT determine Python linkopts", attr = result.stderr)

    linkopts = result.stdout.strip().split(" ")
    linkopts = [linkopt for linkopt in linkopts if linkopt]

    for i in reversed(range(len(linkopts))):
        if not linkopts[i].startswith("-"):
            linkopts[i - 1] += " " + linkopts.pop(i)

    linkopts_direct_link = list(linkopts)

    os_result = determine_os(repo_ctx)
    if os_result.error != None:
        fail(os_result.error)

    if os_result.is_macos:
        for i in reversed(range(len(linkopts))):
            if linkopts[i].find("python{}".format(version)) != -1:
                linkopts.pop(i)
        linkopts = ["-undefined dynamic_lookup"] + linkopts

    file_content = """# -*- python -*-

# DO NOT EDIT: generated by python_repository()

licenses(["notice"])  # Python-2.0 / Python-3.0

cc_library(
    name = "python_headers",
    hdrs = glob(["include/**"]),
    includes = {},
    visibility = ["//visibility:private"],
)

cc_library(
    name = "python",
    linkopts = {},
    deps = [":python_headers"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "python_direct_link",
    linkopts = {},
    deps = [":python_headers"],
    visibility = ["//visibility:public"],
)
    """.format(includes, linkopts, linkopts_direct_link)

    repo_ctx.file("BUILD.bazel", content = file_content,
                        executable = False)

    skylark_content = """

# DO NOT EDIT: generated by python_repository()
def python_version_major_minor():
    return "{}"

def python_lib_dir():
    return "lib/python{}"
""".format(version_major_minor, version_major_minor)
    repo_ctx.file("python.bzl", content = skylark_content, executable = False)

python_repository = repository_rule(
    _impl,
    attrs = {
        "version": attr.string(default = "path"),
        "if_unsupported": attr.string(default = "warn"),
    },
    local = True,
)
