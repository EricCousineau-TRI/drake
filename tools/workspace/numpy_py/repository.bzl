# -*- mode: python -*-
# vi: set ft=python :

"""
Provides NumPy from a wheel file, or uses system version if it's known to be
the minimum required version.

See `check_required_numpy_version` in `pydrake/util/compatibility.py` for more
information about the required version.

Example:
    WORKSPACE:
        load(
            "@drake//tools/workspace/numpy_py:repo.bzl",
            "numpy_py_repository",
        )
        numpy_py_repository(
            name = "numpy_py",
            mirrors = mirrors,
        )

    BUILD:
        py_library(
            name = "foobar",
            deps = ["@numpy_py"],
            srcs = ["bar.py"],
        )

Arguments:
    name: A unique name for this rule.
    mirrors: Mirrors for download that must have entries for "pypi-general".

Warning:
    Do not name this `numpy`, as Bazel will confuse `PYTHONPATH` due to
    `legacy_create_init` behavior. If `numpy` is located in the repo root,
    `random` will be shadowed by `numpy.random`, causing everything to fail.
    If installed elsewhere, Bazel will put an autogenerated `__init__.py` at
    external directory's root, leak the wrong path, and shadow the real
    `numpy`. See https://github.com/bazelbuild/bazel/issues/3998
"""

load("@drake//tools/workspace:os.bzl", "determine_os")
load("@drake//tools/workspace:execute.bzl", "execute_or_fail")
load("@drake//tools/workspace/python:repository.bzl", "repository_python_info")

# See: https://pypi.org/project/numpy/#files
wheels = {
    # As of 2018-11-12, Ubuntu 16.04 distributes NumPy 1.11.0.
    "ubuntu_16.04": {
        "pypi_path": "40/c5/f1ed15dd931d6667b40f1ab1c2fe1f26805fc2b6c3e25e45664f838de9d0",  # noqa
        "filename": "numpy-1.15.2-cp27-cp27mu-manylinux1_x86_64.whl",
        "sha256": "82f00a1e2695a0e5b89879aa25ea614530b8ebdca6d49d4834843d498e8a5e92",  # noqa
    },
    # As of 2018-11-12, Ubuntu 18.04 distributes NumPy 1.13.3.
    "ubuntu_18.04": {
        "pypi_path": "40/c5/f1ed15dd931d6667b40f1ab1c2fe1f26805fc2b6c3e25e45664f838de9d0",  # noqa
        "filename": "numpy-1.15.2-cp27-cp27mu-manylinux1_x86_64.whl",  # noqa
        "sha256": "82f00a1e2695a0e5b89879aa25ea614530b8ebdca6d49d4834843d498e8a5e92",  # noqa
    },
    # Mac Homebrew typically distributes the latest version.
}

def _impl(repository_ctx):
    if repository_ctx.name == "numpy":
        fail("Do not name this repository `numpy`. Please name it " +
             "`numpy_py` or something else.")

    os_result = determine_os(repository_ctx)
    if os_result.error != None:
        fail(os_result.error)

    if os_result.is_macos:
        # Use Homebrew version of NumPy.
        py_info = repository_python_info(repository_ctx)
        script = (
            "from os.path import dirname; from numpy import __file__; " +
            "print(dirname(__file__))")
        numpy_dir = execute_or_fail(
            repository_ctx,
            [py_info.python, "-c", script]).stdout.strip()
        repository_ctx.symlink(numpy_dir, "numpy")
        install_clause = """
# No-op install for system dependency.
install(
    name = "install",
    visibility = ["//visibility:public"],
)""".strip()
    elif os_result.is_ubuntu:
        platform = "ubuntu_" + os_result.ubuntu_release
        wheel = wheels.get(platform)
        if wheel == None:
            fail("Unsupported platform: {}".format(platform))

        # TODO(eric.cousineau): Use `pypi.bzl` once it can be used as a
        # repository rule.
        urls = [
            url.format(**wheel)
            for url in repository_ctx.attr.mirrors.get("pypi")
        ]
        repository_ctx.download_and_extract(
            url = urls,
            sha256 = wheel["sha256"],
            type = "zip",
        )
        install_clause = """
install(
    name = "install",
    data = [":data"],
    data_dest = "@PYTHON_SITE_PACKAGES@",
    visibility = ["//visibility:public"],
)""".strip()
    else:
        fail("Unsupported platform")
    repository_ctx.template(
        "BUILD.bazel",
        Label("@drake//tools/workspace/numpy_py:package.BUILD.bazel.in"),
        substitutions = {"@INSTALL_CLAUSE@": install_clause},
        executable = False,
    )

numpy_py_repository = repository_rule(
    _impl,
    attrs = dict(
        mirrors = attr.string_list_dict(mandatory = True),
    ),
)
