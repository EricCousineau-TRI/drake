# -*- python -*-

# Should include everything any consumer of Drake would ever need.
#
# Do not update this list by hand; instead, run build_components_refresh.py.
#
# When adding new components to the package, please also add the licenses for
# any new external dependencies to :external_licenses.
LIBDRAKE_COMPONENTS = [
    "//common/proto:call_matlab",
    "//common/proto:call_python",
    "//common/proto:matlab_rpc",
    "//common/proto:protobuf",
    "//common/trajectories:piecewise_polynomial",
    "//common/trajectories:piecewise_quaternion",
    "//common/trajectories:piecewise_trajectory",
    "//common/trajectories:trajectory",
    "//common:autodiff",
    "//common:autodiffxd_make_coherent",
    "//common:common",
    "//common:cond",
    "//common:copyable_unique_ptr",
    "//common:default_scalars",
    "//common:double",
    "//common:drake_path",
    "//common:dummy_value",
    "//common:essential",
    "//common:extract_double",
    "//common:find_resource",
    "//common:hash",
    "//common:is_approx_equal_abstol",
    "//common:is_cloneable",
    "//common:is_less_than_comparable",
    "//common:nice_type_name",
    "//common:number_traits",
    "//common:polynomial",
    "//common:reset_after_move",
    "//common:reset_on_copy",
    "//common:scoped_singleton",
    "//common:sorted_pair",
    "//common:sorted_vectors_have_intersection",
    "//common:symbolic",
    "//common:symbolic_decompose",
    "//common:text_logging_gflags",
    "//common:text_logging_gflags_h",
    "//common:type_safe_index",
    "//common:unused",
    "//math:autodiff",
    "//math:barycentric",
    "//math:continuous_algebraic_riccati_equation",
    "//math:discrete_algebraic_riccati_equation",
    "//math:eigen_sparse_triplet",
    "//math:evenly_distributed_pts_on_sphere",
    "//math:expmap",
    "//math:geometric_transform",
    "//math:gradient",
    "//math:gray_code",
    "//math:jacobian",
    "//math:matrix_util",
    "//math:orthonormal_basis",
    "//math:quadratic_form",
    "//math:saturate",
    "//math:vector3_util",
    "//math:wrap_to",
]
