# -*- python -*-
# This file contains rules for Bazel; see drake/doc/bazel.rst.

load("//tools/workspace/gurobi:gurobi.bzl", "gurobi_test_tags")
load("@drake//tools:install.bzl", "install")
load(
    "//tools:drake.bzl",
    "drake_py_library",
    "drake_py_test",
    "drake_cc_library",
    "drake_cc_binary",
)
load("//tools/lint:lint.bzl", "add_lint_tests")
load(":pybind.bzl", "drake_pybind_library")

# TODO(eric.cousineau): Make default visibility "__subpackage__".
package(default_visibility = ["//visibility:public"])

# Location of //bindings relative to this package.
# This tells `py_library` how to structure the Python directories so we can
# type "import pydrake.${module}".
py_imports = ['..']

# Append to this as Python targets are defined.
# @see TODO in `pybind.bzl` to actually have these dependencies better listed
# transitively.
py_shared_libraries = []

drake_pybind_library(
    name = "common_py",
    cc_devel_deps = [
        "//drake/common",
    ],
    cc_srcs = ["common_py.cc"],
    py_srcs = [
        "__init__.py",
        "common.py",
        ":autogenerated_path",
    ],
    py_imports = py_imports,
)
py_shared_libraries.append("_common_py.so")

# TODO(eric.cousineau): Make this private, `_autogenerated_path.py`.
genrule(
    name = "autogenerated_path",
    srcs = ["autogenerated_path.py.in"],
    outs = ["autogenerated_path.py"],
    cmd = "sed 's#@RELATIVE_PATH_PYDRAKE_DRAKE@#../../..#g' $< > $@",
    visibility = ["//visibility:private"],
)

drake_cc_library(
    name = "autodiff_types",
    hdrs = ["autodiff_types_py.h"],
    deps = [
        "//drake/common:autodiff",
    ],
)

drake_pybind_library(
    name = "autodiffutils_py",
    cc_deps = [
        ":autodiff_types",
    ],
    cc_devel_deps = [
        "//drake/common:autodiff",
    ],
    cc_srcs = [
        "autodiffutils_py.cc",
    ],
    py_srcs = [
        "autodiffutils.py",
        "forwarddiff.py",
    ],
    py_deps = [
        ":common_py",
    ],
    py_imports = py_imports,
)
py_shared_libraries.append("_autodiffutils_py.so")

drake_cc_library(
    name = "symbolic_types",
    hdrs = ["symbolic_types_py.h"],
    deps = [
        "//drake/common",
    ],
)

drake_pybind_library(
    name = "symbolic_py",
    cc_srcs = [
        "symbolic_py.cc",
    ],
    cc_deps = [
        ":symbolic_types",
    ],
    cc_devel_deps = [
        "//drake/common",
    ],
    py_srcs = [
        "symbolic.py",
    ],
    py_deps = [
        ":common_py",
    ],
    py_imports = py_imports,
)
py_shared_libraries.append("_symbolic_py.so")

# Add `solvers` shared objects.
py_shared_libraries += [
    "//drake/bindings/pydrake/solvers:_mathematicalprogram_py.so",
]

drake_py_library(
    name = "pydrake",
    deps = [
        ":common_py",
        ":autodiffutils_py",
        ":symbolic_py",
        "//drake/bindings/pydrake/solvers",
    ],
    visibility = ["//visibility:public"],
)

# # For install rule.
# drake_cc_binary(
#     name = "pydrake_shared_libraries",
#     linkstatic = 0,
#     srcs = [
#         ":_common_py.so",
#         ":_autodiffutils_py.so",
#         ":_symbolic_py.so",
#     ],
#     # visibility = ["//visbility:private"],
# )

py_dest = "lib/python2.7/site-packages/pydrake"

install(
    name = "install",
    targets = [
        ":pydrake",
    ] + py_shared_libraries,
    py_dest = py_dest,
    library_dest = py_dest,
    visibility = ["//visibility:public"],
    deps = ["//drake:install"],
    use_transitive_sources = ["py"],
)

drake_py_test(
    name = "common_test",
    size = "small",
    srcs = ["test/testCommon.py"],
    data = ["//drake/examples/atlas:models"],
    main = "test/testCommon.py",
    deps = [":common_py"],
)

drake_py_test(
    name = "forward_diff_test",
    size = "small",
    srcs = ["test/testForwardDiff.py"],
    main = "test/testForwardDiff.py",
    deps = [":autodiffutils_py"],
)

drake_py_test(
    name = "symbolic_test",
    size = "small",
    srcs = ["test/testSymbolic.py"],
    main = "test/testSymbolic.py",
    deps = [":symbolic_py"],
)

# Ensure that our linking mechanisms do not duplicate object code.
# Test this via symbolic.
# TODO(eric.cousineau): Implement this!

add_lint_tests()
