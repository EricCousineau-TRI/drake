# -*- python -*-
# This file contains rules for Bazel; see drake/doc/bazel.rst.

load("//tools/workspace/gurobi:gurobi.bzl", "gurobi_test_tags")
load("@drake//tools:install.bzl", "install")
load(
    "//tools:drake.bzl",
    "drake_py_library",
    "drake_py_test",
    "drake_cc_library",
    "drake_cc_binary",
)
load("//tools/lint:lint.bzl", "add_lint_tests")
load(":pybind.bzl", "drake_pybind_library")

# TODO(eric.cousineau): Make default visibility "__subpackage__".
package(default_visibility = ["//visibility:public"])

# Location of //bindings relative to this package.
# This tells `py_library` how to structure the Python directories so we can
# type "import pydrake.${modu1e}".
py_imports = ['..']
# Installation location, relative to "site-packages".
py_pkg_install = "pydrake"

# WARNING:
# Any common headers should be shared via a HEADER ONLY library.
# If you have common object code, then you should produce a shared object that
# will be installed as well, and it should not be a direct `{drake_}cc_library`.
# Instead, use something aking to `cc_shared_library()`, which will front the object
# code as a `{drake_}cc_binary`.

drake_pybind_library(
    name = "common_py",
    cc_devel_deps = [
        "//drake/common",
    ],
    cc_srcs = ["common_py.cc"],
    py_srcs = [
        "__init__.py",
        "common.py",
        ":autogenerated_path",
    ],
    py_imports = py_imports,
    py_pkg_install = py_pkg_install,
)

# TODO(eric.cousineau): Make this private, `_autogenerated_path.py`.
genrule(
    name = "autogenerated_path",
    srcs = ["autogenerated_path.py.in"],
    outs = ["autogenerated_path.py"],
    cmd = "sed 's#@RELATIVE_PATH_PYDRAKE_DRAKE@#../../..#g' $< > $@",
    visibility = ["//visibility:private"],
)

drake_cc_library(
    name = "autodiff_types",
    hdrs = ["autodiff_types_py.h"],
    # NOTE: We must violate IWYU here because we do not want this dependencies leaking in
    # at install time.
    # deps = [
    #     "//drake/common:autodiff",
    # ],
)

drake_pybind_library(
    name = "autodiffutils_py",
    cc_deps = [
        ":autodiff_types",
    ],
    cc_devel_deps = [
        "//drake/common:autodiff",
    ],
    cc_srcs = [
        "autodiffutils_py.cc",
    ],
    py_srcs = [
        "autodiffutils.py",
        "forwarddiff.py",
    ],
    py_deps = [
        ":common_py",
    ],
    py_imports = py_imports,
    py_pkg_install = py_pkg_install,
)

drake_cc_library(
    name = "symbolic_types",
    hdrs = ["symbolic_types_py.h"],
    # @see `autodiff_types` for explanation.
    # deps = [
    #     "//drake/common",
    # ],
)

drake_pybind_library(
    name = "symbolic_py",
    cc_srcs = [
        "symbolic_py.cc",
    ],
    cc_deps = [
        ":symbolic_types",
    ],
    cc_devel_deps = [
        "//drake/common",
    ],
    py_srcs = [
        "symbolic.py",
    ],
    py_deps = [
        ":common_py",
    ],
    py_imports = py_imports,
    py_pkg_install = py_pkg_install,
)

drake_py_library(
    name = "pydrake",
    deps = [
        ":common_py",
        ":autodiffutils_py",
        ":symbolic_py",
        "//drake/bindings/pydrake/solvers",
    ],
    visibility = ["//visibility:public"],
)

install(
    name = "install",
    deps = [
        ":common_py_install",
        ":autodiffutils_py_install",
        ":symbolic_py_install",
        "//drake/bindings/pydrake/solvers:install",
        "//drake:install"
    ],
    visibility = ["//visibility:public"],
)

drake_py_test(
    name = "common_test",
    size = "small",
    srcs = ["test/testCommon.py"],
    data = ["//drake/examples/atlas:models"],
    main = "test/testCommon.py",
    deps = [":common_py"],
)

drake_py_test(
    name = "forward_diff_test",
    size = "small",
    srcs = ["test/testForwardDiff.py"],
    main = "test/testForwardDiff.py",
    deps = [":autodiffutils_py"],
)

drake_py_test(
    name = "symbolic_test",
    size = "small",
    srcs = ["test/testSymbolic.py"],
    main = "test/testSymbolic.py",
    deps = [":symbolic_py"],
)

# Ensures that our linking mechanisms do not duplicate object code (#6465).
drake_pybind_library(
    name = "test/odr_test_py",
    cc_srcs = [
        "test/odr_test_py.cc",
    ],
    cc_deps = [
        ":symbolic_types",
    ],
    cc_devel_deps = [
        "//drake/common:symbolic",
    ],
    py_deps = [
        ":symbolic_py",
    ],
    py_imports = py_imports,
)

drake_py_test(
    name = "odr_test",
    size = "small",
    srcs = ["test/odr_test.py"],
    main = "test/odr_test.py",
    deps = [":test/odr_test_py"],
)

add_lint_tests()
